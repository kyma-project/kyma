apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "stability-checker.fullname" . }}
  labels:
    app: {{ template "stability-checker.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "stability-checker.fullname" . }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: {{ template "stability-checker.fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      serviceAccountName: {{ template "stability-checker.fullname" . }}

      volumes:
        - name: testing-script-volume
          persistentVolumeClaim:
            claimName: {{ .Values.storage.claimName }}
        {{ if .Values.logsPersistence.enabled }}
        - name: config
          emptyDir: {}
        - name: fluentconfig
          configMap:
            name: fluentd-config
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: google-creds
          secret:
            secretName: sa-stability-fluentd-storage-writer
        {{ end }}

      {{ if .Values.logsPersistence.enabled }}
      initContainers:
        - name: copy-fluentd-config
          image: alpine:3.9
          command: ['/bin/sh', '-c', 'cp /config-volume/* /etc/fluentd']
          volumeMounts:
          - name: fluentconfig
            mountPath: /config-volume
          - name: config
            mountPath: /etc/fluentd
      {{ end }}

      containers:
      {{ if .Values.logsPersistence.enabled }}
      - name: fluentd
        image: fluent/fluentd-kubernetes-daemonset:v1.3.3-debian-gcs-1.0
        env:
          # Fluentd needs root privileges to access /var/logs
          - name: FLUENT_UID
            value: "0"
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
          - name: config
            mountPath: /fluentd/etc/
          - name: varlog
            mountPath: /var/log
          - name: varlibdockercontainers
            mountPath: /var/lib/docker/containers
            readOnly: true
          - name: google-creds
            mountPath: /etc/google
            readOnly: true
      {{ end }}
      # The container name is hardcoded in the stability checker, do not change it
      - name: stability-checker
        image: "{{ .Values.containerRegistry.path }}/develop/stability-checker:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"

        ports:
        - containerPort: {{ .Values.service.internalPort }}

        env:
          - name: APP_PORT
            value: "{{ .Values.service.internalPort }}"
          - name: APP_WORKING_NAMESPACE
            value: "{{ .Release.Namespace }}"
          - name: APP_CLUSTER_NAME
            value: "{{ .Values.clusterName }}"
          - name: APP_TEST_CONFIG_MAP_NAME
            value: "{{ .Chart.Name }}-test-results"
          - name: APP_PATH_TO_TESTING_SCRIPT
            value: "{{ .Values.pathToTestingScript }}"
          - name: APP_SLACK_CLIENT_CHANNEL_ID
            value: "{{ .Values.slackClientChannelId }}"
          - name: APP_SLACK_CLIENT_WEBHOOK_URL
            value: "{{ .Values.slackClientWebhookUrl }}"
          - name: APP_SLACK_CLIENT_TOKEN
            value: "{{ .Values.slackClientToken }}"
          - name: APP_TEST_THROTTLE
            value: "{{ .Values.testThrottle }}"
          - name: APP_TEST_RESULT_WINDOW_TIME
            value: "{{ .Values.testResultWindowTime }}"
          - name: APP_STATS_ENABLED
            value: "{{ .Values.stats.enabled }}"
          - name: APP_STATS_FAILING_TEST_REGEXP
            value: "{{ .Values.stats.failingTestRegexp }}"
          - name: APP_STATS_SUCCESSFUL_TEST_REGEXP
            value: "{{ .Values.stats.successfulTestRegexp }}"



        volumeMounts:
          - name: testing-script-volume
            mountPath: /data

        readinessProbe:
          httpGet:
            path: /statusz
            port: {{ .Values.service.internalPort }}
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 3
          successThreshold: 1
          timeoutSeconds: 2

        livenessProbe:
          httpGet:
            path: /statusz
            port: {{ .Values.service.internalPort }}

          periodSeconds: 10
          timeoutSeconds: 2
          successThreshold: 1
