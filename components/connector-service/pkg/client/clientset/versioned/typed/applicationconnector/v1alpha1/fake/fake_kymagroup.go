// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/kyma-project/kyma/components/connector-service/pkg/apis/applicationconnector/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeKymaGroups implements KymaGroupInterface
type FakeKymaGroups struct {
	Fake *FakeApplicationconnectorV1alpha1
}

var kymagroupsResource = schema.GroupVersionResource{Group: "applicationconnector.kyma-project.io", Version: "v1alpha1", Resource: "kymagroups"}

var kymagroupsKind = schema.GroupVersionKind{Group: "applicationconnector.kyma-project.io", Version: "v1alpha1", Kind: "KymaGroup"}

// GetToken takes name of the kymaGroup, and returns the corresponding kymaGroup object, and an error if there is any.
func (c *FakeKymaGroups) Get(name string, options v1.GetOptions) (result *v1alpha1.KymaGroup, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(kymagroupsResource, name), &v1alpha1.KymaGroup{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KymaGroup), err
}

// List takes label and field selectors, and returns the list of KymaGroups that match those selectors.
func (c *FakeKymaGroups) List(opts v1.ListOptions) (result *v1alpha1.KymaGroupList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(kymagroupsResource, kymagroupsKind, opts), &v1alpha1.KymaGroupList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.KymaGroupList{}
	for _, item := range obj.(*v1alpha1.KymaGroupList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kymaGroups.
func (c *FakeKymaGroups) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(kymagroupsResource, opts))
}

// CreateToken takes the representation of a kymaGroup and creates it.  Returns the server's representation of the kymaGroup, and an error, if there is any.
func (c *FakeKymaGroups) Create(kymaGroup *v1alpha1.KymaGroup) (result *v1alpha1.KymaGroup, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(kymagroupsResource, kymaGroup), &v1alpha1.KymaGroup{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KymaGroup), err
}

// Update takes the representation of a kymaGroup and updates it. Returns the server's representation of the kymaGroup, and an error, if there is any.
func (c *FakeKymaGroups) Update(kymaGroup *v1alpha1.KymaGroup) (result *v1alpha1.KymaGroup, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(kymagroupsResource, kymaGroup), &v1alpha1.KymaGroup{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KymaGroup), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeKymaGroups) UpdateStatus(kymaGroup *v1alpha1.KymaGroup) (*v1alpha1.KymaGroup, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(kymagroupsResource, "status", kymaGroup), &v1alpha1.KymaGroup{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KymaGroup), err
}

// DeleteToken takes name of the kymaGroup and deletes it. Returns an error if one occurs.
func (c *FakeKymaGroups) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(kymagroupsResource, name), &v1alpha1.KymaGroup{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKymaGroups) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(kymagroupsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.KymaGroupList{})
	return err
}

// Patch applies the patch and returns the patched kymaGroup.
func (c *FakeKymaGroups) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.KymaGroup, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(kymagroupsResource, name, data, subresources...), &v1alpha1.KymaGroup{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KymaGroup), err
}
