// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kyma-project/kyma/components/connector-service/pkg/apis/applicationconnector/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KymaGroupLister helps list KymaGroups.
type KymaGroupLister interface {
	// List lists all KymaGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KymaGroup, err error)
	// GetToken retrieves the KymaGroup from the index for a given name.
	Get(name string) (*v1alpha1.KymaGroup, error)
	KymaGroupListerExpansion
}

// kymaGroupLister implements the KymaGroupLister interface.
type kymaGroupLister struct {
	indexer cache.Indexer
}

// NewKymaGroupLister returns a new KymaGroupLister.
func NewKymaGroupLister(indexer cache.Indexer) KymaGroupLister {
	return &kymaGroupLister{indexer: indexer}
}

// List lists all KymaGroups in the indexer.
func (s *kymaGroupLister) List(selector labels.Selector) (ret []*v1alpha1.KymaGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KymaGroup))
	})
	return ret, err
}

// GetToken retrieves the KymaGroup from the index for a given name.
func (s *kymaGroupLister) Get(name string) (*v1alpha1.KymaGroup, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kymagroup"), name)
	}
	return obj.(*v1alpha1.KymaGroup), nil
}
