// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import apperrors "github.com/kyma-project/kyma/components/connector-service/internal/apperrors"

import mock "github.com/stretchr/testify/mock"
import v1alpha1 "github.com/kyma-project/kyma/components/connector-service/pkg/apis/applicationconnector/v1alpha1"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddApplication provides a mock function with given fields: group, app
func (_m *Repository) AddApplication(group string, app *v1alpha1.Application) apperrors.AppError {
	ret := _m.Called(group, app)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, *v1alpha1.Application) apperrors.AppError); ok {
		r0 = rf(group, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// Create provides a mock function with given fields: application
func (_m *Repository) Create(application *v1alpha1.KymaGroup) apperrors.AppError {
	ret := _m.Called(application)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(*v1alpha1.KymaGroup) apperrors.AppError); ok {
		r0 = rf(application)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// Get provides a mock function with given fields: name
func (_m *Repository) Get(name string) (*v1alpha1.KymaGroup, apperrors.AppError) {
	ret := _m.Called(name)

	var r0 *v1alpha1.KymaGroup
	if rf, ok := ret.Get(0).(func(string) *v1alpha1.KymaGroup); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.KymaGroup)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string) apperrors.AppError); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// RemoveApplication provides a mock function with given fields: group, appId
func (_m *Repository) RemoveApplication(group string, appId string) apperrors.AppError {
	ret := _m.Called(group, appId)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string) apperrors.AppError); ok {
		r0 = rf(group, appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// UpdateClusterData provides a mock function with given fields: group, cluster
func (_m *Repository) UpdateClusterData(group string, cluster *v1alpha1.Cluster) apperrors.AppError {
	ret := _m.Called(group, cluster)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, *v1alpha1.Cluster) apperrors.AppError); ok {
		r0 = rf(group, cluster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}
