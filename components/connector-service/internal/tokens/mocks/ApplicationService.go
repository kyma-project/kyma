// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import apperrors "github.com/kyma-project/kyma/components/connector-service/internal/apperrors"
import mock "github.com/stretchr/testify/mock"
import tokens "github.com/kyma-project/kyma/components/connector-service/internal/tokens"

// ApplicationService is an autogenerated mock type for the ApplicationService type
type ApplicationService struct {
	mock.Mock
}

// CreateAppToken provides a mock function with given fields: identifier, data
func (_m *ApplicationService) CreateAppToken(identifier string, data *tokens.TokenData) (string, apperrors.AppError) {
	ret := _m.Called(identifier, data)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, *tokens.TokenData) string); ok {
		r0 = rf(identifier, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string, *tokens.TokenData) apperrors.AppError); ok {
		r1 = rf(identifier, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// DeleteAppToken provides a mock function with given fields: identifier
func (_m *ApplicationService) DeleteAppToken(identifier string) {
	_m.Called(identifier)
}

// GetAppToken provides a mock function with given fields: identifier
func (_m *ApplicationService) GetAppToken(identifier string) (*tokens.TokenData, bool) {
	ret := _m.Called(identifier)

	var r0 *tokens.TokenData
	if rf, ok := ret.Get(0).(func(string) *tokens.TokenData); ok {
		r0 = rf(identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tokens.TokenData)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(identifier)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}
