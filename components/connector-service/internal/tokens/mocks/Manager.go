// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import apperrors "github.com/kyma-project/kyma/components/connector-service/internal/apperrors"
import mock "github.com/stretchr/testify/mock"
import tokens "github.com/kyma-project/kyma/components/connector-service/internal/tokens"

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Delete provides a mock function with given fields: token
func (_m *Manager) Delete(token string) {
	_m.Called(token)
}

// Replace provides a mock function with given fields: token, serializableContext
func (_m *Manager) Replace(token string, serializableContext tokens.Serializer) (string, apperrors.AppError) {
	ret := _m.Called(token, serializableContext)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, tokens.Serializer) string); ok {
		r0 = rf(token, serializableContext)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string, tokens.Serializer) apperrors.AppError); ok {
		r1 = rf(token, serializableContext)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: serializableContext
func (_m *Manager) Save(serializableContext tokens.Serializer) (string, apperrors.AppError) {
	ret := _m.Called(serializableContext)

	var r0 string
	if rf, ok := ret.Get(0).(func(tokens.Serializer) string); ok {
		r0 = rf(serializableContext)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(tokens.Serializer) apperrors.AppError); ok {
		r1 = rf(serializableContext)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}
