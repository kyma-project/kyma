// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import apperrors "github.com/kyma-project/kyma/components/application-registry/internal/apperrors"
import applications "github.com/kyma-project/kyma/components/application-registry/internal/metadata/applications"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-project/kyma/components/application-registry/internal/metadata/model"

// Strategy is an autogenerated mock type for the Strategy type
type Strategy struct {
	mock.Mock
}

// CreateSecretData provides a mock function with given fields: credentials
func (_m *Strategy) CreateSecretData(credentials *model.Credentials) (map[string][]byte, apperrors.AppError) {
	ret := _m.Called(credentials)

	var r0 map[string][]byte
	if rf, ok := ret.Get(0).(func(*model.Credentials) map[string][]byte); ok {
		r0 = rf(credentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(*model.Credentials) apperrors.AppError); ok {
		r1 = rf(credentials)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// CredentialsProvided provides a mock function with given fields: credentials
func (_m *Strategy) CredentialsProvided(credentials *model.Credentials) bool {
	ret := _m.Called(credentials)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.Credentials) bool); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ToAppCredentials provides a mock function with given fields: credentials, secretName
func (_m *Strategy) ToAppCredentials(credentials *model.Credentials, secretName string) applications.Credentials {
	ret := _m.Called(credentials, secretName)

	var r0 applications.Credentials
	if rf, ok := ret.Get(0).(func(*model.Credentials, string) applications.Credentials); ok {
		r0 = rf(credentials, secretName)
	} else {
		r0 = ret.Get(0).(applications.Credentials)
	}

	return r0
}

// ToCredentials provides a mock function with given fields: secretData, appCredentials
func (_m *Strategy) ToCredentials(secretData map[string][]byte, appCredentials *applications.Credentials) model.Credentials {
	ret := _m.Called(secretData, appCredentials)

	var r0 model.Credentials
	if rf, ok := ret.Get(0).(func(map[string][]byte, *applications.Credentials) model.Credentials); ok {
		r0 = rf(secretData, appCredentials)
	} else {
		r0 = ret.Get(0).(model.Credentials)
	}

	return r0
}
