// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import apperrors "github.com/kyma-project/kyma/components/application-registry/internal/apperrors"
import applications "github.com/kyma-project/kyma/components/application-registry/internal/metadata/applications"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-project/kyma/components/application-registry/internal/metadata/model"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Delete provides a mock function with given fields: application, id
func (_m *Service) Delete(application string, id string) apperrors.AppError {
	ret := _m.Called(application, id)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string) apperrors.AppError); ok {
		r0 = rf(application, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// New provides a mock function with given fields: application, id, api
func (_m *Service) New(application string, id string, api *model.API) (*applications.ServiceAPI, apperrors.AppError) {
	ret := _m.Called(application, id, api)

	var r0 *applications.ServiceAPI
	if rf, ok := ret.Get(0).(func(string, string, *model.API) *applications.ServiceAPI); ok {
		r0 = rf(application, id, api)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applications.ServiceAPI)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string, string, *model.API) apperrors.AppError); ok {
		r1 = rf(application, id, api)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// Read provides a mock function with given fields: application, serviceApi
func (_m *Service) Read(application string, serviceApi *applications.ServiceAPI) (*model.API, apperrors.AppError) {
	ret := _m.Called(application, serviceApi)

	var r0 *model.API
	if rf, ok := ret.Get(0).(func(string, *applications.ServiceAPI) *model.API); ok {
		r0 = rf(application, serviceApi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.API)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string, *applications.ServiceAPI) apperrors.AppError); ok {
		r1 = rf(application, serviceApi)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: application, id, api
func (_m *Service) Update(application string, id string, api *model.API) (*applications.ServiceAPI, apperrors.AppError) {
	ret := _m.Called(application, id, api)

	var r0 *applications.ServiceAPI
	if rf, ok := ret.Get(0).(func(string, string, *model.API) *applications.ServiceAPI); ok {
		r0 = rf(application, id, api)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applications.ServiceAPI)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string, string, *model.API) apperrors.AppError); ok {
		r1 = rf(application, id, api)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}
