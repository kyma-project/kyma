// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kyma-project/kyma/components/remote-environment-broker/pkg/apis/applicationconnector/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RemoteEnvironmentLister helps list RemoteEnvironments.
type RemoteEnvironmentLister interface {
	// List lists all RemoteEnvironments in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RemoteEnvironment, err error)
	// Get retrieves the RemoteEnvironment from the index for a given name.
	Get(name string) (*v1alpha1.RemoteEnvironment, error)
	RemoteEnvironmentListerExpansion
}

// remoteEnvironmentLister implements the RemoteEnvironmentLister interface.
type remoteEnvironmentLister struct {
	indexer cache.Indexer
}

// NewRemoteEnvironmentLister returns a new RemoteEnvironmentLister.
func NewRemoteEnvironmentLister(indexer cache.Indexer) RemoteEnvironmentLister {
	return &remoteEnvironmentLister{indexer: indexer}
}

// List lists all RemoteEnvironments in the indexer.
func (s *remoteEnvironmentLister) List(selector labels.Selector) (ret []*v1alpha1.RemoteEnvironment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RemoteEnvironment))
	})
	return ret, err
}

// Get retrieves the RemoteEnvironment from the index for a given name.
func (s *remoteEnvironmentLister) Get(name string) (*v1alpha1.RemoteEnvironment, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("remoteenvironment"), name)
	}
	return obj.(*v1alpha1.RemoteEnvironment), nil
}
