// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/kyma-project/kyma/components/remote-environment-broker/pkg/apis/applicationconnector/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeRemoteEnvironments implements RemoteEnvironmentInterface
type FakeRemoteEnvironments struct {
	Fake *FakeApplicationconnectorV1alpha1
}

var remoteenvironmentsResource = schema.GroupVersionResource{Group: "applicationconnector.kyma-project.io", Version: "v1alpha1", Resource: "remoteenvironments"}

var remoteenvironmentsKind = schema.GroupVersionKind{Group: "applicationconnector.kyma-project.io", Version: "v1alpha1", Kind: "RemoteEnvironment"}

// Get takes name of the remoteEnvironment, and returns the corresponding remoteEnvironment object, and an error if there is any.
func (c *FakeRemoteEnvironments) Get(name string, options v1.GetOptions) (result *v1alpha1.RemoteEnvironment, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(remoteenvironmentsResource, name), &v1alpha1.RemoteEnvironment{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RemoteEnvironment), err
}

// List takes label and field selectors, and returns the list of RemoteEnvironments that match those selectors.
func (c *FakeRemoteEnvironments) List(opts v1.ListOptions) (result *v1alpha1.RemoteEnvironmentList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(remoteenvironmentsResource, remoteenvironmentsKind, opts), &v1alpha1.RemoteEnvironmentList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.RemoteEnvironmentList{}
	for _, item := range obj.(*v1alpha1.RemoteEnvironmentList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested remoteEnvironments.
func (c *FakeRemoteEnvironments) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(remoteenvironmentsResource, opts))
}

// Create takes the representation of a remoteEnvironment and creates it.  Returns the server's representation of the remoteEnvironment, and an error, if there is any.
func (c *FakeRemoteEnvironments) Create(remoteEnvironment *v1alpha1.RemoteEnvironment) (result *v1alpha1.RemoteEnvironment, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(remoteenvironmentsResource, remoteEnvironment), &v1alpha1.RemoteEnvironment{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RemoteEnvironment), err
}

// Update takes the representation of a remoteEnvironment and updates it. Returns the server's representation of the remoteEnvironment, and an error, if there is any.
func (c *FakeRemoteEnvironments) Update(remoteEnvironment *v1alpha1.RemoteEnvironment) (result *v1alpha1.RemoteEnvironment, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(remoteenvironmentsResource, remoteEnvironment), &v1alpha1.RemoteEnvironment{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RemoteEnvironment), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeRemoteEnvironments) UpdateStatus(remoteEnvironment *v1alpha1.RemoteEnvironment) (*v1alpha1.RemoteEnvironment, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(remoteenvironmentsResource, "status", remoteEnvironment), &v1alpha1.RemoteEnvironment{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RemoteEnvironment), err
}

// Delete takes name of the remoteEnvironment and deletes it. Returns an error if one occurs.
func (c *FakeRemoteEnvironments) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(remoteenvironmentsResource, name), &v1alpha1.RemoteEnvironment{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeRemoteEnvironments) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(remoteenvironmentsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.RemoteEnvironmentList{})
	return err
}

// Patch applies the patch and returns the patched remoteEnvironment.
func (c *FakeRemoteEnvironments) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.RemoteEnvironment, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(remoteenvironmentsResource, name, data, subresources...), &v1alpha1.RemoteEnvironment{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.RemoteEnvironment), err
}
