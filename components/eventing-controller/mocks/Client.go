// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/cloudevents/sdk-go/v2/event"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/cloudevents/sdk-go/v2/protocol"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Request provides a mock function with given fields: ctx, _a1
func (_m *Client) Request(ctx context.Context, _a1 event.Event) (*event.Event, protocol.Result) {
	ret := _m.Called(ctx, _a1)

	var r0 *event.Event
	if rf, ok := ret.Get(0).(func(context.Context, event.Event) *event.Event); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.Event)
		}
	}

	var r1 protocol.Result
	if rf, ok := ret.Get(1).(func(context.Context, event.Event) protocol.Result); ok {
		r1 = rf(ctx, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(protocol.Result)
		}
	}

	return r0, r1
}

// Send provides a mock function with given fields: ctx, _a1
func (_m *Client) Send(ctx context.Context, _a1 event.Event) protocol.Result {
	ret := _m.Called(ctx, _a1)

	var r0 protocol.Result
	if rf, ok := ret.Get(0).(func(context.Context, event.Event) protocol.Result); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.Result)
		}
	}

	return r0
}

// StartReceiver provides a mock function with given fields: ctx, fn
func (_m *Client) StartReceiver(ctx context.Context, fn interface{}) error {
	ret := _m.Called(ctx, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
