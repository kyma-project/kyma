// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	"github.com/nats-io/nats.go"
	"github.com/stretchr/testify/mock"
)

// Messager is an autogenerated mock type for the Messager type
type Messager struct {
	mock.Mock
}

// Ack provides a mock function with given fields: opts
func (_m *Messager) Ack(opts ...nats.AckOpt) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...nats.AckOpt) error); ok {
		r0 = rf(opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Msg provides a mock function with given fields:
func (_m *Messager) Msg() *nats.Msg {
	ret := _m.Called()

	var r0 *nats.Msg
	if rf, ok := ret.Get(0).(func() *nats.Msg); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Msg)
		}
	}

	return r0
}

type mockConstructorTestingTNewMessager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMessager creates a new instance of Messager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMessager(t mockConstructorTestingTNewMessager) *Messager {
	mock := &Messager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
