// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	apiv1alpha1 "github.com/kyma-incubator/api-gateway/api/v1beta1"
	"github.com/stretchr/testify/mock"

	"github.com/kyma-project/kyma/components/eventing-controller/api/v1alpha1"
	"github.com/kyma-project/kyma/components/eventing-controller/pkg/backend/eventtype"
	"github.com/kyma-project/kyma/components/eventing-controller/pkg/env"
)

// BEBBackend is an autogenerated mock type for the BEBBackend type
type BEBBackend struct {
	mock.Mock
}

// DeleteSubscription provides a mock function with given fields: subscription
func (_m *BEBBackend) DeleteSubscription(subscription *v1alpha1.Subscription) error {
	ret := _m.Called(subscription)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Subscription) error); ok {
		r0 = rf(subscription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initialize provides a mock function with given fields: cfg
func (_m *BEBBackend) Initialize(cfg env.Config) error {
	ret := _m.Called(cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(env.Config) error); ok {
		r0 = rf(cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncSubscription provides a mock function with given fields: subscription, cleaner, apiRule
func (_m *BEBBackend) SyncSubscription(subscription *v1alpha1.Subscription, cleaner eventtype.Cleaner, apiRule *apiv1alpha1.APIRule) (bool, error) {
	ret := _m.Called(subscription, cleaner, apiRule)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*v1alpha1.Subscription, eventtype.Cleaner, *apiv1alpha1.APIRule) bool); ok {
		r0 = rf(subscription, cleaner, apiRule)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Subscription, eventtype.Cleaner, *apiv1alpha1.APIRule) error); ok {
		r1 = rf(subscription, cleaner, apiRule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
