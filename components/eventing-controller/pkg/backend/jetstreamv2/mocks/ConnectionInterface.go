// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	"github.com/nats-io/nats.go"
	"github.com/stretchr/testify/mock"
)

// ConnectionInterface is an autogenerated mock type for the ConnectionInterface type
type ConnectionInterface struct {
	mock.Mock
}

// IsConnected provides a mock function with given fields:
func (_m *ConnectionInterface) IsConnected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// JetStream provides a mock function with given fields: opts
func (_m *ConnectionInterface) JetStream(opts ...nats.JSOpt) (nats.JetStreamContext, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 nats.JetStreamContext
	if rf, ok := ret.Get(0).(func(...nats.JSOpt) nats.JetStreamContext); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nats.JetStreamContext)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...nats.JSOpt) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetClosedHandler provides a mock function with given fields: cb
func (_m *ConnectionInterface) SetClosedHandler(cb nats.ConnHandler) {
	_m.Called(cb)
}

// SetReconnectHandler provides a mock function with given fields: rcb
func (_m *ConnectionInterface) SetReconnectHandler(rcb nats.ConnHandler) {
	_m.Called(rcb)
}

type mockConstructorTestingTNewConnectionInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewConnectionInterface creates a new instance of ConnectionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConnectionInterface(t mockConstructorTestingTNewConnectionInterface) *ConnectionInterface {
	mock := &ConnectionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
