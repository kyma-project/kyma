// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	env "github.com/kyma-project/kyma/components/eventing-controller/pkg/env"
	eventtype "github.com/kyma-project/kyma/components/eventing-controller/pkg/handlers/eventtype"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/kyma-project/kyma/components/eventing-controller/api/v1alpha1"
)

// MessagingBackend is an autogenerated mock type for the MessagingBackend type
type MessagingBackend struct {
	mock.Mock
}

// DeleteSubscription provides a mock function with given fields: subscription
func (_m *MessagingBackend) DeleteSubscription(subscription *v1alpha1.Subscription) error {
	ret := _m.Called(subscription)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Subscription) error); ok {
		r0 = rf(subscription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initialize provides a mock function with given fields: cfg
func (_m *MessagingBackend) Initialize(cfg env.Config) error {
	ret := _m.Called(cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(env.Config) error); ok {
		r0 = rf(cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncSubscription provides a mock function with given fields: subscription, cleaner, params
func (_m *MessagingBackend) SyncSubscription(subscription *v1alpha1.Subscription, cleaner eventtype.Cleaner, params ...interface{}) (bool, error) {
	var _ca []interface{}
	_ca = append(_ca, subscription, cleaner)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*v1alpha1.Subscription, eventtype.Cleaner, ...interface{}) bool); ok {
		r0 = rf(subscription, cleaner, params...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Subscription, eventtype.Cleaner, ...interface{}) error); ok {
		r1 = rf(subscription, cleaner, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
