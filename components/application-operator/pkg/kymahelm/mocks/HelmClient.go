// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	release "helm.sh/helm/v3/pkg/release"
)

// HelmClient is an autogenerated mock type for the HelmClient type
type HelmClient struct {
	mock.Mock
}

// DeleteRelease provides a mock function with given fields: releaseName, namespace
func (_m *HelmClient) DeleteRelease(releaseName string, namespace string) (*release.UninstallReleaseResponse, error) {
	ret := _m.Called(releaseName, namespace)

	var r0 *release.UninstallReleaseResponse
	if rf, ok := ret.Get(0).(func(string, string) *release.UninstallReleaseResponse); ok {
		r0 = rf(releaseName, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.UninstallReleaseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(releaseName, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstallReleaseFromChart provides a mock function with given fields: chartDir, releaseName, namespace, overrides, profile
func (_m *HelmClient) InstallReleaseFromChart(chartDir string, releaseName string, namespace string, overrides map[string]interface{}, profile string) (*release.Release, error) {
	ret := _m.Called(chartDir, releaseName, namespace, overrides, profile)

	var r0 *release.Release
	if rf, ok := ret.Get(0).(func(string, string, string, map[string]interface{}, string) *release.Release); ok {
		r0 = rf(chartDir, releaseName, namespace, overrides, profile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, map[string]interface{}, string) error); ok {
		r1 = rf(chartDir, releaseName, namespace, overrides, profile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReleases provides a mock function with given fields: namespace
func (_m *HelmClient) ListReleases(namespace string) ([]*release.Release, error) {
	ret := _m.Called(namespace)

	var r0 []*release.Release
	if rf, ok := ret.Get(0).(func(string) []*release.Release); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*release.Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseStatus provides a mock function with given fields: releaseName, namespace
func (_m *HelmClient) ReleaseStatus(releaseName string, namespace string) (*release.Release, error) {
	ret := _m.Called(releaseName, namespace)

	var r0 *release.Release
	if rf, ok := ret.Get(0).(func(string, string) *release.Release); ok {
		r0 = rf(releaseName, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(releaseName, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReleaseFromChart provides a mock function with given fields: chartDir, releaseName, namespace, overrides, profile
func (_m *HelmClient) UpdateReleaseFromChart(chartDir string, releaseName string, namespace string, overrides map[string]interface{}, profile string) (*release.Release, error) {
	ret := _m.Called(chartDir, releaseName, namespace, overrides, profile)

	var r0 *release.Release
	if rf, ok := ret.Get(0).(func(string, string, string, map[string]interface{}, string) *release.Release); ok {
		r0 = rf(chartDir, releaseName, namespace, overrides, profile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, map[string]interface{}, string) error); ok {
		r1 = rf(chartDir, releaseName, namespace, overrides, profile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
