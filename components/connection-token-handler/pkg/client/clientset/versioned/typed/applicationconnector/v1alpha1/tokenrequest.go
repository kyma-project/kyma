/*
.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kyma-project/kyma/components/connection-token-handler/pkg/apis/applicationconnector/v1alpha1"
	scheme "github.com/kyma-project/kyma/components/connection-token-handler/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// TokenRequestsGetter has a method to return a TokenRequestInterface.
// A group's client should implement this interface.
type TokenRequestsGetter interface {
	TokenRequests(namespace string) TokenRequestInterface
}

// TokenRequestInterface has methods to work with TokenRequest resources.
type TokenRequestInterface interface {
	Create(*v1alpha1.TokenRequest) (*v1alpha1.TokenRequest, error)
	Update(*v1alpha1.TokenRequest) (*v1alpha1.TokenRequest, error)
	UpdateStatus(*v1alpha1.TokenRequest) (*v1alpha1.TokenRequest, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.TokenRequest, error)
	List(opts v1.ListOptions) (*v1alpha1.TokenRequestList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.TokenRequest, err error)
	TokenRequestExpansion
}

// tokenRequests implements TokenRequestInterface
type tokenRequests struct {
	client rest.Interface
	ns     string
}

// newTokenRequests returns a TokenRequests
func newTokenRequests(c *ApplicationconnectorV1alpha1Client, namespace string) *tokenRequests {
	return &tokenRequests{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the tokenRequest, and returns the corresponding tokenRequest object, and an error if there is any.
func (c *tokenRequests) Get(name string, options v1.GetOptions) (result *v1alpha1.TokenRequest, err error) {
	result = &v1alpha1.TokenRequest{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("tokenrequests").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of TokenRequests that match those selectors.
func (c *tokenRequests) List(opts v1.ListOptions) (result *v1alpha1.TokenRequestList, err error) {
	result = &v1alpha1.TokenRequestList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("tokenrequests").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested tokenRequests.
func (c *tokenRequests) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("tokenrequests").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a tokenRequest and creates it.  Returns the server's representation of the tokenRequest, and an error, if there is any.
func (c *tokenRequests) Create(tokenRequest *v1alpha1.TokenRequest) (result *v1alpha1.TokenRequest, err error) {
	result = &v1alpha1.TokenRequest{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("tokenrequests").
		Body(tokenRequest).
		Do().
		Into(result)
	return
}

// Update takes the representation of a tokenRequest and updates it. Returns the server's representation of the tokenRequest, and an error, if there is any.
func (c *tokenRequests) Update(tokenRequest *v1alpha1.TokenRequest) (result *v1alpha1.TokenRequest, err error) {
	result = &v1alpha1.TokenRequest{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("tokenrequests").
		Name(tokenRequest.Name).
		Body(tokenRequest).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *tokenRequests) UpdateStatus(tokenRequest *v1alpha1.TokenRequest) (result *v1alpha1.TokenRequest, err error) {
	result = &v1alpha1.TokenRequest{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("tokenrequests").
		Name(tokenRequest.Name).
		SubResource("status").
		Body(tokenRequest).
		Do().
		Into(result)
	return
}

// Delete takes name of the tokenRequest and deletes it. Returns an error if one occurs.
func (c *tokenRequests) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("tokenrequests").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *tokenRequests) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("tokenrequests").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched tokenRequest.
func (c *tokenRequests) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.TokenRequest, err error) {
	result = &v1alpha1.TokenRequest{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("tokenrequests").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
