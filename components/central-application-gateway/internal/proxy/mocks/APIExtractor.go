// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	apperrors "github.com/kyma-project/kyma/components/central-application-gateway/pkg/apperrors"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-project/kyma/components/central-application-gateway/internal/metadata/model"
)

// APIExtractor is an autogenerated mock type for the APIExtractor type
type APIExtractor struct {
	mock.Mock
}

// Get provides a mock function with given fields: identifier
func (_m *APIExtractor) Get(identifier model.APIIdentifier) (*model.API, apperrors.AppError) {
	ret := _m.Called(identifier)

	var r0 *model.API
	if rf, ok := ret.Get(0).(func(model.APIIdentifier) *model.API); ok {
		r0 = rf(identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.API)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(model.APIIdentifier) apperrors.AppError); ok {
		r1 = rf(identifier)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewAPIExtractor interface {
	mock.TestingT
	Cleanup(func())
}

// NewAPIExtractor creates a new instance of APIExtractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPIExtractor(t mockConstructorTestingTNewAPIExtractor) *APIExtractor {
	mock := &APIExtractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
