// Code generated by mockery v1.0.0. DO NOT EDIT.

package fake

import (
	messagingv1alpha1 "github.com/knative/eventing/pkg/apis/messaging/v1alpha1"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"

	v1alpha1 "github.com/knative/eventing/pkg/apis/eventing/v1alpha1"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateSubscription provides a mock function with given fields: _a0
func (_m *Client) CreateSubscription(_a0 *v1alpha1.Subscription) (*v1alpha1.Subscription, error) {
	ret := _m.Called(_a0)

	var r0 *v1alpha1.Subscription
	if rf, ok := ret.Get(0).(func(*v1alpha1.Subscription) *v1alpha1.Subscription); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Subscription) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBroker provides a mock function with given fields: _a0
func (_m *Client) DeleteBroker(_a0 *v1alpha1.Broker) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Broker) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubscription provides a mock function with given fields: _a0
func (_m *Client) DeleteSubscription(_a0 *v1alpha1.Subscription) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Subscription) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChannelByLabels provides a mock function with given fields: ns, labels
func (_m *Client) GetChannelByLabels(ns string, labels map[string]string) (*messagingv1alpha1.Channel, error) {
	ret := _m.Called(ns, labels)

	var r0 *messagingv1alpha1.Channel
	if rf, ok := ret.Get(0).(func(string, map[string]string) *messagingv1alpha1.Channel); ok {
		r0 = rf(ns, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messagingv1alpha1.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]string) error); ok {
		r1 = rf(ns, labels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultBroker provides a mock function with given fields: ns
func (_m *Client) GetDefaultBroker(ns string) (*v1alpha1.Broker, error) {
	ret := _m.Called(ns)

	var r0 *v1alpha1.Broker
	if rf, ok := ret.Get(0).(func(string) *v1alpha1.Broker); ok {
		r0 = rf(ns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Broker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ns)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespace provides a mock function with given fields: name
func (_m *Client) GetNamespace(name string) (*v1.Namespace, error) {
	ret := _m.Called(name)

	var r0 *v1.Namespace
	if rf, ok := ret.Get(0).(func(string) *v1.Namespace); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionByLabels provides a mock function with given fields: ns, labels
func (_m *Client) GetSubscriptionByLabels(ns string, labels map[string]string) (*v1alpha1.Subscription, error) {
	ret := _m.Called(ns, labels)

	var r0 *v1alpha1.Subscription
	if rf, ok := ret.Get(0).(func(string, map[string]string) *v1alpha1.Subscription); ok {
		r0 = rf(ns, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]string) error); ok {
		r1 = rf(ns, labels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNamespace provides a mock function with given fields: _a0
func (_m *Client) UpdateNamespace(_a0 *v1.Namespace) (*v1.Namespace, error) {
	ret := _m.Called(_a0)

	var r0 *v1.Namespace
	if rf, ok := ret.Get(0).(func(*v1.Namespace) *v1.Namespace); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Namespace) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscription provides a mock function with given fields: _a0
func (_m *Client) UpdateSubscription(_a0 *v1alpha1.Subscription) (*v1alpha1.Subscription, error) {
	ret := _m.Called(_a0)

	var r0 *v1alpha1.Subscription
	if rf, ok := ret.Get(0).(func(*v1alpha1.Subscription) *v1alpha1.Subscription); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Subscription) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
