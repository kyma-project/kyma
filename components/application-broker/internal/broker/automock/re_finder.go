// Code generated by mockery v1.0.0
package automock

import internal "github.com/kyma-project/kyma/components/application-broker/internal"
import mock "github.com/stretchr/testify/mock"

// ReFinder is an autogenerated mock type for the ReFinder type
type ReFinder struct {
	mock.Mock
}

// FindAll provides a mock function with given fields:
func (_m *ReFinder) FindAll() ([]*internal.RemoteEnvironment, error) {
	ret := _m.Called()

	var r0 []*internal.RemoteEnvironment
	if rf, ok := ret.Get(0).(func() []*internal.RemoteEnvironment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*internal.RemoteEnvironment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByServiceID provides a mock function with given fields: id
func (_m *ReFinder) FindOneByServiceID(id internal.RemoteServiceID) (*internal.RemoteEnvironment, error) {
	ret := _m.Called(id)

	var r0 *internal.RemoteEnvironment
	if rf, ok := ret.Get(0).(func(internal.RemoteServiceID) *internal.RemoteEnvironment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.RemoteEnvironment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.RemoteServiceID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: name
func (_m *ReFinder) Get(name internal.RemoteEnvironmentName) (*internal.RemoteEnvironment, error) {
	ret := _m.Called(name)

	var r0 *internal.RemoteEnvironment
	if rf, ok := ret.Get(0).(func(internal.RemoteEnvironmentName) *internal.RemoteEnvironment); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.RemoteEnvironment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.RemoteEnvironmentName) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
