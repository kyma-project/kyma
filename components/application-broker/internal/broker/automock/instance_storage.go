// Code generated by mockery v1.0.0
package automock

import internal "github.com/kyma-project/kyma/components/application-broker/internal"
import mock "github.com/stretchr/testify/mock"

// InstanceStorage is an autogenerated mock type for the InstanceStorage type
type InstanceStorage struct {
	mock.Mock
}

// FindOne provides a mock function with given fields: m
func (_m *InstanceStorage) FindOne(m func(*internal.Instance) bool) (*internal.Instance, error) {
	ret := _m.Called(m)

	var r0 *internal.Instance
	if rf, ok := ret.Get(0).(func(func(*internal.Instance) bool) *internal.Instance); ok {
		r0 = rf(m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Instance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(func(*internal.Instance) bool) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *InstanceStorage) Get(id internal.InstanceID) (*internal.Instance, error) {
	ret := _m.Called(id)

	var r0 *internal.Instance
	if rf, ok := ret.Get(0).(func(internal.InstanceID) *internal.Instance); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Instance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.InstanceID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: i
func (_m *InstanceStorage) Insert(i *internal.Instance) error {
	ret := _m.Called(i)

	var r0 error
	if rf, ok := ret.Get(0).(func(*internal.Instance) error); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: id
func (_m *InstanceStorage) Remove(id internal.InstanceID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.InstanceID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateState provides a mock function with given fields: iID, state
func (_m *InstanceStorage) UpdateState(iID internal.InstanceID, state internal.InstanceState) error {
	ret := _m.Called(iID, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.InstanceID, internal.InstanceState) error); ok {
		r0 = rf(iID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
