// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import "github.com/kyma-project/kyma/components/application-broker/internal"
import "github.com/stretchr/testify/mock"

// OperationStorage is an autogenerated mock type for the OperationStorage type
type OperationStorage struct {
	mock.Mock
}

// Get provides a mock function with given fields: iID, opID
func (_m *OperationStorage) Get(iID internal.InstanceID, opID internal.OperationID) (*internal.InstanceOperation, error) {
	ret := _m.Called(iID, opID)

	var r0 *internal.InstanceOperation
	if rf, ok := ret.Get(0).(func(internal.InstanceID, internal.OperationID) *internal.InstanceOperation); ok {
		r0 = rf(iID, opID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.InstanceOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.InstanceID, internal.OperationID) error); ok {
		r1 = rf(iID, opID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: iID
func (_m *OperationStorage) GetAll(iID internal.InstanceID) ([]*internal.InstanceOperation, error) {
	ret := _m.Called(iID)

	var r0 []*internal.InstanceOperation
	if rf, ok := ret.Get(0).(func(internal.InstanceID) []*internal.InstanceOperation); ok {
		r0 = rf(iID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*internal.InstanceOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.InstanceID) error); ok {
		r1 = rf(iID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLast provides a mock function with given fields: iID
func (_m *OperationStorage) GetLast(iID internal.InstanceID) (*internal.InstanceOperation, error) {
	ret := _m.Called(iID)

	var r0 *internal.InstanceOperation
	if rf, ok := ret.Get(0).(func(internal.InstanceID) *internal.InstanceOperation); ok {
		r0 = rf(iID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.InstanceOperation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.InstanceID) error); ok {
		r1 = rf(iID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: io
func (_m *OperationStorage) Insert(io *internal.InstanceOperation) error {
	ret := _m.Called(io)

	var r0 error
	if rf, ok := ret.Get(0).(func(*internal.InstanceOperation) error); ok {
		r0 = rf(io)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: iID, opID
func (_m *OperationStorage) Remove(iID internal.InstanceID, opID internal.OperationID) error {
	ret := _m.Called(iID, opID)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.InstanceID, internal.OperationID) error); ok {
		r0 = rf(iID, opID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateState provides a mock function with given fields: iID, opID, state
func (_m *OperationStorage) UpdateState(iID internal.InstanceID, opID internal.OperationID, state internal.OperationState) error {
	ret := _m.Called(iID, opID, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.InstanceID, internal.OperationID, internal.OperationState) error); ok {
		r0 = rf(iID, opID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStateDesc provides a mock function with given fields: iID, opID, state, desc
func (_m *OperationStorage) UpdateStateDesc(iID internal.InstanceID, opID internal.OperationID, state internal.OperationState, desc *string) error {
	ret := _m.Called(iID, opID, state, desc)

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.InstanceID, internal.OperationID, internal.OperationState, *string) error); ok {
		r0 = rf(iID, opID, state, desc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
