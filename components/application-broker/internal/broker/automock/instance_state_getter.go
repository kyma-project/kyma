// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import internal "github.com/kyma-project/kyma/components/application-broker/internal"
import mock "github.com/stretchr/testify/mock"

// instanceStateGetter is an autogenerated mock type for the instanceStateGetter type
type instanceStateGetter struct {
	mock.Mock
}

// IsDeprovisioned provides a mock function with given fields: _a0
func (_m *instanceStateGetter) IsDeprovisioned(_a0 internal.InstanceID) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(internal.InstanceID) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.InstanceID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDeprovisioningInProgress provides a mock function with given fields: _a0
func (_m *instanceStateGetter) IsDeprovisioningInProgress(_a0 internal.InstanceID) (internal.OperationID, bool, error) {
	ret := _m.Called(_a0)

	var r0 internal.OperationID
	if rf, ok := ret.Get(0).(func(internal.InstanceID) internal.OperationID); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(internal.OperationID)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(internal.InstanceID) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(internal.InstanceID) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsProvisioned provides a mock function with given fields: _a0
func (_m *instanceStateGetter) IsProvisioned(_a0 internal.InstanceID) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(internal.InstanceID) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(internal.InstanceID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsProvisioningInProgress provides a mock function with given fields: _a0
func (_m *instanceStateGetter) IsProvisioningInProgress(_a0 internal.InstanceID) (internal.OperationID, bool, error) {
	ret := _m.Called(_a0)

	var r0 internal.OperationID
	if rf, ok := ret.Get(0).(func(internal.InstanceID) internal.OperationID); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(internal.OperationID)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(internal.InstanceID) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(internal.InstanceID) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
