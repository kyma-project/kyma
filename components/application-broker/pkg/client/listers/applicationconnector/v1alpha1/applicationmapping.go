// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kyma-project/kyma/components/application-broker/pkg/apis/applicationconnector/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationMappingLister helps list ApplicationMappings.
type ApplicationMappingLister interface {
	// List lists all ApplicationMappings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationMapping, err error)
	// ApplicationMappings returns an object that can list and get ApplicationMappings.
	ApplicationMappings(namespace string) ApplicationMappingNamespaceLister
	ApplicationMappingListerExpansion
}

// applicationMappingLister implements the ApplicationMappingLister interface.
type applicationMappingLister struct {
	indexer cache.Indexer
}

// NewApplicationMappingLister returns a new ApplicationMappingLister.
func NewApplicationMappingLister(indexer cache.Indexer) ApplicationMappingLister {
	return &applicationMappingLister{indexer: indexer}
}

// List lists all ApplicationMappings in the indexer.
func (s *applicationMappingLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationMapping, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationMapping))
	})
	return ret, err
}

// ApplicationMappings returns an object that can list and get ApplicationMappings.
func (s *applicationMappingLister) ApplicationMappings(namespace string) ApplicationMappingNamespaceLister {
	return applicationMappingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationMappingNamespaceLister helps list and get ApplicationMappings.
type ApplicationMappingNamespaceLister interface {
	// List lists all ApplicationMappings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationMapping, err error)
	// Get retrieves the ApplicationMapping from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ApplicationMapping, error)
	ApplicationMappingNamespaceListerExpansion
}

// applicationMappingNamespaceLister implements the ApplicationMappingNamespaceLister
// interface.
type applicationMappingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationMappings in the indexer for a given namespace.
func (s applicationMappingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationMapping, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationMapping))
	})
	return ret, err
}

// Get retrieves the ApplicationMapping from the indexer for a given namespace and name.
func (s applicationMappingNamespaceLister) Get(name string) (*v1alpha1.ApplicationMapping, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationmapping"), name)
	}
	return obj.(*v1alpha1.ApplicationMapping), nil
}
