// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kyma-project/kyma/components/application-broker/pkg/apis/applicationconnector/v1alpha1"
	scheme "github.com/kyma-project/kyma/components/application-broker/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// RemoteEnvironmentsGetter has a method to return a RemoteEnvironmentInterface.
// A group's client should implement this interface.
type RemoteEnvironmentsGetter interface {
	RemoteEnvironments() RemoteEnvironmentInterface
}

// RemoteEnvironmentInterface has methods to work with RemoteEnvironment resources.
type RemoteEnvironmentInterface interface {
	Create(*v1alpha1.RemoteEnvironment) (*v1alpha1.RemoteEnvironment, error)
	Update(*v1alpha1.RemoteEnvironment) (*v1alpha1.RemoteEnvironment, error)
	UpdateStatus(*v1alpha1.RemoteEnvironment) (*v1alpha1.RemoteEnvironment, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.RemoteEnvironment, error)
	List(opts v1.ListOptions) (*v1alpha1.RemoteEnvironmentList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.RemoteEnvironment, err error)
	RemoteEnvironmentExpansion
}

// remoteEnvironments implements RemoteEnvironmentInterface
type remoteEnvironments struct {
	client rest.Interface
}

// newRemoteEnvironments returns a RemoteEnvironments
func newRemoteEnvironments(c *ApplicationconnectorV1alpha1Client) *remoteEnvironments {
	return &remoteEnvironments{
		client: c.RESTClient(),
	}
}

// Get takes name of the remoteEnvironment, and returns the corresponding remoteEnvironment object, and an error if there is any.
func (c *remoteEnvironments) Get(name string, options v1.GetOptions) (result *v1alpha1.RemoteEnvironment, err error) {
	result = &v1alpha1.RemoteEnvironment{}
	err = c.client.Get().
		Resource("remoteenvironments").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of RemoteEnvironments that match those selectors.
func (c *remoteEnvironments) List(opts v1.ListOptions) (result *v1alpha1.RemoteEnvironmentList, err error) {
	result = &v1alpha1.RemoteEnvironmentList{}
	err = c.client.Get().
		Resource("remoteenvironments").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested remoteEnvironments.
func (c *remoteEnvironments) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("remoteenvironments").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a remoteEnvironment and creates it.  Returns the server's representation of the remoteEnvironment, and an error, if there is any.
func (c *remoteEnvironments) Create(remoteEnvironment *v1alpha1.RemoteEnvironment) (result *v1alpha1.RemoteEnvironment, err error) {
	result = &v1alpha1.RemoteEnvironment{}
	err = c.client.Post().
		Resource("remoteenvironments").
		Body(remoteEnvironment).
		Do().
		Into(result)
	return
}

// Update takes the representation of a remoteEnvironment and updates it. Returns the server's representation of the remoteEnvironment, and an error, if there is any.
func (c *remoteEnvironments) Update(remoteEnvironment *v1alpha1.RemoteEnvironment) (result *v1alpha1.RemoteEnvironment, err error) {
	result = &v1alpha1.RemoteEnvironment{}
	err = c.client.Put().
		Resource("remoteenvironments").
		Name(remoteEnvironment.Name).
		Body(remoteEnvironment).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *remoteEnvironments) UpdateStatus(remoteEnvironment *v1alpha1.RemoteEnvironment) (result *v1alpha1.RemoteEnvironment, err error) {
	result = &v1alpha1.RemoteEnvironment{}
	err = c.client.Put().
		Resource("remoteenvironments").
		Name(remoteEnvironment.Name).
		SubResource("status").
		Body(remoteEnvironment).
		Do().
		Into(result)
	return
}

// Delete takes name of the remoteEnvironment and deletes it. Returns an error if one occurs.
func (c *remoteEnvironments) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("remoteenvironments").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *remoteEnvironments) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Resource("remoteenvironments").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched remoteEnvironment.
func (c *remoteEnvironments) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.RemoteEnvironment, err error) {
	result = &v1alpha1.RemoteEnvironment{}
	err = c.client.Patch(pt).
		Resource("remoteenvironments").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
