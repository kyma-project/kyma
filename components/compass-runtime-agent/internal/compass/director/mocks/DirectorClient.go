// Code generated by mockery v2.1.0. DO NOT EDIT.

package mocks

import (
	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
	director "github.com/kyma-project/kyma/components/compass-runtime-agent/internal/compass/director"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-project/kyma/components/compass-runtime-agent/internal/kyma/model"
)

// DirectorClient is an autogenerated mock type for the DirectorClient type
type DirectorClient struct {
	mock.Mock
}

// FetchConfiguration provides a mock function with given fields:
func (_m *DirectorClient) FetchConfiguration() ([]model.Application, error) {
	ret := _m.Called()

	var r0 []model.Application
	if rf, ok := ret.Get(0).(func() []model.Application); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetURLsLabels provides a mock function with given fields: urlsCfg
func (_m *DirectorClient) SetURLsLabels(urlsCfg director.RuntimeURLsConfig) (graphql.Labels, error) {
	ret := _m.Called(urlsCfg)

	var r0 graphql.Labels
	if rf, ok := ret.Get(0).(func(director.RuntimeURLsConfig) graphql.Labels); ok {
		r0 = rf(urlsCfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(graphql.Labels)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(director.RuntimeURLsConfig) error); ok {
		r1 = rf(urlsCfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
