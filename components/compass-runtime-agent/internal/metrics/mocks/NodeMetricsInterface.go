// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1beta1 "k8s.io/metrics/pkg/apis/metrics/v1beta1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// NodeMetricsInterface is an autogenerated mock type for the NodeMetricsInterface type
type NodeMetricsInterface struct {
	mock.Mock
}

// Get provides a mock function with given fields: name, options
func (_m *NodeMetricsInterface) Get(name string, options v1.GetOptions) (*v1beta1.NodeMetrics, error) {
	ret := _m.Called(name, options)

	var r0 *v1beta1.NodeMetrics
	if rf, ok := ret.Get(0).(func(string, v1.GetOptions) *v1beta1.NodeMetrics); ok {
		r0 = rf(name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.NodeMetrics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.GetOptions) error); ok {
		r1 = rf(name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: opts
func (_m *NodeMetricsInterface) List(opts v1.ListOptions) (*v1beta1.NodeMetricsList, error) {
	ret := _m.Called(opts)

	var r0 *v1beta1.NodeMetricsList
	if rf, ok := ret.Get(0).(func(v1.ListOptions) *v1beta1.NodeMetricsList); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.NodeMetricsList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1.ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: opts
func (_m *NodeMetricsInterface) Watch(opts v1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(opts)

	var r0 watch.Interface
	if rf, ok := ret.Get(0).(func(v1.ListOptions) watch.Interface); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1.ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
