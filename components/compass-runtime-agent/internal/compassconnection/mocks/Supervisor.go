// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	v1alpha1 "github.com/kyma-project/kyma/components/compass-runtime-agent/pkg/apis/compass/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// Supervisor is an autogenerated mock type for the Supervisor type
type Supervisor struct {
	mock.Mock
}

// InitializeCompassConnection provides a mock function with given fields: ctx
func (_m *Supervisor) InitializeCompassConnection(ctx context.Context) (*v1alpha1.CompassConnection, error) {
	ret := _m.Called(ctx)

	var r0 *v1alpha1.CompassConnection
	if rf, ok := ret.Get(0).(func(context.Context) *v1alpha1.CompassConnection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.CompassConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MaintainCompassConnection provides a mock function with given fields: ctx, connection
func (_m *Supervisor) MaintainCompassConnection(ctx context.Context, connection *v1alpha1.CompassConnection) error {
	ret := _m.Called(ctx, connection)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.CompassConnection) error); ok {
		r0 = rf(ctx, connection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SynchronizeWithCompass provides a mock function with given fields: ctx, connection
func (_m *Supervisor) SynchronizeWithCompass(ctx context.Context, connection *v1alpha1.CompassConnection) (*v1alpha1.CompassConnection, error) {
	ret := _m.Called(ctx, connection)

	var r0 *v1alpha1.CompassConnection
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.CompassConnection) *v1alpha1.CompassConnection); ok {
		r0 = rf(ctx, connection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.CompassConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.CompassConnection) error); ok {
		r1 = rf(ctx, connection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
