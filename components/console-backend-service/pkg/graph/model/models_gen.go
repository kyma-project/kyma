// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Event interface {
	IsEvent()
}

type APIRule struct {
	Name    string           `json:"name"`
	Service *APIRuleService  `json:"service"`
	Gateway string           `json:"gateway"`
	Rules   []*Rule          `json:"rules"`
	Status  *APIRuleStatuses `json:"status"`
}

type APIRuleConfig struct {
	Name   string                 `json:"name"`
	Config map[string]interface{} `json:"config"`
}

type APIRuleConfigInput struct {
	Name   string                 `json:"name"`
	Config map[string]interface{} `json:"config"`
}

type APIRuleInput struct {
	Host        string       `json:"host"`
	ServiceName string       `json:"serviceName"`
	ServicePort int          `json:"servicePort"`
	Gateway     string       `json:"gateway"`
	Rules       []*RuleInput `json:"rules"`
}

type APIRuleService struct {
	Host string `json:"host"`
	Name string `json:"name"`
	Port int    `json:"port"`
}

type APIRuleStatus struct {
	Code string  `json:"code"`
	Desc *string `json:"desc"`
}

type APIRuleStatuses struct {
	APIRuleStatus        *APIRuleStatus `json:"apiRuleStatus"`
	AccessRuleStatus     *APIRuleStatus `json:"accessRuleStatus"`
	VirtualServiceStatus *APIRuleStatus `json:"virtualServiceStatus"`
}

type APIRuleEvent struct {
	Type    EventType `json:"type"`
	APIRule *APIRule  `json:"apiRule"`
}

type BackendModule struct {
	Name string `json:"name"`
}

type BackendModuleEvent struct {
	Type     *EventType     `json:"type"`
	Resource *BackendModule `json:"resource"`
}

func (BackendModuleEvent) IsEvent() {}

type ClusterMicroFrontend struct {
	Name            string            `json:"name"`
	Version         string            `json:"version"`
	Category        string            `json:"category"`
	ViewBaseURL     string            `json:"viewBaseUrl"`
	Placement       string            `json:"placement"`
	PreloadURL      string            `json:"preloadUrl"`
	NavigationNodes []*NavigationNode `json:"navigationNodes"`
}

type MicroFrontend struct {
	Name            string            `json:"name"`
	Version         string            `json:"version"`
	Category        string            `json:"category"`
	ViewBaseURL     string            `json:"viewBaseUrl"`
	NavigationNodes []*NavigationNode `json:"navigationNodes"`
}

type NavigationNode struct {
	Label               string                 `json:"label"`
	NavigationPath      string                 `json:"navigationPath"`
	ViewURL             string                 `json:"viewUrl"`
	ShowInNavigation    bool                   `json:"showInNavigation"`
	Order               int                    `json:"order"`
	Settings            map[string]interface{} `json:"settings"`
	ExternalLink        string                 `json:"externalLink"`
	RequiredPermissions []*RequiredPermission  `json:"requiredPermissions"`
}

type RequiredPermission struct {
	Verbs    []string `json:"verbs"`
	APIGroup string   `json:"apiGroup"`
	Resource string   `json:"resource"`
}

type ResourceAttributes struct {
	Verb            string  `json:"verb"`
	APIGroup        *string `json:"apiGroup"`
	APIVersion      *string `json:"apiVersion"`
	Resource        *string `json:"resource"`
	ResourceArg     *string `json:"resourceArg"`
	Subresource     string  `json:"subresource"`
	NameArg         *string `json:"nameArg"`
	NamespaceArg    *string `json:"namespaceArg"`
	IsChildResolver bool    `json:"isChildResolver"`
}

type Rule struct {
	Path             string           `json:"path"`
	Methods          []string         `json:"methods"`
	AccessStrategies []*APIRuleConfig `json:"accessStrategies"`
	Mutators         []*APIRuleConfig `json:"mutators"`
}

type RuleInput struct {
	Path             string                `json:"path"`
	Methods          []string              `json:"methods"`
	AccessStrategies []*APIRuleConfigInput `json:"accessStrategies"`
	Mutators         []*APIRuleConfigInput `json:"mutators"`
}

type EventType string

const (
	EventTypeAdd    EventType = "ADD"
	EventTypeUpdate EventType = "UPDATE"
	EventTypeDelete EventType = "DELETE"
)

var AllEventType = []EventType{
	EventTypeAdd,
	EventTypeUpdate,
	EventTypeDelete,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypeAdd, EventTypeUpdate, EventTypeDelete:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
