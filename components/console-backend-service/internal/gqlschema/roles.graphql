type Role @goModel(model: "k8s.io/api/rbac/v1.Role") {
    name: String!
    namespace: String!
    rules: [PolicyRule!]
}

type PolicyRule @goModel(model: "k8s.io/api/rbac/v1.PolicyRule") {
    apiGroups: [String!]!
    resources: [String!]!
    verbs: [String!]!
}

type ClusterRole @goModel(model: "k8s.io/api/rbac/v1.ClusterRole") {
    name: String!
    rules: [PolicyRule!]
}

type RoleBinding @goModel(model: "k8s.io/api/rbac/v1.RoleBinding") {
    name: String!
    namespace: String!
}

type ClusterRoleBinding @goModel(model: "k8s.io/api/rbac/v1.ClusterRoleBinding") {
    name: String!
}

extend type Query {
    roles(namespace: String!): [Role!]! @HasAccess(attributes: {resource: "roles", verb: "list", apiGroup: "", apiVersion: "v1", namespaceArg: "namespace"})
    role(namespace: String!, name: String!): Role! @HasAccess(attributes: {resource: "roles", verb: "get", apiGroup: "", apiVersion: "v1", namespaceArg: "namespace"})

    clusterRoles: [ClusterRole!]! @HasAccess(attributes: {resource: "clusterroles", verb: "list", apiGroup: "", apiVersion: "v1"})
    clusterRole(name: String!): ClusterRole! @HasAccess(attributes: {resource: "clusterroles", verb: "get", apiGroup: "", apiVersion: "v1"})

    roleBindings(namespace: String!): [RoleBinding!]! @HasAccess(attributes: {resource: "rolesbindings", verb: "list", apiGroup: "", apiVersion: "v1", namespaceArg: "namespace"})

    clusterRoleBindings: [ClusterRoleBinding!]! @HasAccess(attributes: {resource: "clusterrolebindings", verb: "list", apiGroup: "", apiVersion: "v1"})
}

extend type Mutation {
    deleteRoleBinding(namespace: String!, name: String!): RoleBinding!@HasAccess(attributes: {resource: "rolesbindings", verb: "delete", apiGroup: "", apiVersion: "v1", namespaceArg: "namespace"})

    deleteClusterRoleBinding(name: String!): ClusterRoleBinding!@HasAccess(attributes: {resource: "rolesbindings", verb: "delete", apiGroup: "", apiVersion: "v1"})
}