type Trigger @goModel(model: "github.com/knative/eventing/pkg/apis/eventing/v1alpha1.Trigger"){
    name: String!
    namespace: String!
    spec: TriggerSpec!
    status: TriggerStatus!
}

type TriggerSpec @goModel(model: "github.com/knative/eventing/pkg/apis/eventing/v1alpha1.TriggerSpec"){
    broker: String!
    filter: JSON
    subscriber: Subscriber!
}

type TriggerStatus {
    reason: [String!]
    status: TriggerStatusType!
}

enum TriggerStatusType {
    FAILED
    UNKNOWN
    READY
}

type Subscriber @goModel(model: "knative.dev/pkg/apis/duck/v1.Destination"){
    uri: URI
    ref: SubscriberRef
}

type SubscriberRef @goModel(model: "knative.dev/pkg/apis/duck/v1.KReference"){
    apiVersion: String!
    kind: String!
    name: String!
    namespace: String!
}

input SubscriberInput @goModel(model: "knative.dev/pkg/apis/duck/v1.Destination"){
    uri: URI
    ref: SubscriberRefInput
}

input SubscriberRefInput @goModel(model: "knative.dev/pkg/apis/duck/v1.KReference"){
    apiVersion: String!
    kind: String!
    name: String!
    namespace: String!
}

input TriggerCreateInput {
    name: String
    broker: String!
    filterAttributes: JSON
    subscriber: SubscriberInput!
}

input OwnerReference @goModel(model: "k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference"){
    apiVersion: String!
    blockOwnerDeletion: Boolean
    controller: Boolean
    kind: String!
    name: String!
    UID: UID!
}

type TriggerEvent {
    type: SubscriptionEventType!
    trigger: Trigger!
}

extend type Query {
    triggers(namespace: String!, subscriber: SubscriberInput): [Trigger!] @HasAccess(attributes: {resource: "triggers", verb: "list", apiGroup: "eventing.knative.dev", apiVersion: "v1alpha1", namespaceArg: "namespace"})
}

extend type Mutation {
    createTrigger(namespace: String!, trigger: TriggerCreateInput!, ownerRef: [OwnerReference!]): Trigger @HasAccess(attributes: {resource: "triggers", verb: "create", apiGroup: "eventing.knative.dev", apiVersion: "v1alpha1", namespaceArg: "namespace"})
    createManyTriggers(namespace: String!, triggers: [TriggerCreateInput!]!, ownerRef: [OwnerReference!]): [Trigger!] @HasAccess(attributes: {resource: "triggers", verb: "create", apiGroup: "eventing.knative.dev", apiVersion: "v1alpha1", namespaceArg: "namespace"})
    deleteTrigger(namespace: String!, triggerName: String!): Trigger @HasAccess(attributes: {resource: "triggers", verb: "delete", apiGroup: "eventing.knative.dev", apiVersion: "v1alpha1", namespaceArg: "namespace"})
    deleteManyTriggers(namespace: String!, triggerNames: [String!]!): [Trigger!] @HasAccess(attributes: {resource: "triggers", verb: "delete", apiGroup: "eventing.knative.dev", apiVersion: "v1alpha1", namespaceArg: "namespace"})
}

extend type Subscription {
    triggerEvent(namespace: String!, subscriber: SubscriberInput): TriggerEvent! @HasAccess(attributes: {resource: "triggers", verb: "watch", apiGroup: "eventing.knative.dev", apiVersion: "v1alpha1", namespaceArg: "namespace"})
}