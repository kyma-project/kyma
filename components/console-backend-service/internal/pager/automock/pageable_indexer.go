// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import mock "github.com/stretchr/testify/mock"

// PageableIndexer is an autogenerated mock type for the PageableIndexer type
type PageableIndexer struct {
	mock.Mock
}

// ByIndex provides a mock function with given fields: indexName, indexKey
func (_m *PageableIndexer) ByIndex(indexName string, indexKey string) ([]interface{}, error) {
	ret := _m.Called(indexName, indexKey)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(string, string) []interface{}); ok {
		r0 = rf(indexName, indexKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(indexName, indexKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByKey provides a mock function with given fields: key
func (_m *PageableIndexer) GetByKey(key string) (interface{}, bool, error) {
	ret := _m.Called(key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IndexKeys provides a mock function with given fields: indexName, indexKey
func (_m *PageableIndexer) IndexKeys(indexName string, indexKey string) ([]string, error) {
	ret := _m.Called(indexName, indexKey)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(indexName, indexKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(indexName, indexKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
