// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import (
	mock "github.com/stretchr/testify/mock"

	resource "github.com/kyma-project/kyma/components/console-backend-service/pkg/resource"

	v1beta1 "github.com/kyma-project/rafter/pkg/apis/rafter/v1beta1"
)

// clusterAssetSvc is an autogenerated mock type for the clusterAssetSvc type
type clusterAssetSvc struct {
	mock.Mock
}

// Find provides a mock function with given fields: name
func (_m *clusterAssetSvc) Find(name string) (*v1beta1.ClusterAsset, error) {
	ret := _m.Called(name)

	var r0 *v1beta1.ClusterAsset
	if rf, ok := ret.Get(0).(func(string) *v1beta1.ClusterAsset); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.ClusterAsset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListForClusterAssetGroupByType provides a mock function with given fields: assetGroupName, types
func (_m *clusterAssetSvc) ListForClusterAssetGroupByType(assetGroupName string, types []string) ([]*v1beta1.ClusterAsset, error) {
	ret := _m.Called(assetGroupName, types)

	var r0 []*v1beta1.ClusterAsset
	if rf, ok := ret.Get(0).(func(string, []string) []*v1beta1.ClusterAsset); ok {
		r0 = rf(assetGroupName, types)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1beta1.ClusterAsset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(assetGroupName, types)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: listener
func (_m *clusterAssetSvc) Subscribe(listener resource.Listener) {
	_m.Called(listener)
}

// Unsubscribe provides a mock function with given fields: listener
func (_m *clusterAssetSvc) Unsubscribe(listener resource.Listener) {
	_m.Called(listener)
}
