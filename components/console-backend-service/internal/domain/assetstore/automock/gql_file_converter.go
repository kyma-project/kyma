// Code generated by mockery v1.0.0. DO NOT EDIT.
package automock

import assetstore "github.com/kyma-project/kyma/components/console-backend-service/internal/domain/assetstore"
import gqlschema "github.com/kyma-project/kyma/components/console-backend-service/internal/gqlschema"
import mock "github.com/stretchr/testify/mock"

// gqlFileConverter is an autogenerated mock type for the gqlFileConverter type
type gqlFileConverter struct {
	mock.Mock
}

// ToGQL provides a mock function with given fields: file
func (_m *gqlFileConverter) ToGQL(file *assetstore.File) (*gqlschema.File, error) {
	ret := _m.Called(file)

	var r0 *gqlschema.File
	if rf, ok := ret.Get(0).(func(*assetstore.File) *gqlschema.File); ok {
		r0 = rf(file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*assetstore.File) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToGQLs provides a mock function with given fields: files
func (_m *gqlFileConverter) ToGQLs(files []*assetstore.File) ([]gqlschema.File, error) {
	ret := _m.Called(files)

	var r0 []gqlschema.File
	if rf, ok := ret.Get(0).(func([]*assetstore.File) []gqlschema.File); ok {
		r0 = rf(files)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gqlschema.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*assetstore.File) error); ok {
		r1 = rf(files)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
