// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import (
	gqlschema "github.com/kyma-project/kyma/components/console-backend-service/internal/gqlschema"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/knative/eventing/pkg/apis/eventing/v1alpha1"
)

// GQLConverter is an autogenerated mock type for the GQLConverter type
type GQLConverter struct {
	mock.Mock
}

// ToGQL provides a mock function with given fields: in
func (_m *GQLConverter) ToGQL(in *v1alpha1.Trigger) (*gqlschema.Trigger, error) {
	ret := _m.Called(in)

	var r0 *gqlschema.Trigger
	if rf, ok := ret.Get(0).(func(*v1alpha1.Trigger) *gqlschema.Trigger); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.Trigger)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Trigger) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToGQLs provides a mock function with given fields: in
func (_m *GQLConverter) ToGQLs(in []*v1alpha1.Trigger) ([]*gqlschema.Trigger, error) {
	ret := _m.Called(in)

	var r0 []*gqlschema.Trigger
	if rf, ok := ret.Get(0).(func([]*v1alpha1.Trigger) []*gqlschema.Trigger); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gqlschema.Trigger)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*v1alpha1.Trigger) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToTrigger provides a mock function with given fields: in, ownerRef
func (_m *GQLConverter) ToTrigger(in *gqlschema.TriggerCreateInput, ownerRef []*gqlschema.OwnerReference) (*v1alpha1.Trigger, error) {
	ret := _m.Called(in, ownerRef)

	var r0 *v1alpha1.Trigger
	if rf, ok := ret.Get(0).(func(*gqlschema.TriggerCreateInput, []*gqlschema.OwnerReference) *v1alpha1.Trigger); ok {
		r0 = rf(in, ownerRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Trigger)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gqlschema.TriggerCreateInput, []*gqlschema.OwnerReference) error); ok {
		r1 = rf(in, ownerRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToTriggers provides a mock function with given fields: in, ownerRef
func (_m *GQLConverter) ToTriggers(in []*gqlschema.TriggerCreateInput, ownerRef []*gqlschema.OwnerReference) ([]*v1alpha1.Trigger, error) {
	ret := _m.Called(in, ownerRef)

	var r0 []*v1alpha1.Trigger
	if rf, ok := ret.Get(0).(func([]*gqlschema.TriggerCreateInput, []*gqlschema.OwnerReference) []*v1alpha1.Trigger); ok {
		r0 = rf(in, ownerRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.Trigger)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*gqlschema.TriggerCreateInput, []*gqlschema.OwnerReference) error); ok {
		r1 = rf(in, ownerRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
