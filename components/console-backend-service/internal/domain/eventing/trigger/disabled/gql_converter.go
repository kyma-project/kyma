// Code generated by failery v1.0.0. DO NOT EDIT.

package disabled

import (
	gqlschema "github.com/kyma-project/kyma/components/console-backend-service/internal/gqlschema"

	v1alpha1 "github.com/knative/eventing/pkg/apis/eventing/v1alpha1"
)

// GQLConverter is an autogenerated failing mock type for the GQLConverter type
type GQLConverter struct {
	err error
}

// NewGQLConverter creates a new GQLConverter type instance
func NewGQLConverter(err error) *GQLConverter {
	return &GQLConverter{err: err}
}

// ToGQL provides a failing mock function with given fields: in
func (_m *GQLConverter) ToGQL(in *v1alpha1.Trigger) (*gqlschema.Trigger, error) {
	var r0 *gqlschema.Trigger
	var r1 error
	r1 = _m.err

	return r0, r1
}

// ToGQLs provides a failing mock function with given fields: in
func (_m *GQLConverter) ToGQLs(in []*v1alpha1.Trigger) ([]*gqlschema.Trigger, error) {
	var r0 []*gqlschema.Trigger
	var r1 error
	r1 = _m.err

	return r0, r1
}

// ToTrigger provides a failing mock function with given fields: in, ownerRef
func (_m *GQLConverter) ToTrigger(in *gqlschema.TriggerCreateInput, ownerRef []*gqlschema.OwnerReference) (*v1alpha1.Trigger, error) {
	var r0 *v1alpha1.Trigger
	var r1 error
	r1 = _m.err

	return r0, r1
}

// ToTriggers provides a failing mock function with given fields: in, ownerRef
func (_m *GQLConverter) ToTriggers(in []*gqlschema.TriggerCreateInput, ownerRef []*gqlschema.OwnerReference) ([]*v1alpha1.Trigger, error) {
	var r0 []*v1alpha1.Trigger
	var r1 error
	r1 = _m.err

	return r0, r1
}
