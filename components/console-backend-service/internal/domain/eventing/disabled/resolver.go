// Code generated by failery v1.0.0. DO NOT EDIT.

package disabled

import (
	context "context"

	gqlschema "github.com/kyma-project/kyma/components/console-backend-service/internal/gqlschema"
)

// Resolver is an autogenerated failing mock type for the Resolver type
type Resolver struct {
	err error
}

// NewResolver creates a new Resolver type instance
func NewResolver(err error) *Resolver {
	return &Resolver{err: err}
}

// CreateManyTriggers provides a failing mock function with given fields: ctx, namespace, triggers, ownerRef
func (_m *Resolver) CreateManyTriggers(ctx context.Context, namespace string, triggers []*gqlschema.TriggerCreateInput, ownerRef []*gqlschema.OwnerReference) ([]*gqlschema.Trigger, error) {
	var r0 []*gqlschema.Trigger
	var r1 error
	r1 = _m.err

	return r0, r1
}

// CreateTrigger provides a failing mock function with given fields: ctx, namespace, trigger, ownerRef
func (_m *Resolver) CreateTrigger(ctx context.Context, namespace string, trigger gqlschema.TriggerCreateInput, ownerRef []*gqlschema.OwnerReference) (*gqlschema.Trigger, error) {
	var r0 *gqlschema.Trigger
	var r1 error
	r1 = _m.err

	return r0, r1
}

// DeleteManyTriggers provides a failing mock function with given fields: ctx, namespace, triggers
func (_m *Resolver) DeleteManyTriggers(ctx context.Context, namespace string, triggers []*gqlschema.TriggerMetadataInput) ([]*gqlschema.TriggerMetadata, error) {
	var r0 []*gqlschema.TriggerMetadata
	var r1 error
	r1 = _m.err

	return r0, r1
}

// DeleteTrigger provides a failing mock function with given fields: ctx, namespace, trigger
func (_m *Resolver) DeleteTrigger(ctx context.Context, namespace string, trigger gqlschema.TriggerMetadataInput) (*gqlschema.TriggerMetadata, error) {
	var r0 *gqlschema.TriggerMetadata
	var r1 error
	r1 = _m.err

	return r0, r1
}

// TriggerEventSubscription provides a failing mock function with given fields: ctx, namespace, subscriber
func (_m *Resolver) TriggerEventSubscription(ctx context.Context, namespace string, subscriber *gqlschema.SubscriberInput) (<-chan *gqlschema.TriggerEvent, error) {
	var r0 <-chan *gqlschema.TriggerEvent
	var r1 error
	r1 = _m.err

	return r0, r1
}

// TriggersQuery provides a failing mock function with given fields: ctx, namespace, subscriber
func (_m *Resolver) TriggersQuery(ctx context.Context, namespace string, subscriber *gqlschema.SubscriberInput) ([]*gqlschema.Trigger, error) {
	var r0 []*gqlschema.Trigger
	var r1 error
	r1 = _m.err

	return r0, r1
}
