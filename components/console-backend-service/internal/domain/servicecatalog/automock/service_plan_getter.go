// Code generated by mockery v1.0.0
package automock

import mock "github.com/stretchr/testify/mock"

import v1beta1 "github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1beta1"

// servicePlanGetter is an autogenerated mock type for the servicePlanGetter type
type servicePlanGetter struct {
	mock.Mock
}

// Find provides a mock function with given fields: name, namespace
func (_m *servicePlanGetter) Find(name string, namespace string) (*v1beta1.ServicePlan, error) {
	ret := _m.Called(name, namespace)

	var r0 *v1beta1.ServicePlan
	if rf, ok := ret.Get(0).(func(string, string) *v1beta1.ServicePlan); ok {
		r0 = rf(name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.ServicePlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByExternalName provides a mock function with given fields: planExternalName, className, namespace
func (_m *servicePlanGetter) FindByExternalName(planExternalName string, className string, namespace string) (*v1beta1.ServicePlan, error) {
	ret := _m.Called(planExternalName, className, namespace)

	var r0 *v1beta1.ServicePlan
	if rf, ok := ret.Get(0).(func(string, string, string) *v1beta1.ServicePlan); ok {
		r0 = rf(planExternalName, className, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.ServicePlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(planExternalName, className, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
