// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import (
	v1alpha1 "github.com/kyma-incubator/api-gateway/api/v1alpha1"
	resource "github.com/kyma-project/kyma/components/console-backend-service/pkg/resource"
	mock "github.com/stretchr/testify/mock"
)

// apiRuleSvc is an autogenerated mock type for the apiRuleSvc type
type apiRuleSvc struct {
	mock.Mock
}

// Create provides a mock function with given fields: api
func (_m *apiRuleSvc) Create(api *v1alpha1.APIRule) (*v1alpha1.APIRule, error) {
	ret := _m.Called(api)

	var r0 *v1alpha1.APIRule
	if rf, ok := ret.Get(0).(func(*v1alpha1.APIRule) *v1alpha1.APIRule); ok {
		r0 = rf(api)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.APIRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.APIRule) error); ok {
		r1 = rf(api)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name, namespace
func (_m *apiRuleSvc) Delete(name string, namespace string) error {
	ret := _m.Called(name, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: name, namespace
func (_m *apiRuleSvc) Find(name string, namespace string) (*v1alpha1.APIRule, error) {
	ret := _m.Called(name, namespace)

	var r0 *v1alpha1.APIRule
	if rf, ok := ret.Get(0).(func(string, string) *v1alpha1.APIRule); ok {
		r0 = rf(name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.APIRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: namespace, serviceName, hostname
func (_m *apiRuleSvc) List(namespace string, serviceName *string, hostname *string) ([]*v1alpha1.APIRule, error) {
	ret := _m.Called(namespace, serviceName, hostname)

	var r0 []*v1alpha1.APIRule
	if rf, ok := ret.Get(0).(func(string, *string, *string) []*v1alpha1.APIRule); ok {
		r0 = rf(namespace, serviceName, hostname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.APIRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *string, *string) error); ok {
		r1 = rf(namespace, serviceName, hostname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: listener
func (_m *apiRuleSvc) Subscribe(listener resource.Listener) {
	_m.Called(listener)
}

// Unsubscribe provides a mock function with given fields: listener
func (_m *apiRuleSvc) Unsubscribe(listener resource.Listener) {
	_m.Called(listener)
}

// Update provides a mock function with given fields: api
func (_m *apiRuleSvc) Update(api *v1alpha1.APIRule) (*v1alpha1.APIRule, error) {
	ret := _m.Called(api)

	var r0 *v1alpha1.APIRule
	if rf, ok := ret.Get(0).(func(*v1alpha1.APIRule) *v1alpha1.APIRule); ok {
		r0 = rf(api)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.APIRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.APIRule) error); ok {
		r1 = rf(api)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
