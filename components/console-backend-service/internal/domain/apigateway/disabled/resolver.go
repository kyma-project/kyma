// Code generated by failery v1.0.0. DO NOT EDIT.

package disabled

import (
	context "context"

	gqlschema "github.com/kyma-project/kyma/components/console-backend-service/internal/gqlschema"
)

// Resolver is an autogenerated failing mock type for the Resolver type
type Resolver struct {
	err error
}

// NewResolver creates a new Resolver type instance
func NewResolver(err error) *Resolver {
	return &Resolver{err: err}
}

// APIRuleEventSubscription provides a failing mock function with given fields: ctx, namespace, serviceName
func (_m *Resolver) APIRuleEventSubscription(ctx context.Context, namespace string, serviceName *string) (<-chan *gqlschema.APIRuleEvent, error) {
	var r0 <-chan *gqlschema.APIRuleEvent
	var r1 error
	r1 = _m.err

	return r0, r1
}

// APIRuleQuery provides a failing mock function with given fields: ctx, name, namespace
func (_m *Resolver) APIRuleQuery(ctx context.Context, name string, namespace string) (*gqlschema.APIRule, error) {
	var r0 *gqlschema.APIRule
	var r1 error
	r1 = _m.err

	return r0, r1
}

// APIRulesQuery provides a failing mock function with given fields: ctx, namespace, serviceName, hostname
func (_m *Resolver) APIRulesQuery(ctx context.Context, namespace string, serviceName *string, hostname *string) ([]*gqlschema.APIRule, error) {
	var r0 []*gqlschema.APIRule
	var r1 error
	r1 = _m.err

	return r0, r1
}

// CreateAPIRule provides a failing mock function with given fields: ctx, name, namespace, params
func (_m *Resolver) CreateAPIRule(ctx context.Context, name string, namespace string, params gqlschema.APIRuleInput) (*gqlschema.APIRule, error) {
	var r0 *gqlschema.APIRule
	var r1 error
	r1 = _m.err

	return r0, r1
}

// DeleteAPIRule provides a failing mock function with given fields: ctx, name, namespace
func (_m *Resolver) DeleteAPIRule(ctx context.Context, name string, namespace string) (*gqlschema.APIRule, error) {
	var r0 *gqlschema.APIRule
	var r1 error
	r1 = _m.err

	return r0, r1
}

// UpdateAPIRule provides a failing mock function with given fields: ctx, name, namespace, params
func (_m *Resolver) UpdateAPIRule(ctx context.Context, name string, namespace string, params gqlschema.APIRuleInput) (*gqlschema.APIRule, error) {
	var r0 *gqlschema.APIRule
	var r1 error
	r1 = _m.err

	return r0, r1
}
