// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import (
	gqlschema "github.com/kyma-project/kyma/components/console-backend-service/internal/gqlschema"

	mock "github.com/stretchr/testify/mock"

	types "github.com/kyma-project/kyma/components/console-backend-service/internal/domain/k8s/types"
)

// gqlResourceConverter is an autogenerated mock type for the gqlResourceConverter type
type gqlResourceConverter struct {
	mock.Mock
}

// BodyToGQLJSON provides a mock function with given fields: in
func (_m *gqlResourceConverter) BodyToGQLJSON(in []byte) (gqlschema.JSON, error) {
	ret := _m.Called(in)

	var r0 gqlschema.JSON
	if rf, ok := ret.Get(0).(func([]byte) gqlschema.JSON); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gqlschema.JSON)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GQLJSONToResource provides a mock function with given fields: in
func (_m *gqlResourceConverter) GQLJSONToResource(in gqlschema.JSON) (types.Resource, error) {
	ret := _m.Called(in)

	var r0 types.Resource
	if rf, ok := ret.Get(0).(func(gqlschema.JSON) types.Resource); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(types.Resource)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gqlschema.JSON) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
