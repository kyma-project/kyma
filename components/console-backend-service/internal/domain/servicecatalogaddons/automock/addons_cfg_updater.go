// Code generated by mockery v1.0.0
package automock

import gqlschema "github.com/kyma-project/kyma/components/console-backend-service/internal/gqlschema"
import mock "github.com/stretchr/testify/mock"

import v1alpha1 "github.com/kyma-project/helm-broker/pkg/apis/addons/v1alpha1"

// addonsCfgUpdater is an autogenerated mock type for the addonsCfgUpdater type
type addonsCfgUpdater struct {
	mock.Mock
}

// AddRepos provides a mock function with given fields: name, namespace, repos
func (_m *addonsCfgUpdater) AddRepos(name string, namespace string, repos []gqlschema.AddonsConfigurationRepositoryInput) (*v1alpha1.AddonsConfiguration, error) {
	ret := _m.Called(name, namespace, repos)

	var r0 *v1alpha1.AddonsConfiguration
	if rf, ok := ret.Get(0).(func(string, string, []gqlschema.AddonsConfigurationRepositoryInput) *v1alpha1.AddonsConfiguration); ok {
		r0 = rf(name, namespace, repos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.AddonsConfiguration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []gqlschema.AddonsConfigurationRepositoryInput) error); ok {
		r1 = rf(name, namespace, repos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRepos provides a mock function with given fields: name, namespace, repos
func (_m *addonsCfgUpdater) RemoveRepos(name string, namespace string, repos []gqlschema.AddonsConfigurationRepositoryInput) (*v1alpha1.AddonsConfiguration, error) {
	ret := _m.Called(name, namespace, repos)

	var r0 *v1alpha1.AddonsConfiguration
	if rf, ok := ret.Get(0).(func(string, string, []gqlschema.AddonsConfigurationRepositoryInput) *v1alpha1.AddonsConfiguration); ok {
		r0 = rf(name, namespace, repos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.AddonsConfiguration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []gqlschema.AddonsConfigurationRepositoryInput) error); ok {
		r1 = rf(name, namespace, repos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resync provides a mock function with given fields: name, namespace
func (_m *addonsCfgUpdater) Resync(name string, namespace string) (*v1alpha1.AddonsConfiguration, error) {
	ret := _m.Called(name, namespace)

	var r0 *v1alpha1.AddonsConfiguration
	if rf, ok := ret.Get(0).(func(string, string) *v1alpha1.AddonsConfiguration); ok {
		r0 = rf(name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.AddonsConfiguration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
