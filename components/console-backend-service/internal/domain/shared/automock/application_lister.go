// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import mock "github.com/stretchr/testify/mock"

import v1alpha1 "github.com/kyma-project/kyma/components/application-operator/pkg/apis/applicationconnector/v1alpha1"

// ApplicationLister is an autogenerated mock type for the ApplicationLister type
type ApplicationLister struct {
	mock.Mock
}

// ListInNamespace provides a mock function with given fields: namespace
func (_m *ApplicationLister) ListInNamespace(namespace string) ([]*v1alpha1.Application, error) {
	ret := _m.Called(namespace)

	var r0 []*v1alpha1.Application
	if rf, ok := ret.Get(0).(func(string) []*v1alpha1.Application); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamespacesFor provides a mock function with given fields: appName
func (_m *ApplicationLister) ListNamespacesFor(appName string) ([]string, error) {
	ret := _m.Called(appName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
