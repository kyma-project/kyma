// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import (
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/kyma-project/kyma/components/service-binding-usage-controller/pkg/apis/servicecatalog/v1alpha1"
)

// ServiceBindingUsageLister is an autogenerated mock type for the ServiceBindingUsageLister type
type ServiceBindingUsageLister struct {
	mock.Mock
}

// DeleteAllByUsageKind provides a mock function with given fields: namespace, kind, resourceName
func (_m *ServiceBindingUsageLister) DeleteAllByUsageKind(namespace string, kind string, resourceName string) error {
	ret := _m.Called(namespace, kind, resourceName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(namespace, kind, resourceName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListByUsageKind provides a mock function with given fields: ns, kind, resourceName
func (_m *ServiceBindingUsageLister) ListByUsageKind(ns string, kind string, resourceName string) ([]*v1alpha1.ServiceBindingUsage, error) {
	ret := _m.Called(ns, kind, resourceName)

	var r0 []*v1alpha1.ServiceBindingUsage
	if rf, ok := ret.Get(0).(func(string, string, string) []*v1alpha1.ServiceBindingUsage); ok {
		r0 = rf(ns, kind, resourceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.ServiceBindingUsage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(ns, kind, resourceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
