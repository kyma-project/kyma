// Code generated by mockery v1.0.0. DO NOT EDIT.
package automock

import gqlschema "github.com/kyma-project/kyma/components/console-backend-service/internal/gqlschema"
import mock "github.com/stretchr/testify/mock"

import v1alpha1 "github.com/kyma-project/kyma/components/function-controller/pkg/apis/serverless/v1alpha1"

// gqlFunctionConverter is an autogenerated mock type for the gqlFunctionConverter type
type gqlFunctionConverter struct {
	mock.Mock
}

// ToFunction provides a mock function with given fields: name, namespace, in
func (_m *gqlFunctionConverter) ToFunction(name string, namespace string, in gqlschema.FunctionMutationInput) (*v1alpha1.Function, error) {
	ret := _m.Called(name, namespace, in)

	var r0 *v1alpha1.Function
	if rf, ok := ret.Get(0).(func(string, string, gqlschema.FunctionMutationInput) *v1alpha1.Function); ok {
		r0 = rf(name, namespace, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, gqlschema.FunctionMutationInput) error); ok {
		r1 = rf(name, namespace, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToGQL provides a mock function with given fields: item
func (_m *gqlFunctionConverter) ToGQL(item *v1alpha1.Function) (*gqlschema.Function, error) {
	ret := _m.Called(item)

	var r0 *gqlschema.Function
	if rf, ok := ret.Get(0).(func(*v1alpha1.Function) *gqlschema.Function); ok {
		r0 = rf(item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlschema.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Function) error); ok {
		r1 = rf(item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToGQLs provides a mock function with given fields: items
func (_m *gqlFunctionConverter) ToGQLs(items []*v1alpha1.Function) ([]gqlschema.Function, error) {
	ret := _m.Called(items)

	var r0 []gqlschema.Function
	if rf, ok := ret.Get(0).(func([]*v1alpha1.Function) []gqlschema.Function); ok {
		r0 = rf(items)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gqlschema.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*v1alpha1.Function) error); ok {
		r1 = rf(items)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
