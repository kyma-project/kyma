// Code generated by mockery v1.0.0. DO NOT EDIT.
package automock

import gqlschema "github.com/kyma-project/kyma/components/console-backend-service/internal/gqlschema"
import mock "github.com/stretchr/testify/mock"
import resource "github.com/kyma-project/kyma/components/console-backend-service/pkg/resource"

import v1alpha1 "github.com/kyma-project/kyma/components/function-controller/pkg/apis/serverless/v1alpha1"

// functionSvc is an autogenerated mock type for the functionSvc type
type functionSvc struct {
	mock.Mock
}

// Create provides a mock function with given fields: function
func (_m *functionSvc) Create(function *v1alpha1.Function) (*v1alpha1.Function, error) {
	ret := _m.Called(function)

	var r0 *v1alpha1.Function
	if rf, ok := ret.Get(0).(func(*v1alpha1.Function) *v1alpha1.Function); ok {
		r0 = rf(function)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Function) error); ok {
		r1 = rf(function)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: function
func (_m *functionSvc) Delete(function gqlschema.FunctionMetadataInput) error {
	ret := _m.Called(function)

	var r0 error
	if rf, ok := ret.Get(0).(func(gqlschema.FunctionMetadataInput) error); ok {
		r0 = rf(function)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMany provides a mock function with given fields: functions
func (_m *functionSvc) DeleteMany(functions []gqlschema.FunctionMetadataInput) error {
	ret := _m.Called(functions)

	var r0 error
	if rf, ok := ret.Get(0).(func([]gqlschema.FunctionMetadataInput) error); ok {
		r0 = rf(functions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: namespace, name
func (_m *functionSvc) Find(namespace string, name string) (*v1alpha1.Function, error) {
	ret := _m.Called(namespace, name)

	var r0 *v1alpha1.Function
	if rf, ok := ret.Get(0).(func(string, string) *v1alpha1.Function); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: namespace
func (_m *functionSvc) List(namespace string) ([]*v1alpha1.Function, error) {
	ret := _m.Called(namespace)

	var r0 []*v1alpha1.Function
	if rf, ok := ret.Get(0).(func(string) []*v1alpha1.Function); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: listener
func (_m *functionSvc) Subscribe(listener resource.Listener) {
	_m.Called(listener)
}

// Unsubscribe provides a mock function with given fields: listener
func (_m *functionSvc) Unsubscribe(listener resource.Listener) {
	_m.Called(listener)
}

// Update provides a mock function with given fields: function
func (_m *functionSvc) Update(function *v1alpha1.Function) (*v1alpha1.Function, error) {
	ret := _m.Called(function)

	var r0 *v1alpha1.Function
	if rf, ok := ret.Get(0).(func(*v1alpha1.Function) *v1alpha1.Function); ok {
		r0 = rf(function)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Function)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Function) error); ok {
		r1 = rf(function)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
