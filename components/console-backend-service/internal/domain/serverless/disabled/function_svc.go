// Code generated by failery v1.0.0. DO NOT EDIT.

package disabled

import (
	gqlschema "github.com/kyma-project/kyma/components/console-backend-service/internal/gqlschema"
	resource "github.com/kyma-project/kyma/components/console-backend-service/pkg/resource"

	v1alpha1 "github.com/kyma-project/kyma/components/function-controller/pkg/apis/serverless/v1alpha1"
)

// functionSvc is an autogenerated failing mock type for the functionSvc type
type functionSvc struct {
	err error
}

// NewFunctionSvc creates a new functionSvc type instance
func NewFunctionSvc(err error) *functionSvc {
	return &functionSvc{err: err}
}

// Create provides a failing mock function with given fields: function
func (_m *functionSvc) Create(function *v1alpha1.Function) (*v1alpha1.Function, error) {
	var r0 *v1alpha1.Function
	var r1 error
	r1 = _m.err

	return r0, r1
}

// Delete provides a failing mock function with given fields: function
func (_m *functionSvc) Delete(function gqlschema.FunctionMetadataInput) error {
	var r0 error
	r0 = _m.err

	return r0
}

// DeleteMany provides a failing mock function with given fields: functions
func (_m *functionSvc) DeleteMany(functions []gqlschema.FunctionMetadataInput) error {
	var r0 error
	r0 = _m.err

	return r0
}

// Find provides a failing mock function with given fields: namespace, name
func (_m *functionSvc) Find(namespace string, name string) (*v1alpha1.Function, error) {
	var r0 *v1alpha1.Function
	var r1 error
	r1 = _m.err

	return r0, r1
}

// List provides a failing mock function with given fields: namespace
func (_m *functionSvc) List(namespace string) ([]*v1alpha1.Function, error) {
	var r0 []*v1alpha1.Function
	var r1 error
	r1 = _m.err

	return r0, r1
}

// Subscribe provides a failing mock function with given fields: listener
func (_m *functionSvc) Subscribe(listener resource.Listener) {
}

// Unsubscribe provides a failing mock function with given fields: listener
func (_m *functionSvc) Unsubscribe(listener resource.Listener) {
}

// Update provides a failing mock function with given fields: function
func (_m *functionSvc) Update(function *v1alpha1.Function) (*v1alpha1.Function, error) {
	var r0 *v1alpha1.Function
	var r1 error
	r1 = _m.err

	return r0, r1
}
