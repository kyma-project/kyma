// Code generated by MockGen. DO NOT EDIT.
// Source: function.go

// Package mock_serverless is a generated GoMock package.
package mock_serverless

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gqlschema "github.com/kyma-project/kyma/components/console-backend-service/internal/gqlschema"
	v1alpha1 "github.com/kyma-project/kyma/components/function-controller/pkg/apis/serverless/v1alpha1"
)

// MockFunctionService is a mock of FunctionService interface
type MockFunctionService struct {
	ctrl     *gomock.Controller
	recorder *MockFunctionServiceMockRecorder
}

// MockFunctionServiceMockRecorder is the mock recorder for MockFunctionService
type MockFunctionServiceMockRecorder struct {
	mock *MockFunctionService
}

// NewMockFunctionService creates a new mock instance
func NewMockFunctionService(ctrl *gomock.Controller) *MockFunctionService {
	mock := &MockFunctionService{ctrl: ctrl}
	mock.recorder = &MockFunctionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFunctionService) EXPECT() *MockFunctionServiceMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockFunctionService) List(namespace string) ([]*v1alpha1.Function, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", namespace)
	ret0, _ := ret[0].([]*v1alpha1.Function)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockFunctionServiceMockRecorder) List(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFunctionService)(nil).List), namespace)
}

// Delete mocks base method
func (m *MockFunctionService) Delete(name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockFunctionServiceMockRecorder) Delete(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFunctionService)(nil).Delete), name, namespace)
}

// Find mocks base method
func (m *MockFunctionService) Find(name, namespace string) (*v1alpha1.Function, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", name, namespace)
	ret0, _ := ret[0].(*v1alpha1.Function)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockFunctionServiceMockRecorder) Find(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFunctionService)(nil).Find), name, namespace)
}

// Create mocks base method
func (m *MockFunctionService) Create(name, namespace string, labels gqlschema.Labels, size, runtime string) (*v1alpha1.Function, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, namespace, labels, size, runtime)
	ret0, _ := ret[0].(*v1alpha1.Function)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFunctionServiceMockRecorder) Create(name, namespace, labels, size, runtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFunctionService)(nil).Create), name, namespace, labels, size, runtime)
}

// Update mocks base method
func (m *MockFunctionService) Update(name, namespace string, params gqlschema.FunctionUpdateInput) (*v1alpha1.Function, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", name, namespace, params)
	ret0, _ := ret[0].(*v1alpha1.Function)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockFunctionServiceMockRecorder) Update(name, namespace, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFunctionService)(nil).Update), name, namespace, params)
}
