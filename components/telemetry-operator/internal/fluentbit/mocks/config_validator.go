// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ConfigValidator is an autogenerated mock type for the ConfigValidator type
type ConfigValidator struct {
	mock.Mock
}

// RunCmd provides a mock function with given fields: ctx, name, args
func (_m *ConfigValidator) RunCmd(ctx context.Context, name string, args ...string) (string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) string); ok {
		r0 = rf(ctx, name, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, name, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: ctx, configFilePath
func (_m *ConfigValidator) Validate(ctx context.Context, configFilePath string) error {
	ret := _m.Called(ctx, configFilePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, configFilePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewConfigValidator interface {
	mock.TestingT
	Cleanup(func())
}

// NewConfigValidator creates a new instance of ConfigValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConfigValidator(t mockConstructorTestingTNewConfigValidator) *ConfigValidator {
	mock := &ConfigValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
