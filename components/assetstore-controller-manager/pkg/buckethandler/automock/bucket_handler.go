// Code generated by mockery v1.0.0
package automock

import mock "github.com/stretchr/testify/mock"

// BucketHandler is an autogenerated mock type for the BucketHandler type
type BucketHandler struct {
	mock.Mock
}

// ComparePolicy provides a mock function with given fields: bucketName, policy
func (_m *BucketHandler) ComparePolicy(bucketName string, policy string) (bool, error) {
	ret := _m.Called(bucketName, policy)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(bucketName, policy)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(bucketName, policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIfDoesntExist provides a mock function with given fields: bucketName, region
func (_m *BucketHandler) CreateIfDoesntExist(bucketName string, region string) (bool, error) {
	ret := _m.Called(bucketName, region)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(bucketName, region)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(bucketName, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: bucketName
func (_m *BucketHandler) Delete(bucketName string) error {
	ret := _m.Called(bucketName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(bucketName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: bucketName
func (_m *BucketHandler) Exists(bucketName string) (bool, error) {
	ret := _m.Called(bucketName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(bucketName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: bucketName
func (_m *BucketHandler) GetPolicy(bucketName string) (string, error) {
	ret := _m.Called(bucketName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(bucketName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPolicyIfNotEqual provides a mock function with given fields: bucketName, policy
func (_m *BucketHandler) SetPolicyIfNotEqual(bucketName string, policy string) (bool, error) {
	ret := _m.Called(bucketName, policy)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(bucketName, policy)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(bucketName, policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
