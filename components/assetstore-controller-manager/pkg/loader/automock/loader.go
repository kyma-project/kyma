// Code generated by mockery v1.0.0
package automock

import mock "github.com/stretchr/testify/mock"
import v1alpha1 "github.com/kyma-project/kyma/components/assetstore-controller-manager/pkg/apis/assetstore/v1alpha1"

// Loader is an autogenerated mock type for the Loader type
type Loader struct {
	mock.Mock
}

// Clean provides a mock function with given fields: path
func (_m *Loader) Clean(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Load provides a mock function with given fields: src, assetName, mode
func (_m *Loader) Load(src string, assetName string, mode v1alpha1.AssetMode) (string, []string, error) {
	ret := _m.Called(src, assetName, mode)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, v1alpha1.AssetMode) string); ok {
		r0 = rf(src, assetName, mode)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func(string, string, v1alpha1.AssetMode) []string); ok {
		r1 = rf(src, assetName, mode)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, v1alpha1.AssetMode) error); ok {
		r2 = rf(src, assetName, mode)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
