// Code generated by mockery v1.0.0
package automock

import controller "github.com/kyma-project/kyma/components/binding-usage-controller/internal/controller"
import mock "github.com/stretchr/testify/mock"
import v1alpha1 "github.com/kyma-project/kyma/components/binding-usage-controller/pkg/apis/servicecatalog/v1alpha1"

// AppliedSpecStorage is an autogenerated mock type for the AppliedSpecStorage type
type AppliedSpecStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: namespace, name
func (_m *AppliedSpecStorage) Delete(namespace string, name string) error {
	ret := _m.Called(namespace, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: namespace, name
func (_m *AppliedSpecStorage) Get(namespace string, name string) (*controller.UsageSpec, bool, error) {
	ret := _m.Called(namespace, name)

	var r0 *controller.UsageSpec
	if rf, ok := ret.Get(0).(func(string, string) *controller.UsageSpec); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controller.UsageSpec)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(namespace, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Upsert provides a mock function with given fields: bUsage, applied
func (_m *AppliedSpecStorage) Upsert(bUsage *v1alpha1.ServiceBindingUsage, applied bool) error {
	ret := _m.Called(bUsage, applied)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.ServiceBindingUsage, bool) error); ok {
		r0 = rf(bUsage, applied)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
