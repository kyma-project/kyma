// Code generated by mockery v1.0.0
package automock

import context "context"
import docstopic "github.com/kyma-project/kyma/components/cms-controller-manager/pkg/handler/docstopic"
import mock "github.com/stretchr/testify/mock"
import v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// AssetService is an autogenerated mock type for the AssetService type
type AssetService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, docsTopic, commonAsset
func (_m *AssetService) Create(ctx context.Context, docsTopic v1.Object, commonAsset docstopic.CommonAsset) error {
	ret := _m.Called(ctx, docsTopic, commonAsset)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.Object, docstopic.CommonAsset) error); ok {
		r0 = rf(ctx, docsTopic, commonAsset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, commonAsset
func (_m *AssetService) Delete(ctx context.Context, commonAsset docstopic.CommonAsset) error {
	ret := _m.Called(ctx, commonAsset)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, docstopic.CommonAsset) error); ok {
		r0 = rf(ctx, commonAsset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, namespace, labels
func (_m *AssetService) List(ctx context.Context, namespace string, labels map[string]string) ([]docstopic.CommonAsset, error) {
	ret := _m.Called(ctx, namespace, labels)

	var r0 []docstopic.CommonAsset
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) []docstopic.CommonAsset); ok {
		r0 = rf(ctx, namespace, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]docstopic.CommonAsset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, namespace, labels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, commonAsset
func (_m *AssetService) Update(ctx context.Context, commonAsset docstopic.CommonAsset) error {
	ret := _m.Called(ctx, commonAsset)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, docstopic.CommonAsset) error); ok {
		r0 = rf(ctx, commonAsset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
