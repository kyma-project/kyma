package controllers_test

import (
	"context"
	"fmt"
	"path/filepath"
	"testing"

	. "github.com/kyma-project/kyma/components/function-controller/internal/controllers"
	serverless "github.com/kyma-project/kyma/components/function-controller/pkg/apis/serverless/v1alpha1"
	. "github.com/onsi/ginkgo"
	"github.com/onsi/gomega"
	. "github.com/onsi/gomega"
	tektonv1alpha1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1"
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/kubernetes/scheme"
	"knative.dev/pkg/apis"

	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/envtest"
)

var (
	k8sClient              client.Client
	reconciler             *ReconcileFunction
	nextReconcileIteration = func(req ctrl.Request, fn *serverless.Function) {
		By("next reconcile sta")

		_, err := reconciler.Reconcile(req)
		Expect(err).ToNot(HaveOccurred())

		By("updating function to latest changes")
		err = k8sClient.Get(context.Background(), req.NamespacedName, fn)
		Expect(err).ToNot(HaveOccurred())
	}

	_ = BeforeSuite(func() {
		By("bootstrapping test environment...")
		testEnv := &envtest.Environment{
			CRDDirectoryPaths: []string{
				filepath.Join("..", "..", "config", "crd", "crds-thirdparty"),
				filepath.Join("..", "..", "config", "crd", "bases"),
			},
		}
		cfg, err := testEnv.Start()
		Expect(err).To(BeNil())

		By("add tekton.v1alpha1 to schema...")
		err = tektonv1alpha1.AddToScheme(scheme.Scheme)
		Expect(err).To(BeNil())

		By("add serverless to schema...")
		err = serverless.AddToScheme(scheme.Scheme)
		Expect(err).To(BeNil())

		By("creating new client...")
		k8sClient, err = client.New(cfg, client.Options{
			Scheme: scheme.Scheme,
		})
		Expect(err).To(gomega.BeNil())

		By("creating reconciler...")
		rscList := &corev1.ResourceList{}
		reconciler = NewReconcileFunction(k8sClient, scheme.Scheme, rscList, rscList)
	})

	_ = Describe("v2 function controller", func() {
		name := "test-function"
		namespace := "default"
		function := &serverless.Function{
			ObjectMeta: v1.ObjectMeta{
				Name:      name,
				Namespace: namespace,
			},
		}

		It("should handle new function", func() {
			ctx := context.Background()

			By(fmt.Sprintf("creating function %s in namespace: %s", name, namespace))
			Expect(k8sClient.Create(ctx, function)).ShouldNot(HaveOccurred())

			req := ctrl.Request{
				NamespacedName: types.NamespacedName{
					Name:      name,
					Namespace: namespace,
				},
			}

			nextReconcileIteration(req, function)

			Expect(function.Status.Phase).To(Equal(serverless.FunctionPhaseInitializing))

			By("reconciling function in initializing phase")

			nextReconcileIteration(req, function)

			Expect(function.Status.Phase).To(Equal(serverless.FunctionPhaseBuilding))

			var tr tektonv1alpha1.TaskRunList
			Expect(k8sClient.List(ctx, &tr, &client.ListOptions{
				LabelSelector: labels.SelectorFromSet(map[string]string{
					"fnUUID": string(function.UID),
				}),
			})).ShouldNot(gomega.HaveOccurred())
			Expect(len(tr.Items)).To(gomega.Equal(1))

			// changes do not require image rebuild
			function.Spec.Timeout = 123

			// changes require image rebuild
			function.Spec.Function = "function"

			err := k8sClient.Update(ctx, function)
			Expect(err).ToNot(HaveOccurred())

			nextReconcileIteration(req, function)

			nextReconcileIteration(req, function)

			Expect(function.Status.Phase).To(Equal(serverless.FunctionPhaseBuilding))

			Expect(k8sClient.List(ctx, &tr, &client.ListOptions{
				LabelSelector: function.ImgLabelSelector(),
			})).ShouldNot(gomega.HaveOccurred())

			By("fake task run completed")
			Expect(len(tr.Items)).To(gomega.Equal(1))

			tr.Items[0].Status.Conditions = append(tr.Items[0].Status.Conditions, apis.Condition{
				Type: apis.ConditionSucceeded,
			})
			err = k8sClient.Status().Update(ctx, &tr.Items[0])
			Expect(err).ShouldNot(gomega.HaveOccurred())

			nextReconcileIteration(req, function)

			// yaml.NewEncoder(os.Stdout).Encode(function)
		})
	})
)

func TestBooks(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "Function Suite")
}
