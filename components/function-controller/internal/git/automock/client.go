// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import (
	plumbing "github.com/go-git/go-git/v5/plumbing"
	mock "github.com/stretchr/testify/mock"

	transport "github.com/go-git/go-git/v5/plumbing/transport"

	v5 "github.com/go-git/go-git/v5"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ListRefs provides a mock function with given fields: repoUrl, auth
func (_m *Client) ListRefs(repoUrl string, auth transport.AuthMethod) ([]*plumbing.Reference, error) {
	ret := _m.Called(repoUrl, auth)

	var r0 []*plumbing.Reference
	if rf, ok := ret.Get(0).(func(string, transport.AuthMethod) []*plumbing.Reference); ok {
		r0 = rf(repoUrl, auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*plumbing.Reference)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, transport.AuthMethod) error); ok {
		r1 = rf(repoUrl, auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlainClone provides a mock function with given fields: path, isBare, options
func (_m *Client) PlainClone(path string, isBare bool, options *v5.CloneOptions) (*v5.Repository, error) {
	ret := _m.Called(path, isBare, options)

	var r0 *v5.Repository
	if rf, ok := ret.Get(0).(func(string, bool, *v5.CloneOptions) *v5.Repository); ok {
		r0 = rf(path, isBare, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v5.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, *v5.CloneOptions) error); ok {
		r1 = rf(path, isBare, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
