// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import certificates "github.com/kyma-project/kyma/components/connectivity-certs-controller/internal/certificates"
import connectorservice "github.com/kyma-project/kyma/components/connectivity-certs-controller/internal/connectorservice"
import mock "github.com/stretchr/testify/mock"

// EstablishedConnectionClient is an autogenerated mock type for the EstablishedConnectionClient type
type EstablishedConnectionClient struct {
	mock.Mock
}

// GetManagementInfo provides a mock function with given fields: managementInfoURL
func (_m *EstablishedConnectionClient) GetManagementInfo(managementInfoURL string) (connectorservice.ManagementInfo, error) {
	ret := _m.Called(managementInfoURL)

	var r0 connectorservice.ManagementInfo
	if rf, ok := ret.Get(0).(func(string) connectorservice.ManagementInfo); ok {
		r0 = rf(managementInfoURL)
	} else {
		r0 = ret.Get(0).(connectorservice.ManagementInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(managementInfoURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenewCertificate provides a mock function with given fields: renewalURL
func (_m *EstablishedConnectionClient) RenewCertificate(renewalURL string) (certificates.Certificates, error) {
	ret := _m.Called(renewalURL)

	var r0 certificates.Certificates
	if rf, ok := ret.Get(0).(func(string) certificates.Certificates); ok {
		r0 = rf(renewalURL)
	} else {
		r0 = ret.Get(0).(certificates.Certificates)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(renewalURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
