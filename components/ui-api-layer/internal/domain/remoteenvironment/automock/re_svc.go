// Code generated by mockery v1.0.0
package automock

import (
	"github.com/kyma-project/kyma/components/remote-environment-broker/pkg/apis/applicationconnector/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)
import pager "github.com/kyma-project/kyma/components/ui-api-layer/internal/pager"

// reSvc is an autogenerated mock type for the reSvc type
type reSvc struct {
	mock.Mock
}

// Disable provides a mock function with given fields: namespace, name
func (_m *reSvc) Disable(namespace string, name string) error {
	ret := _m.Called(namespace, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Enable provides a mock function with given fields: namespace, name
func (_m *reSvc) Enable(namespace string, name string) (*v1alpha1.EnvironmentMapping, error) {
	ret := _m.Called(namespace, name)

	var r0 *v1alpha1.EnvironmentMapping
	if rf, ok := ret.Get(0).(func(string, string) *v1alpha1.EnvironmentMapping); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.EnvironmentMapping)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: name
func (_m *reSvc) Find(name string) (*v1alpha1.RemoteEnvironment, error) {
	ret := _m.Called(name)

	var r0 *v1alpha1.RemoteEnvironment
	if rf, ok := ret.Get(0).(func(string) *v1alpha1.RemoteEnvironment); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.RemoteEnvironment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectionURL provides a mock function with given fields: remoteEnvironment
func (_m *reSvc) GetConnectionURL(remoteEnvironment string) (string, error) {
	ret := _m.Called(remoteEnvironment)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(remoteEnvironment)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(remoteEnvironment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: params
func (_m *reSvc) List(params pager.PagingParams) ([]*v1alpha1.RemoteEnvironment, error) {
	ret := _m.Called(params)

	var r0 []*v1alpha1.RemoteEnvironment
	if rf, ok := ret.Get(0).(func(pager.PagingParams) []*v1alpha1.RemoteEnvironment); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.RemoteEnvironment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(pager.PagingParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInEnvironment provides a mock function with given fields: environment
func (_m *reSvc) ListInEnvironment(environment string) ([]*v1alpha1.RemoteEnvironment, error) {
	ret := _m.Called(environment)

	var r0 []*v1alpha1.RemoteEnvironment
	if rf, ok := ret.Get(0).(func(string) []*v1alpha1.RemoteEnvironment); ok {
		r0 = rf(environment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.RemoteEnvironment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(environment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamespacesFor provides a mock function with given fields: reName
func (_m *reSvc) ListNamespacesFor(reName string) ([]string, error) {
	ret := _m.Called(reName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(reName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(reName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
