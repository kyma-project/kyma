// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import mock "github.com/stretchr/testify/mock"
import pager "github.com/kyma-project/kyma/components/ui-api-layer/internal/pager"

import v1beta1 "github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1beta1"

// serviceClassListGetter is an autogenerated mock type for the serviceClassListGetter type
type serviceClassListGetter struct {
	mock.Mock
}

// Find provides a mock function with given fields: name, environment
func (_m *serviceClassListGetter) Find(name string, environment string) (*v1beta1.ServiceClass, error) {
	ret := _m.Called(name, environment)

	var r0 *v1beta1.ServiceClass
	if rf, ok := ret.Get(0).(func(string, string) *v1beta1.ServiceClass); ok {
		r0 = rf(name, environment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.ServiceClass)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, environment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByExternalName provides a mock function with given fields: externalName, environment
func (_m *serviceClassListGetter) FindByExternalName(externalName string, environment string) (*v1beta1.ServiceClass, error) {
	ret := _m.Called(externalName, environment)

	var r0 *v1beta1.ServiceClass
	if rf, ok := ret.Get(0).(func(string, string) *v1beta1.ServiceClass); ok {
		r0 = rf(externalName, environment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.ServiceClass)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(externalName, environment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: environment, pagingParams
func (_m *serviceClassListGetter) List(environment string, pagingParams pager.PagingParams) ([]*v1beta1.ServiceClass, error) {
	ret := _m.Called(environment, pagingParams)

	var r0 []*v1beta1.ServiceClass
	if rf, ok := ret.Get(0).(func(string, pager.PagingParams) []*v1beta1.ServiceClass); ok {
		r0 = rf(environment, pagingParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1beta1.ServiceClass)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, pager.PagingParams) error); ok {
		r1 = rf(environment, pagingParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
