// Code generated by mockery v1.0.0
package automock

import gqlschema "github.com/kyma-project/kyma/components/ui-api-layer/internal/gqlschema"

import mock "github.com/stretchr/testify/mock"

// envLister is an autogenerated mock type for the envLister type
type envLister struct {
	mock.Mock
}

// List provides a mock function with given fields:
func (_m *envLister) List() ([]gqlschema.Environment, error) {
	ret := _m.Called()

	var r0 []gqlschema.Environment
	if rf, ok := ret.Get(0).(func() []gqlschema.Environment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gqlschema.Environment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListForApplication provides a mock function with given fields: appName
func (_m *envLister) ListForApplication(appName string) ([]gqlschema.Environment, error) {
	ret := _m.Called(appName)

	var r0 []gqlschema.Environment
	if rf, ok := ret.Get(0).(func(string) []gqlschema.Environment); ok {
		r0 = rf(appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gqlschema.Environment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
