// This file was generated by github.com/vektah/gqlgen, DO NOT EDIT

package gqlschema

import (
	"bytes"
	context "context"
	strconv "strconv"

	graphql "github.com/vektah/gqlgen/graphql"
	introspection "github.com/vektah/gqlgen/neelance/introspection"
	query "github.com/vektah/gqlgen/neelance/query"
	schema "github.com/vektah/gqlgen/neelance/schema"
)

func MakeExecutableSchema(resolvers Resolvers) graphql.ExecutableSchema {
	return &executableSchema{resolvers: resolvers}
}

type Resolvers interface {
	Deployment_boundServiceInstanceNames(ctx context.Context, obj *Deployment) ([]string, error)

	EventActivation_events(ctx context.Context, obj *EventActivation) ([]EventActivationEvent, error)

	Mutation_createServiceInstance(ctx context.Context, params ServiceInstanceCreateInput) (*ServiceInstance, error)
	Mutation_deleteServiceInstance(ctx context.Context, name string, environment string) (*ServiceInstance, error)
	Mutation_createServiceBinding(ctx context.Context, serviceBindingName string, serviceInstanceName string, environment string) (*CreateServiceBindingOutput, error)
	Mutation_deleteServiceBinding(ctx context.Context, serviceBindingName string, environment string) (*DeleteServiceBindingOutput, error)
	Mutation_createServiceBindingUsage(ctx context.Context, createServiceBindingUsageInput *CreateServiceBindingUsageInput) (*ServiceBindingUsage, error)
	Mutation_deleteServiceBindingUsage(ctx context.Context, serviceBindingUsageName string, environment string) (*DeleteServiceBindingUsageOutput, error)
	Mutation_enableRemoteEnvironment(ctx context.Context, remoteEnvironment string, environment string) (*EnvironmentMapping, error)
	Mutation_disableRemoteEnvironment(ctx context.Context, remoteEnvironment string, environment string) (*EnvironmentMapping, error)
	Mutation_createIDPPreset(ctx context.Context, name string, issuer string, jwksUri string) (*IDPPreset, error)
	Mutation_deleteIDPPreset(ctx context.Context, name string) (*IDPPreset, error)
	Query_serviceInstance(ctx context.Context, name string, environment string) (*ServiceInstance, error)
	Query_serviceInstances(ctx context.Context, environment string, first *int, offset *int, status *InstanceStatusType) ([]ServiceInstance, error)
	Query_serviceClasses(ctx context.Context, first *int, offset *int) ([]ServiceClass, error)
	Query_serviceClass(ctx context.Context, name string) (*ServiceClass, error)
	Query_serviceBrokers(ctx context.Context, first *int, offset *int) ([]ServiceBroker, error)
	Query_serviceBroker(ctx context.Context, name string) (*ServiceBroker, error)
	Query_serviceBindingUsage(ctx context.Context, name string, environment string) (*ServiceBindingUsage, error)
	Query_serviceBinding(ctx context.Context, name string, environment string) (*ServiceBinding, error)
	Query_usageKinds(ctx context.Context, first *int, offset *int) ([]UsageKind, error)
	Query_usageKindResources(ctx context.Context, usageKind string, environment string) ([]UsageKindResource, error)
	Query_apis(ctx context.Context, environment string, serviceName *string, hostname *string) ([]API, error)
	Query_remoteEnvironment(ctx context.Context, name string) (*RemoteEnvironment, error)
	Query_remoteEnvironments(ctx context.Context, environment *string, first *int, offset *int) ([]RemoteEnvironment, error)
	Query_connectorService(ctx context.Context, remoteEnvironment string) (ConnectorService, error)
	Query_environments(ctx context.Context, remoteEnvironment *string) ([]Environment, error)
	Query_deployments(ctx context.Context, environment string, excludeFunctions *bool) ([]Deployment, error)
	Query_resourceQuotas(ctx context.Context, environment string) ([]ResourceQuota, error)
	Query_resourceQuotaStatus(ctx context.Context, environment string) (ResourceQuotaStatus, error)
	Query_functions(ctx context.Context, environment string, first *int, offset *int) ([]Function, error)
	Query_content(ctx context.Context, contentType string, id string) (*JSON, error)
	Query_topics(ctx context.Context, input []InputTopic, internal *bool) ([]TopicEntry, error)
	Query_eventActivations(ctx context.Context, environment string) ([]EventActivation, error)
	Query_limitRanges(ctx context.Context, environment string) ([]LimitRange, error)
	Query_IDPPreset(ctx context.Context, name string) (*IDPPreset, error)
	Query_IDPPresets(ctx context.Context, first *int, offset *int) ([]IDPPreset, error)

	RemoteEnvironment_enabledInEnvironments(ctx context.Context, obj *RemoteEnvironment) ([]string, error)
	RemoteEnvironment_status(ctx context.Context, obj *RemoteEnvironment) (RemoteEnvironmentStatus, error)

	ServiceBinding_secret(ctx context.Context, obj *ServiceBinding) (*Secret, error)

	ServiceBindingUsage_serviceBinding(ctx context.Context, obj *ServiceBindingUsage) (*ServiceBinding, error)

	ServiceClass_plans(ctx context.Context, obj *ServiceClass) ([]ServicePlan, error)
	ServiceClass_activated(ctx context.Context, obj *ServiceClass) (bool, error)
	ServiceClass_apiSpec(ctx context.Context, obj *ServiceClass) (*JSON, error)
	ServiceClass_asyncApiSpec(ctx context.Context, obj *ServiceClass) (*JSON, error)
	ServiceClass_content(ctx context.Context, obj *ServiceClass) (*JSON, error)

	ServiceInstance_servicePlan(ctx context.Context, obj *ServiceInstance) (*ServicePlan, error)
	ServiceInstance_serviceClass(ctx context.Context, obj *ServiceInstance) (*ServiceClass, error)
	ServiceInstance_bindable(ctx context.Context, obj *ServiceInstance) (bool, error)
	ServiceInstance_serviceBindings(ctx context.Context, obj *ServiceInstance) ([]ServiceBinding, error)
	ServiceInstance_serviceBindingUsages(ctx context.Context, obj *ServiceInstance) ([]ServiceBindingUsage, error)

	Subscription_serviceInstanceEvent(ctx context.Context, environment string) (<-chan ServiceInstanceEvent, error)
}

type executableSchema struct {
	resolvers Resolvers
}

func (e *executableSchema) Schema() *schema.Schema {
	return parsedSchema
}

func (e *executableSchema) Query(ctx context.Context, op *query.Operation) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e.resolvers}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.Selections)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *query.Operation) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e.resolvers}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.Selections)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *query.Operation) func() *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e.resolvers}

	next := ec._Subscription(ctx, op.Selections)
	if ec.Errors != nil {
		return graphql.OneShot(&graphql.Response{Data: []byte("null"), Errors: ec.Errors})
	}

	var buf bytes.Buffer
	return func() *graphql.Response {
		buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)
			return buf.Bytes()
		})

		return &graphql.Response{
			Data:   buf,
			Errors: ec.Errors,
		}
	}
}

type executionContext struct {
	*graphql.RequestContext

	resolvers Resolvers
}

var aPIImplementors = []string{"API"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _API(ctx context.Context, sel []query.Selection, obj *API) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, aPIImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("API")
		case "name":
			out.Values[i] = ec._API_name(ctx, field, obj)
		case "hostname":
			out.Values[i] = ec._API_hostname(ctx, field, obj)
		case "service":
			out.Values[i] = ec._API_service(ctx, field, obj)
		case "authenticationPolicies":
			out.Values[i] = ec._API_authenticationPolicies(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _API_name(ctx context.Context, field graphql.CollectedField, obj *API) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "API"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _API_hostname(ctx context.Context, field graphql.CollectedField, obj *API) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "API"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Hostname
	return graphql.MarshalString(res)
}

func (ec *executionContext) _API_service(ctx context.Context, field graphql.CollectedField, obj *API) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "API"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Service
	return ec._Service(ctx, field.Selections, &res)
}

func (ec *executionContext) _API_authenticationPolicies(ctx context.Context, field graphql.CollectedField, obj *API) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "API"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AuthenticationPolicies
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._AuthenticationPolicy(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var authenticationPolicyImplementors = []string{"AuthenticationPolicy"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AuthenticationPolicy(ctx context.Context, sel []query.Selection, obj *AuthenticationPolicy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, authenticationPolicyImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthenticationPolicy")
		case "type":
			out.Values[i] = ec._AuthenticationPolicy_type(ctx, field, obj)
		case "issuer":
			out.Values[i] = ec._AuthenticationPolicy_issuer(ctx, field, obj)
		case "jwksURI":
			out.Values[i] = ec._AuthenticationPolicy_jwksURI(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _AuthenticationPolicy_type(ctx context.Context, field graphql.CollectedField, obj *AuthenticationPolicy) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AuthenticationPolicy"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type
	return res
}

func (ec *executionContext) _AuthenticationPolicy_issuer(ctx context.Context, field graphql.CollectedField, obj *AuthenticationPolicy) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AuthenticationPolicy"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Issuer
	return graphql.MarshalString(res)
}

func (ec *executionContext) _AuthenticationPolicy_jwksURI(ctx context.Context, field graphql.CollectedField, obj *AuthenticationPolicy) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "AuthenticationPolicy"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.JwksURI
	return graphql.MarshalString(res)
}

var connectorServiceImplementors = []string{"ConnectorService"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ConnectorService(ctx context.Context, sel []query.Selection, obj *ConnectorService) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, connectorServiceImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectorService")
		case "url":
			out.Values[i] = ec._ConnectorService_url(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ConnectorService_url(ctx context.Context, field graphql.CollectedField, obj *ConnectorService) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConnectorService"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Url
	return graphql.MarshalString(res)
}

var containerImplementors = []string{"Container"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Container(ctx context.Context, sel []query.Selection, obj *Container) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, containerImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Container")
		case "name":
			out.Values[i] = ec._Container_name(ctx, field, obj)
		case "image":
			out.Values[i] = ec._Container_image(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Container_name(ctx context.Context, field graphql.CollectedField, obj *Container) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Container"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Container_image(ctx context.Context, field graphql.CollectedField, obj *Container) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Container"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Image
	return graphql.MarshalString(res)
}

var createServiceBindingOutputImplementors = []string{"CreateServiceBindingOutput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CreateServiceBindingOutput(ctx context.Context, sel []query.Selection, obj *CreateServiceBindingOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, createServiceBindingOutputImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateServiceBindingOutput")
		case "name":
			out.Values[i] = ec._CreateServiceBindingOutput_name(ctx, field, obj)
		case "serviceInstanceName":
			out.Values[i] = ec._CreateServiceBindingOutput_serviceInstanceName(ctx, field, obj)
		case "environment":
			out.Values[i] = ec._CreateServiceBindingOutput_environment(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _CreateServiceBindingOutput_name(ctx context.Context, field graphql.CollectedField, obj *CreateServiceBindingOutput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "CreateServiceBindingOutput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _CreateServiceBindingOutput_serviceInstanceName(ctx context.Context, field graphql.CollectedField, obj *CreateServiceBindingOutput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "CreateServiceBindingOutput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ServiceInstanceName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _CreateServiceBindingOutput_environment(ctx context.Context, field graphql.CollectedField, obj *CreateServiceBindingOutput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "CreateServiceBindingOutput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Environment
	return graphql.MarshalString(res)
}

var deleteServiceBindingOutputImplementors = []string{"DeleteServiceBindingOutput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _DeleteServiceBindingOutput(ctx context.Context, sel []query.Selection, obj *DeleteServiceBindingOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, deleteServiceBindingOutputImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteServiceBindingOutput")
		case "name":
			out.Values[i] = ec._DeleteServiceBindingOutput_name(ctx, field, obj)
		case "environment":
			out.Values[i] = ec._DeleteServiceBindingOutput_environment(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _DeleteServiceBindingOutput_name(ctx context.Context, field graphql.CollectedField, obj *DeleteServiceBindingOutput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeleteServiceBindingOutput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _DeleteServiceBindingOutput_environment(ctx context.Context, field graphql.CollectedField, obj *DeleteServiceBindingOutput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeleteServiceBindingOutput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Environment
	return graphql.MarshalString(res)
}

var deleteServiceBindingUsageOutputImplementors = []string{"DeleteServiceBindingUsageOutput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _DeleteServiceBindingUsageOutput(ctx context.Context, sel []query.Selection, obj *DeleteServiceBindingUsageOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, deleteServiceBindingUsageOutputImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteServiceBindingUsageOutput")
		case "name":
			out.Values[i] = ec._DeleteServiceBindingUsageOutput_name(ctx, field, obj)
		case "environment":
			out.Values[i] = ec._DeleteServiceBindingUsageOutput_environment(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _DeleteServiceBindingUsageOutput_name(ctx context.Context, field graphql.CollectedField, obj *DeleteServiceBindingUsageOutput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeleteServiceBindingUsageOutput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _DeleteServiceBindingUsageOutput_environment(ctx context.Context, field graphql.CollectedField, obj *DeleteServiceBindingUsageOutput) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeleteServiceBindingUsageOutput"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Environment
	return graphql.MarshalString(res)
}

var deploymentImplementors = []string{"Deployment"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Deployment(ctx context.Context, sel []query.Selection, obj *Deployment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, deploymentImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Deployment")
		case "name":
			out.Values[i] = ec._Deployment_name(ctx, field, obj)
		case "environment":
			out.Values[i] = ec._Deployment_environment(ctx, field, obj)
		case "creationTimestamp":
			out.Values[i] = ec._Deployment_creationTimestamp(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Deployment_status(ctx, field, obj)
		case "labels":
			out.Values[i] = ec._Deployment_labels(ctx, field, obj)
		case "containers":
			out.Values[i] = ec._Deployment_containers(ctx, field, obj)
		case "boundServiceInstanceNames":
			out.Values[i] = ec._Deployment_boundServiceInstanceNames(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Deployment_name(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Deployment"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Deployment_environment(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Deployment"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Environment
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Deployment_creationTimestamp(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Deployment"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreationTimestamp
	return MarshalTimestamp(res)
}

func (ec *executionContext) _Deployment_status(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Deployment"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Status
	return ec._DeploymentStatus(ctx, field.Selections, &res)
}

func (ec *executionContext) _Deployment_labels(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Deployment"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Labels
	return res
}

func (ec *executionContext) _Deployment_containers(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Deployment"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Containers
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Container(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Deployment_boundServiceInstanceNames(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Deployment",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Deployment_boundServiceInstanceNames(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]string)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return graphql.MarshalString(res[idx1])
			}())
		}
		return arr1
	})
}

var deploymentConditionImplementors = []string{"DeploymentCondition"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _DeploymentCondition(ctx context.Context, sel []query.Selection, obj *DeploymentCondition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, deploymentConditionImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeploymentCondition")
		case "status":
			out.Values[i] = ec._DeploymentCondition_status(ctx, field, obj)
		case "type":
			out.Values[i] = ec._DeploymentCondition_type(ctx, field, obj)
		case "lastTransitionTimestamp":
			out.Values[i] = ec._DeploymentCondition_lastTransitionTimestamp(ctx, field, obj)
		case "lastUpdateTimestamp":
			out.Values[i] = ec._DeploymentCondition_lastUpdateTimestamp(ctx, field, obj)
		case "message":
			out.Values[i] = ec._DeploymentCondition_message(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._DeploymentCondition_reason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _DeploymentCondition_status(ctx context.Context, field graphql.CollectedField, obj *DeploymentCondition) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeploymentCondition"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Status
	return graphql.MarshalString(res)
}

func (ec *executionContext) _DeploymentCondition_type(ctx context.Context, field graphql.CollectedField, obj *DeploymentCondition) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeploymentCondition"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type
	return graphql.MarshalString(res)
}

func (ec *executionContext) _DeploymentCondition_lastTransitionTimestamp(ctx context.Context, field graphql.CollectedField, obj *DeploymentCondition) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeploymentCondition"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.LastTransitionTimestamp
	return MarshalTimestamp(res)
}

func (ec *executionContext) _DeploymentCondition_lastUpdateTimestamp(ctx context.Context, field graphql.CollectedField, obj *DeploymentCondition) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeploymentCondition"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.LastUpdateTimestamp
	return MarshalTimestamp(res)
}

func (ec *executionContext) _DeploymentCondition_message(ctx context.Context, field graphql.CollectedField, obj *DeploymentCondition) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeploymentCondition"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Message
	return graphql.MarshalString(res)
}

func (ec *executionContext) _DeploymentCondition_reason(ctx context.Context, field graphql.CollectedField, obj *DeploymentCondition) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeploymentCondition"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Reason
	return graphql.MarshalString(res)
}

var deploymentStatusImplementors = []string{"DeploymentStatus"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _DeploymentStatus(ctx context.Context, sel []query.Selection, obj *DeploymentStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, deploymentStatusImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeploymentStatus")
		case "replicas":
			out.Values[i] = ec._DeploymentStatus_replicas(ctx, field, obj)
		case "updatedReplicas":
			out.Values[i] = ec._DeploymentStatus_updatedReplicas(ctx, field, obj)
		case "readyReplicas":
			out.Values[i] = ec._DeploymentStatus_readyReplicas(ctx, field, obj)
		case "availableReplicas":
			out.Values[i] = ec._DeploymentStatus_availableReplicas(ctx, field, obj)
		case "conditions":
			out.Values[i] = ec._DeploymentStatus_conditions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _DeploymentStatus_replicas(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeploymentStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Replicas
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _DeploymentStatus_updatedReplicas(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeploymentStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UpdatedReplicas
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _DeploymentStatus_readyReplicas(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeploymentStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ReadyReplicas
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _DeploymentStatus_availableReplicas(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeploymentStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AvailableReplicas
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _DeploymentStatus_conditions(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "DeploymentStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Conditions
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._DeploymentCondition(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var envPrefixImplementors = []string{"EnvPrefix"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _EnvPrefix(ctx context.Context, sel []query.Selection, obj *EnvPrefix) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, envPrefixImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnvPrefix")
		case "name":
			out.Values[i] = ec._EnvPrefix_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _EnvPrefix_name(ctx context.Context, field graphql.CollectedField, obj *EnvPrefix) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EnvPrefix"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

var environmentImplementors = []string{"Environment"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Environment(ctx context.Context, sel []query.Selection, obj *Environment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, environmentImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Environment")
		case "name":
			out.Values[i] = ec._Environment_name(ctx, field, obj)
		case "remoteEnvironments":
			out.Values[i] = ec._Environment_remoteEnvironments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Environment_name(ctx context.Context, field graphql.CollectedField, obj *Environment) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Environment"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Environment_remoteEnvironments(ctx context.Context, field graphql.CollectedField, obj *Environment) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Environment"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.RemoteEnvironments
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

var environmentMappingImplementors = []string{"EnvironmentMapping"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _EnvironmentMapping(ctx context.Context, sel []query.Selection, obj *EnvironmentMapping) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, environmentMappingImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnvironmentMapping")
		case "environment":
			out.Values[i] = ec._EnvironmentMapping_environment(ctx, field, obj)
		case "remoteEnvironment":
			out.Values[i] = ec._EnvironmentMapping_remoteEnvironment(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _EnvironmentMapping_environment(ctx context.Context, field graphql.CollectedField, obj *EnvironmentMapping) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EnvironmentMapping"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Environment
	return graphql.MarshalString(res)
}

func (ec *executionContext) _EnvironmentMapping_remoteEnvironment(ctx context.Context, field graphql.CollectedField, obj *EnvironmentMapping) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EnvironmentMapping"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.RemoteEnvironment
	return graphql.MarshalString(res)
}

var eventActivationImplementors = []string{"EventActivation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _EventActivation(ctx context.Context, sel []query.Selection, obj *EventActivation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, eventActivationImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventActivation")
		case "name":
			out.Values[i] = ec._EventActivation_name(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._EventActivation_displayName(ctx, field, obj)
		case "source":
			out.Values[i] = ec._EventActivation_source(ctx, field, obj)
		case "events":
			out.Values[i] = ec._EventActivation_events(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _EventActivation_name(ctx context.Context, field graphql.CollectedField, obj *EventActivation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventActivation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _EventActivation_displayName(ctx context.Context, field graphql.CollectedField, obj *EventActivation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventActivation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DisplayName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _EventActivation_source(ctx context.Context, field graphql.CollectedField, obj *EventActivation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventActivation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Source
	return ec._EventActivationSource(ctx, field.Selections, &res)
}

func (ec *executionContext) _EventActivation_events(ctx context.Context, field graphql.CollectedField, obj *EventActivation) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "EventActivation",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.EventActivation_events(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]EventActivationEvent)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._EventActivationEvent(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

var eventActivationEventImplementors = []string{"EventActivationEvent"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _EventActivationEvent(ctx context.Context, sel []query.Selection, obj *EventActivationEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, eventActivationEventImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventActivationEvent")
		case "eventType":
			out.Values[i] = ec._EventActivationEvent_eventType(ctx, field, obj)
		case "version":
			out.Values[i] = ec._EventActivationEvent_version(ctx, field, obj)
		case "description":
			out.Values[i] = ec._EventActivationEvent_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _EventActivationEvent_eventType(ctx context.Context, field graphql.CollectedField, obj *EventActivationEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventActivationEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EventType
	return graphql.MarshalString(res)
}

func (ec *executionContext) _EventActivationEvent_version(ctx context.Context, field graphql.CollectedField, obj *EventActivationEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventActivationEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Version
	return graphql.MarshalString(res)
}

func (ec *executionContext) _EventActivationEvent_description(ctx context.Context, field graphql.CollectedField, obj *EventActivationEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventActivationEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description
	return graphql.MarshalString(res)
}

var eventActivationSourceImplementors = []string{"EventActivationSource"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _EventActivationSource(ctx context.Context, sel []query.Selection, obj *EventActivationSource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, eventActivationSourceImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventActivationSource")
		case "environment":
			out.Values[i] = ec._EventActivationSource_environment(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EventActivationSource_type(ctx, field, obj)
		case "namespace":
			out.Values[i] = ec._EventActivationSource_namespace(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _EventActivationSource_environment(ctx context.Context, field graphql.CollectedField, obj *EventActivationSource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventActivationSource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Environment
	return graphql.MarshalString(res)
}

func (ec *executionContext) _EventActivationSource_type(ctx context.Context, field graphql.CollectedField, obj *EventActivationSource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventActivationSource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type
	return graphql.MarshalString(res)
}

func (ec *executionContext) _EventActivationSource_namespace(ctx context.Context, field graphql.CollectedField, obj *EventActivationSource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventActivationSource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Namespace
	return graphql.MarshalString(res)
}

var functionImplementors = []string{"Function"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Function(ctx context.Context, sel []query.Selection, obj *Function) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, functionImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Function")
		case "name":
			out.Values[i] = ec._Function_name(ctx, field, obj)
		case "trigger":
			out.Values[i] = ec._Function_trigger(ctx, field, obj)
		case "creationTimestamp":
			out.Values[i] = ec._Function_creationTimestamp(ctx, field, obj)
		case "labels":
			out.Values[i] = ec._Function_labels(ctx, field, obj)
		case "environment":
			out.Values[i] = ec._Function_environment(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Function_name(ctx context.Context, field graphql.CollectedField, obj *Function) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Function"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Function_trigger(ctx context.Context, field graphql.CollectedField, obj *Function) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Function"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Trigger
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Function_creationTimestamp(ctx context.Context, field graphql.CollectedField, obj *Function) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Function"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreationTimestamp
	return MarshalTimestamp(res)
}

func (ec *executionContext) _Function_labels(ctx context.Context, field graphql.CollectedField, obj *Function) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Function"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Labels
	return res
}

func (ec *executionContext) _Function_environment(ctx context.Context, field graphql.CollectedField, obj *Function) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Function"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Environment
	return graphql.MarshalString(res)
}

var iDPPresetImplementors = []string{"IDPPreset"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _IDPPreset(ctx context.Context, sel []query.Selection, obj *IDPPreset) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, iDPPresetImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IDPPreset")
		case "name":
			out.Values[i] = ec._IDPPreset_name(ctx, field, obj)
		case "issuer":
			out.Values[i] = ec._IDPPreset_issuer(ctx, field, obj)
		case "jwksUri":
			out.Values[i] = ec._IDPPreset_jwksUri(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _IDPPreset_name(ctx context.Context, field graphql.CollectedField, obj *IDPPreset) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "IDPPreset"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _IDPPreset_issuer(ctx context.Context, field graphql.CollectedField, obj *IDPPreset) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "IDPPreset"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Issuer
	return graphql.MarshalString(res)
}

func (ec *executionContext) _IDPPreset_jwksUri(ctx context.Context, field graphql.CollectedField, obj *IDPPreset) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "IDPPreset"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.JwksUri
	return graphql.MarshalString(res)
}

var limitRangeImplementors = []string{"LimitRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _LimitRange(ctx context.Context, sel []query.Selection, obj *LimitRange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, limitRangeImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitRange")
		case "name":
			out.Values[i] = ec._LimitRange_name(ctx, field, obj)
		case "limits":
			out.Values[i] = ec._LimitRange_limits(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _LimitRange_name(ctx context.Context, field graphql.CollectedField, obj *LimitRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LimitRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _LimitRange_limits(ctx context.Context, field graphql.CollectedField, obj *LimitRange) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LimitRange"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Limits
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._LimitRangeItem(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var limitRangeItemImplementors = []string{"LimitRangeItem"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _LimitRangeItem(ctx context.Context, sel []query.Selection, obj *LimitRangeItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, limitRangeItemImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitRangeItem")
		case "limitType":
			out.Values[i] = ec._LimitRangeItem_limitType(ctx, field, obj)
		case "max":
			out.Values[i] = ec._LimitRangeItem_max(ctx, field, obj)
		case "default":
			out.Values[i] = ec._LimitRangeItem_default(ctx, field, obj)
		case "defaultRequest":
			out.Values[i] = ec._LimitRangeItem_defaultRequest(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _LimitRangeItem_limitType(ctx context.Context, field graphql.CollectedField, obj *LimitRangeItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LimitRangeItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.LimitType
	return res
}

func (ec *executionContext) _LimitRangeItem_max(ctx context.Context, field graphql.CollectedField, obj *LimitRangeItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LimitRangeItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Max
	return ec._ResourceType(ctx, field.Selections, &res)
}

func (ec *executionContext) _LimitRangeItem_default(ctx context.Context, field graphql.CollectedField, obj *LimitRangeItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LimitRangeItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Default
	return ec._ResourceType(ctx, field.Selections, &res)
}

func (ec *executionContext) _LimitRangeItem_defaultRequest(ctx context.Context, field graphql.CollectedField, obj *LimitRangeItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LimitRangeItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DefaultRequest
	return ec._ResourceType(ctx, field.Selections, &res)
}

var localObjectReferenceImplementors = []string{"LocalObjectReference"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _LocalObjectReference(ctx context.Context, sel []query.Selection, obj *LocalObjectReference) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, localObjectReferenceImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocalObjectReference")
		case "kind":
			out.Values[i] = ec._LocalObjectReference_kind(ctx, field, obj)
		case "name":
			out.Values[i] = ec._LocalObjectReference_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _LocalObjectReference_kind(ctx context.Context, field graphql.CollectedField, obj *LocalObjectReference) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LocalObjectReference"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Kind
	return graphql.MarshalString(res)
}

func (ec *executionContext) _LocalObjectReference_name(ctx context.Context, field graphql.CollectedField, obj *LocalObjectReference) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LocalObjectReference"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel []query.Selection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, mutationImplementors, ec.Variables)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createServiceInstance":
			out.Values[i] = ec._Mutation_createServiceInstance(ctx, field)
		case "deleteServiceInstance":
			out.Values[i] = ec._Mutation_deleteServiceInstance(ctx, field)
		case "createServiceBinding":
			out.Values[i] = ec._Mutation_createServiceBinding(ctx, field)
		case "deleteServiceBinding":
			out.Values[i] = ec._Mutation_deleteServiceBinding(ctx, field)
		case "createServiceBindingUsage":
			out.Values[i] = ec._Mutation_createServiceBindingUsage(ctx, field)
		case "deleteServiceBindingUsage":
			out.Values[i] = ec._Mutation_deleteServiceBindingUsage(ctx, field)
		case "enableRemoteEnvironment":
			out.Values[i] = ec._Mutation_enableRemoteEnvironment(ctx, field)
		case "disableRemoteEnvironment":
			out.Values[i] = ec._Mutation_disableRemoteEnvironment(ctx, field)
		case "createIDPPreset":
			out.Values[i] = ec._Mutation_createIDPPreset(ctx, field)
		case "deleteIDPPreset":
			out.Values[i] = ec._Mutation_deleteIDPPreset(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Mutation_createServiceInstance(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 ServiceInstanceCreateInput
	if tmp, ok := field.Args["params"]; ok {
		var err error
		arg0, err = UnmarshalServiceInstanceCreateInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["params"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createServiceInstance(ctx, args["params"].(ServiceInstanceCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceInstance)
	if res == nil {
		return graphql.Null
	}
	return ec._ServiceInstance(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteServiceInstance(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_deleteServiceInstance(ctx, args["name"].(string), args["environment"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceInstance)
	if res == nil {
		return graphql.Null
	}
	return ec._ServiceInstance(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createServiceBinding(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["serviceBindingName"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["serviceBindingName"] = arg0
	var arg1 string
	if tmp, ok := field.Args["serviceInstanceName"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["serviceInstanceName"] = arg1
	var arg2 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg2
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createServiceBinding(ctx, args["serviceBindingName"].(string), args["serviceInstanceName"].(string), args["environment"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CreateServiceBindingOutput)
	if res == nil {
		return graphql.Null
	}
	return ec._CreateServiceBindingOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteServiceBinding(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["serviceBindingName"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["serviceBindingName"] = arg0
	var arg1 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_deleteServiceBinding(ctx, args["serviceBindingName"].(string), args["environment"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*DeleteServiceBindingOutput)
	if res == nil {
		return graphql.Null
	}
	return ec._DeleteServiceBindingOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createServiceBindingUsage(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *CreateServiceBindingUsageInput
	if tmp, ok := field.Args["createServiceBindingUsageInput"]; ok {
		var err error
		var ptr1 CreateServiceBindingUsageInput
		if tmp != nil {
			ptr1, err = UnmarshalCreateServiceBindingUsageInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["createServiceBindingUsageInput"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createServiceBindingUsage(ctx, args["createServiceBindingUsageInput"].(*CreateServiceBindingUsageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceBindingUsage)
	if res == nil {
		return graphql.Null
	}
	return ec._ServiceBindingUsage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteServiceBindingUsage(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["serviceBindingUsageName"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["serviceBindingUsageName"] = arg0
	var arg1 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_deleteServiceBindingUsage(ctx, args["serviceBindingUsageName"].(string), args["environment"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*DeleteServiceBindingUsageOutput)
	if res == nil {
		return graphql.Null
	}
	return ec._DeleteServiceBindingUsageOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_enableRemoteEnvironment(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["remoteEnvironment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["remoteEnvironment"] = arg0
	var arg1 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_enableRemoteEnvironment(ctx, args["remoteEnvironment"].(string), args["environment"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*EnvironmentMapping)
	if res == nil {
		return graphql.Null
	}
	return ec._EnvironmentMapping(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_disableRemoteEnvironment(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["remoteEnvironment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["remoteEnvironment"] = arg0
	var arg1 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_disableRemoteEnvironment(ctx, args["remoteEnvironment"].(string), args["environment"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*EnvironmentMapping)
	if res == nil {
		return graphql.Null
	}
	return ec._EnvironmentMapping(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createIDPPreset(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := field.Args["issuer"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["issuer"] = arg1
	var arg2 string
	if tmp, ok := field.Args["jwksUri"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["jwksUri"] = arg2
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createIDPPreset(ctx, args["name"].(string), args["issuer"].(string), args["jwksUri"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*IDPPreset)
	if res == nil {
		return graphql.Null
	}
	return ec._IDPPreset(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteIDPPreset(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_deleteIDPPreset(ctx, args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*IDPPreset)
	if res == nil {
		return graphql.Null
	}
	return ec._IDPPreset(ctx, field.Selections, res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel []query.Selection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, queryImplementors, ec.Variables)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "serviceInstance":
			out.Values[i] = ec._Query_serviceInstance(ctx, field)
		case "serviceInstances":
			out.Values[i] = ec._Query_serviceInstances(ctx, field)
		case "serviceClasses":
			out.Values[i] = ec._Query_serviceClasses(ctx, field)
		case "serviceClass":
			out.Values[i] = ec._Query_serviceClass(ctx, field)
		case "serviceBrokers":
			out.Values[i] = ec._Query_serviceBrokers(ctx, field)
		case "serviceBroker":
			out.Values[i] = ec._Query_serviceBroker(ctx, field)
		case "serviceBindingUsage":
			out.Values[i] = ec._Query_serviceBindingUsage(ctx, field)
		case "serviceBinding":
			out.Values[i] = ec._Query_serviceBinding(ctx, field)
		case "usageKinds":
			out.Values[i] = ec._Query_usageKinds(ctx, field)
		case "usageKindResources":
			out.Values[i] = ec._Query_usageKindResources(ctx, field)
		case "apis":
			out.Values[i] = ec._Query_apis(ctx, field)
		case "remoteEnvironment":
			out.Values[i] = ec._Query_remoteEnvironment(ctx, field)
		case "remoteEnvironments":
			out.Values[i] = ec._Query_remoteEnvironments(ctx, field)
		case "connectorService":
			out.Values[i] = ec._Query_connectorService(ctx, field)
		case "environments":
			out.Values[i] = ec._Query_environments(ctx, field)
		case "deployments":
			out.Values[i] = ec._Query_deployments(ctx, field)
		case "resourceQuotas":
			out.Values[i] = ec._Query_resourceQuotas(ctx, field)
		case "resourceQuotaStatus":
			out.Values[i] = ec._Query_resourceQuotaStatus(ctx, field)
		case "functions":
			out.Values[i] = ec._Query_functions(ctx, field)
		case "content":
			out.Values[i] = ec._Query_content(ctx, field)
		case "topics":
			out.Values[i] = ec._Query_topics(ctx, field)
		case "eventActivations":
			out.Values[i] = ec._Query_eventActivations(ctx, field)
		case "limitRanges":
			out.Values[i] = ec._Query_limitRanges(ctx, field)
		case "IDPPreset":
			out.Values[i] = ec._Query_IDPPreset(ctx, field)
		case "IDPPresets":
			out.Values[i] = ec._Query_IDPPresets(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Query_serviceInstance(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_serviceInstance(ctx, args["name"].(string), args["environment"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*ServiceInstance)
		if res == nil {
			return graphql.Null
		}
		return ec._ServiceInstance(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_serviceInstances(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg0
	var arg1 *int
	if tmp, ok := field.Args["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg2
	var arg3 *InstanceStatusType
	if tmp, ok := field.Args["status"]; ok {
		var err error
		var ptr1 InstanceStatusType
		if tmp != nil {
			err = (&ptr1).UnmarshalGQL(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["status"] = arg3
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_serviceInstances(ctx, args["environment"].(string), args["first"].(*int), args["offset"].(*int), args["status"].(*InstanceStatusType))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]ServiceInstance)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ServiceInstance(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_serviceClasses(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := field.Args["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_serviceClasses(ctx, args["first"].(*int), args["offset"].(*int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]ServiceClass)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ServiceClass(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_serviceClass(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_serviceClass(ctx, args["name"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*ServiceClass)
		if res == nil {
			return graphql.Null
		}
		return ec._ServiceClass(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_serviceBrokers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := field.Args["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_serviceBrokers(ctx, args["first"].(*int), args["offset"].(*int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]ServiceBroker)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ServiceBroker(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_serviceBroker(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_serviceBroker(ctx, args["name"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*ServiceBroker)
		if res == nil {
			return graphql.Null
		}
		return ec._ServiceBroker(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_serviceBindingUsage(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_serviceBindingUsage(ctx, args["name"].(string), args["environment"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*ServiceBindingUsage)
		if res == nil {
			return graphql.Null
		}
		return ec._ServiceBindingUsage(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_serviceBinding(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_serviceBinding(ctx, args["name"].(string), args["environment"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*ServiceBinding)
		if res == nil {
			return graphql.Null
		}
		return ec._ServiceBinding(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_usageKinds(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := field.Args["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_usageKinds(ctx, args["first"].(*int), args["offset"].(*int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]UsageKind)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._UsageKind(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_usageKindResources(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["usageKind"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["usageKind"] = arg0
	var arg1 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_usageKindResources(ctx, args["usageKind"].(string), args["environment"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]UsageKindResource)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._UsageKindResource(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_apis(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg0
	var arg1 *string
	if tmp, ok := field.Args["serviceName"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["serviceName"] = arg1
	var arg2 *string
	if tmp, ok := field.Args["hostname"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["hostname"] = arg2
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_apis(ctx, args["environment"].(string), args["serviceName"].(*string), args["hostname"].(*string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]API)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._API(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_remoteEnvironment(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_remoteEnvironment(ctx, args["name"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*RemoteEnvironment)
		if res == nil {
			return graphql.Null
		}
		return ec._RemoteEnvironment(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_remoteEnvironments(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg0
	var arg1 *int
	if tmp, ok := field.Args["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg2
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_remoteEnvironments(ctx, args["environment"].(*string), args["first"].(*int), args["offset"].(*int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]RemoteEnvironment)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._RemoteEnvironment(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_connectorService(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["remoteEnvironment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["remoteEnvironment"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_connectorService(ctx, args["remoteEnvironment"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(ConnectorService)
		return ec._ConnectorService(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_environments(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := field.Args["remoteEnvironment"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["remoteEnvironment"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_environments(ctx, args["remoteEnvironment"].(*string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Environment)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Environment(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_deployments(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg0
	var arg1 *bool
	if tmp, ok := field.Args["excludeFunctions"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["excludeFunctions"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_deployments(ctx, args["environment"].(string), args["excludeFunctions"].(*bool))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Deployment)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Deployment(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_resourceQuotas(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_resourceQuotas(ctx, args["environment"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]ResourceQuota)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ResourceQuota(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_resourceQuotaStatus(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_resourceQuotaStatus(ctx, args["environment"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(ResourceQuotaStatus)
		return ec._ResourceQuotaStatus(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_functions(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg0
	var arg1 *int
	if tmp, ok := field.Args["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg2
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_functions(ctx, args["environment"].(string), args["first"].(*int), args["offset"].(*int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Function)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Function(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_content(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["contentType"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["contentType"] = arg0
	var arg1 string
	if tmp, ok := field.Args["id"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_content(ctx, args["contentType"].(string), args["id"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*JSON)
		if res == nil {
			return graphql.Null
		}
		return *res
	})
}

func (ec *executionContext) _Query_topics(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 []InputTopic
	if tmp, ok := field.Args["input"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			rawIf1 = tmp.([]interface{})
		}
		arg0 = make([]InputTopic, len(rawIf1))
		for idx1 := range rawIf1 {
			arg0[idx1], err = UnmarshalInputTopic(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["input"] = arg0
	var arg1 *bool
	if tmp, ok := field.Args["internal"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["internal"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_topics(ctx, args["input"].([]InputTopic), args["internal"].(*bool))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]TopicEntry)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._TopicEntry(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_eventActivations(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_eventActivations(ctx, args["environment"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]EventActivation)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._EventActivation(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_limitRanges(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["environment"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_limitRanges(ctx, args["environment"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]LimitRange)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._LimitRange(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_IDPPreset(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_IDPPreset(ctx, args["name"].(string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*IDPPreset)
		if res == nil {
			return graphql.Null
		}
		return ec._IDPPreset(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_IDPPresets(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := field.Args["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := field.Args["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["offset"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_IDPPresets(ctx, args["first"].(*int), args["offset"].(*int))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]IDPPreset)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._IDPPreset(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := ec.introspectSchema()
	if res == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := ec.introspectType(args["name"].(string))
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

var remoteEnvironmentImplementors = []string{"RemoteEnvironment"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _RemoteEnvironment(ctx context.Context, sel []query.Selection, obj *RemoteEnvironment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, remoteEnvironmentImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoteEnvironment")
		case "name":
			out.Values[i] = ec._RemoteEnvironment_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._RemoteEnvironment_description(ctx, field, obj)
		case "source":
			out.Values[i] = ec._RemoteEnvironment_source(ctx, field, obj)
		case "services":
			out.Values[i] = ec._RemoteEnvironment_services(ctx, field, obj)
		case "enabledInEnvironments":
			out.Values[i] = ec._RemoteEnvironment_enabledInEnvironments(ctx, field, obj)
		case "status":
			out.Values[i] = ec._RemoteEnvironment_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _RemoteEnvironment_name(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironment) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironment"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _RemoteEnvironment_description(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironment) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironment"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description
	return graphql.MarshalString(res)
}

func (ec *executionContext) _RemoteEnvironment_source(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironment) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironment"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Source
	return ec._RemoteEnvironmentSource(ctx, field.Selections, &res)
}

func (ec *executionContext) _RemoteEnvironment_services(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironment) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironment"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Services
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._RemoteEnvironmentService(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _RemoteEnvironment_enabledInEnvironments(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironment) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "RemoteEnvironment",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.RemoteEnvironment_enabledInEnvironments(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]string)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return graphql.MarshalString(res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _RemoteEnvironment_status(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironment) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "RemoteEnvironment",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.RemoteEnvironment_status(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(RemoteEnvironmentStatus)
		return res
	})
}

var remoteEnvironmentEntryImplementors = []string{"RemoteEnvironmentEntry"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _RemoteEnvironmentEntry(ctx context.Context, sel []query.Selection, obj *RemoteEnvironmentEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, remoteEnvironmentEntryImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoteEnvironmentEntry")
		case "type":
			out.Values[i] = ec._RemoteEnvironmentEntry_type(ctx, field, obj)
		case "gatewayUrl":
			out.Values[i] = ec._RemoteEnvironmentEntry_gatewayUrl(ctx, field, obj)
		case "accessLabel":
			out.Values[i] = ec._RemoteEnvironmentEntry_accessLabel(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _RemoteEnvironmentEntry_type(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironmentEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type
	return graphql.MarshalString(res)
}

func (ec *executionContext) _RemoteEnvironmentEntry_gatewayUrl(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironmentEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.GatewayUrl
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _RemoteEnvironmentEntry_accessLabel(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironmentEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AccessLabel
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var remoteEnvironmentServiceImplementors = []string{"RemoteEnvironmentService"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _RemoteEnvironmentService(ctx context.Context, sel []query.Selection, obj *RemoteEnvironmentService) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, remoteEnvironmentServiceImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoteEnvironmentService")
		case "id":
			out.Values[i] = ec._RemoteEnvironmentService_id(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._RemoteEnvironmentService_displayName(ctx, field, obj)
		case "longDescription":
			out.Values[i] = ec._RemoteEnvironmentService_longDescription(ctx, field, obj)
		case "providerDisplayName":
			out.Values[i] = ec._RemoteEnvironmentService_providerDisplayName(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._RemoteEnvironmentService_tags(ctx, field, obj)
		case "entries":
			out.Values[i] = ec._RemoteEnvironmentService_entries(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _RemoteEnvironmentService_id(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentService) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironmentService"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalString(res)
}

func (ec *executionContext) _RemoteEnvironmentService_displayName(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentService) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironmentService"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DisplayName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _RemoteEnvironmentService_longDescription(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentService) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironmentService"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.LongDescription
	return graphql.MarshalString(res)
}

func (ec *executionContext) _RemoteEnvironmentService_providerDisplayName(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentService) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironmentService"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ProviderDisplayName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _RemoteEnvironmentService_tags(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentService) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironmentService"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Tags
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _RemoteEnvironmentService_entries(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentService) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironmentService"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Entries
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._RemoteEnvironmentEntry(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var remoteEnvironmentSourceImplementors = []string{"RemoteEnvironmentSource"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _RemoteEnvironmentSource(ctx context.Context, sel []query.Selection, obj *RemoteEnvironmentSource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, remoteEnvironmentSourceImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoteEnvironmentSource")
		case "environment":
			out.Values[i] = ec._RemoteEnvironmentSource_environment(ctx, field, obj)
		case "type":
			out.Values[i] = ec._RemoteEnvironmentSource_type(ctx, field, obj)
		case "namespace":
			out.Values[i] = ec._RemoteEnvironmentSource_namespace(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _RemoteEnvironmentSource_environment(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentSource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironmentSource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Environment
	return graphql.MarshalString(res)
}

func (ec *executionContext) _RemoteEnvironmentSource_type(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentSource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironmentSource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type
	return graphql.MarshalString(res)
}

func (ec *executionContext) _RemoteEnvironmentSource_namespace(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentSource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "RemoteEnvironmentSource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Namespace
	return graphql.MarshalString(res)
}

var resourceQuotaImplementors = []string{"ResourceQuota"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ResourceQuota(ctx context.Context, sel []query.Selection, obj *ResourceQuota) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, resourceQuotaImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceQuota")
		case "name":
			out.Values[i] = ec._ResourceQuota_name(ctx, field, obj)
		case "pods":
			out.Values[i] = ec._ResourceQuota_pods(ctx, field, obj)
		case "limits":
			out.Values[i] = ec._ResourceQuota_limits(ctx, field, obj)
		case "requests":
			out.Values[i] = ec._ResourceQuota_requests(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ResourceQuota_name(ctx context.Context, field graphql.CollectedField, obj *ResourceQuota) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ResourceQuota"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ResourceQuota_pods(ctx context.Context, field graphql.CollectedField, obj *ResourceQuota) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ResourceQuota"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Pods
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _ResourceQuota_limits(ctx context.Context, field graphql.CollectedField, obj *ResourceQuota) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ResourceQuota"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Limits
	return ec._ResourceValues(ctx, field.Selections, &res)
}

func (ec *executionContext) _ResourceQuota_requests(ctx context.Context, field graphql.CollectedField, obj *ResourceQuota) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ResourceQuota"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Requests
	return ec._ResourceValues(ctx, field.Selections, &res)
}

var resourceQuotaStatusImplementors = []string{"ResourceQuotaStatus"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ResourceQuotaStatus(ctx context.Context, sel []query.Selection, obj *ResourceQuotaStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, resourceQuotaStatusImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceQuotaStatus")
		case "exceeded":
			out.Values[i] = ec._ResourceQuotaStatus_exceeded(ctx, field, obj)
		case "message":
			out.Values[i] = ec._ResourceQuotaStatus_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ResourceQuotaStatus_exceeded(ctx context.Context, field graphql.CollectedField, obj *ResourceQuotaStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ResourceQuotaStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Exceeded
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _ResourceQuotaStatus_message(ctx context.Context, field graphql.CollectedField, obj *ResourceQuotaStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ResourceQuotaStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Message
	return graphql.MarshalString(res)
}

var resourceTypeImplementors = []string{"ResourceType"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ResourceType(ctx context.Context, sel []query.Selection, obj *ResourceType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, resourceTypeImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceType")
		case "memory":
			out.Values[i] = ec._ResourceType_memory(ctx, field, obj)
		case "cpu":
			out.Values[i] = ec._ResourceType_cpu(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ResourceType_memory(ctx context.Context, field graphql.CollectedField, obj *ResourceType) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ResourceType"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Memory
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _ResourceType_cpu(ctx context.Context, field graphql.CollectedField, obj *ResourceType) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ResourceType"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Cpu
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var resourceValuesImplementors = []string{"ResourceValues"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ResourceValues(ctx context.Context, sel []query.Selection, obj *ResourceValues) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, resourceValuesImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceValues")
		case "memory":
			out.Values[i] = ec._ResourceValues_memory(ctx, field, obj)
		case "cpu":
			out.Values[i] = ec._ResourceValues_cpu(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ResourceValues_memory(ctx context.Context, field graphql.CollectedField, obj *ResourceValues) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ResourceValues"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Memory
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _ResourceValues_cpu(ctx context.Context, field graphql.CollectedField, obj *ResourceValues) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ResourceValues"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Cpu
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var secretImplementors = []string{"Secret"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Secret(ctx context.Context, sel []query.Selection, obj *Secret) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, secretImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Secret")
		case "name":
			out.Values[i] = ec._Secret_name(ctx, field, obj)
		case "environment":
			out.Values[i] = ec._Secret_environment(ctx, field, obj)
		case "data":
			out.Values[i] = ec._Secret_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Secret_name(ctx context.Context, field graphql.CollectedField, obj *Secret) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Secret"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Secret_environment(ctx context.Context, field graphql.CollectedField, obj *Secret) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Secret"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Environment
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Secret_data(ctx context.Context, field graphql.CollectedField, obj *Secret) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Secret"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Data
	return res
}

var sectionImplementors = []string{"Section"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Section(ctx context.Context, sel []query.Selection, obj *Section) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, sectionImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Section")
		case "titles":
			out.Values[i] = ec._Section_titles(ctx, field, obj)
		case "topicType":
			out.Values[i] = ec._Section_topicType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Section_titles(ctx context.Context, field graphql.CollectedField, obj *Section) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Section"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Titles
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Title(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Section_topicType(ctx context.Context, field graphql.CollectedField, obj *Section) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Section"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TopicType
	return graphql.MarshalString(res)
}

var serviceImplementors = []string{"Service"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Service(ctx context.Context, sel []query.Selection, obj *Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, serviceImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Service")
		case "name":
			out.Values[i] = ec._Service_name(ctx, field, obj)
		case "port":
			out.Values[i] = ec._Service_port(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Service_name(ctx context.Context, field graphql.CollectedField, obj *Service) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Service"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Service_port(ctx context.Context, field graphql.CollectedField, obj *Service) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Service"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Port
	return graphql.MarshalInt(res)
}

var serviceBindingImplementors = []string{"ServiceBinding"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBinding(ctx context.Context, sel []query.Selection, obj *ServiceBinding) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, serviceBindingImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBinding")
		case "name":
			out.Values[i] = ec._ServiceBinding_name(ctx, field, obj)
		case "serviceInstanceName":
			out.Values[i] = ec._ServiceBinding_serviceInstanceName(ctx, field, obj)
		case "environment":
			out.Values[i] = ec._ServiceBinding_environment(ctx, field, obj)
		case "secret":
			out.Values[i] = ec._ServiceBinding_secret(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ServiceBinding_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ServiceBinding_name(ctx context.Context, field graphql.CollectedField, obj *ServiceBinding) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBinding"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceBinding_serviceInstanceName(ctx context.Context, field graphql.CollectedField, obj *ServiceBinding) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBinding"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ServiceInstanceName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceBinding_environment(ctx context.Context, field graphql.CollectedField, obj *ServiceBinding) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBinding"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Environment
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceBinding_secret(ctx context.Context, field graphql.CollectedField, obj *ServiceBinding) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ServiceBinding",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ServiceBinding_secret(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*Secret)
		if res == nil {
			return graphql.Null
		}
		return ec._Secret(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _ServiceBinding_status(ctx context.Context, field graphql.CollectedField, obj *ServiceBinding) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBinding"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Status
	return ec._ServiceBindingStatus(ctx, field.Selections, &res)
}

var serviceBindingStatusImplementors = []string{"ServiceBindingStatus"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBindingStatus(ctx context.Context, sel []query.Selection, obj *ServiceBindingStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, serviceBindingStatusImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBindingStatus")
		case "type":
			out.Values[i] = ec._ServiceBindingStatus_type(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._ServiceBindingStatus_reason(ctx, field, obj)
		case "message":
			out.Values[i] = ec._ServiceBindingStatus_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ServiceBindingStatus_type(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBindingStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type
	return res
}

func (ec *executionContext) _ServiceBindingStatus_reason(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBindingStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Reason
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceBindingStatus_message(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBindingStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Message
	return graphql.MarshalString(res)
}

var serviceBindingUsageImplementors = []string{"ServiceBindingUsage"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBindingUsage(ctx context.Context, sel []query.Selection, obj *ServiceBindingUsage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, serviceBindingUsageImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBindingUsage")
		case "name":
			out.Values[i] = ec._ServiceBindingUsage_name(ctx, field, obj)
		case "environment":
			out.Values[i] = ec._ServiceBindingUsage_environment(ctx, field, obj)
		case "serviceBinding":
			out.Values[i] = ec._ServiceBindingUsage_serviceBinding(ctx, field, obj)
		case "usedBy":
			out.Values[i] = ec._ServiceBindingUsage_usedBy(ctx, field, obj)
		case "parameters":
			out.Values[i] = ec._ServiceBindingUsage_parameters(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ServiceBindingUsage_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ServiceBindingUsage_name(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsage) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBindingUsage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceBindingUsage_environment(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsage) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBindingUsage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Environment
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceBindingUsage_serviceBinding(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsage) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ServiceBindingUsage",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ServiceBindingUsage_serviceBinding(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*ServiceBinding)
		if res == nil {
			return graphql.Null
		}
		return ec._ServiceBinding(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _ServiceBindingUsage_usedBy(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsage) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBindingUsage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UsedBy
	return ec._LocalObjectReference(ctx, field.Selections, &res)
}

func (ec *executionContext) _ServiceBindingUsage_parameters(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsage) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBindingUsage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Parameters
	if res == nil {
		return graphql.Null
	}
	return ec._ServiceBindingUsageParameters(ctx, field.Selections, res)
}

func (ec *executionContext) _ServiceBindingUsage_status(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsage) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBindingUsage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Status
	return ec._ServiceBindingUsageStatus(ctx, field.Selections, &res)
}

var serviceBindingUsageParametersImplementors = []string{"ServiceBindingUsageParameters"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBindingUsageParameters(ctx context.Context, sel []query.Selection, obj *ServiceBindingUsageParameters) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, serviceBindingUsageParametersImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBindingUsageParameters")
		case "envPrefix":
			out.Values[i] = ec._ServiceBindingUsageParameters_envPrefix(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ServiceBindingUsageParameters_envPrefix(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsageParameters) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBindingUsageParameters"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EnvPrefix
	if res == nil {
		return graphql.Null
	}
	return ec._EnvPrefix(ctx, field.Selections, res)
}

var serviceBindingUsageStatusImplementors = []string{"ServiceBindingUsageStatus"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBindingUsageStatus(ctx context.Context, sel []query.Selection, obj *ServiceBindingUsageStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, serviceBindingUsageStatusImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBindingUsageStatus")
		case "type":
			out.Values[i] = ec._ServiceBindingUsageStatus_type(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._ServiceBindingUsageStatus_reason(ctx, field, obj)
		case "message":
			out.Values[i] = ec._ServiceBindingUsageStatus_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ServiceBindingUsageStatus_type(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsageStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBindingUsageStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type
	return res
}

func (ec *executionContext) _ServiceBindingUsageStatus_reason(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsageStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBindingUsageStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Reason
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceBindingUsageStatus_message(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsageStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBindingUsageStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Message
	return graphql.MarshalString(res)
}

var serviceBrokerImplementors = []string{"ServiceBroker"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBroker(ctx context.Context, sel []query.Selection, obj *ServiceBroker) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, serviceBrokerImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBroker")
		case "name":
			out.Values[i] = ec._ServiceBroker_name(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ServiceBroker_status(ctx, field, obj)
		case "creationTimestamp":
			out.Values[i] = ec._ServiceBroker_creationTimestamp(ctx, field, obj)
		case "url":
			out.Values[i] = ec._ServiceBroker_url(ctx, field, obj)
		case "labels":
			out.Values[i] = ec._ServiceBroker_labels(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ServiceBroker_name(ctx context.Context, field graphql.CollectedField, obj *ServiceBroker) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBroker"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceBroker_status(ctx context.Context, field graphql.CollectedField, obj *ServiceBroker) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBroker"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Status
	return ec._ServiceBrokerStatus(ctx, field.Selections, &res)
}

func (ec *executionContext) _ServiceBroker_creationTimestamp(ctx context.Context, field graphql.CollectedField, obj *ServiceBroker) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBroker"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreationTimestamp
	return MarshalTimestamp(res)
}

func (ec *executionContext) _ServiceBroker_url(ctx context.Context, field graphql.CollectedField, obj *ServiceBroker) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBroker"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Url
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceBroker_labels(ctx context.Context, field graphql.CollectedField, obj *ServiceBroker) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBroker"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Labels
	return res
}

var serviceBrokerStatusImplementors = []string{"ServiceBrokerStatus"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBrokerStatus(ctx context.Context, sel []query.Selection, obj *ServiceBrokerStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, serviceBrokerStatusImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBrokerStatus")
		case "ready":
			out.Values[i] = ec._ServiceBrokerStatus_ready(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._ServiceBrokerStatus_reason(ctx, field, obj)
		case "message":
			out.Values[i] = ec._ServiceBrokerStatus_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ServiceBrokerStatus_ready(ctx context.Context, field graphql.CollectedField, obj *ServiceBrokerStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBrokerStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Ready
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _ServiceBrokerStatus_reason(ctx context.Context, field graphql.CollectedField, obj *ServiceBrokerStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBrokerStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Reason
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceBrokerStatus_message(ctx context.Context, field graphql.CollectedField, obj *ServiceBrokerStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceBrokerStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Message
	return graphql.MarshalString(res)
}

var serviceClassImplementors = []string{"ServiceClass"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceClass(ctx context.Context, sel []query.Selection, obj *ServiceClass) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, serviceClassImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceClass")
		case "name":
			out.Values[i] = ec._ServiceClass_name(ctx, field, obj)
		case "externalName":
			out.Values[i] = ec._ServiceClass_externalName(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._ServiceClass_displayName(ctx, field, obj)
		case "creationTimestamp":
			out.Values[i] = ec._ServiceClass_creationTimestamp(ctx, field, obj)
		case "description":
			out.Values[i] = ec._ServiceClass_description(ctx, field, obj)
		case "longDescription":
			out.Values[i] = ec._ServiceClass_longDescription(ctx, field, obj)
		case "imageUrl":
			out.Values[i] = ec._ServiceClass_imageUrl(ctx, field, obj)
		case "documentationUrl":
			out.Values[i] = ec._ServiceClass_documentationUrl(ctx, field, obj)
		case "providerDisplayName":
			out.Values[i] = ec._ServiceClass_providerDisplayName(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._ServiceClass_tags(ctx, field, obj)
		case "plans":
			out.Values[i] = ec._ServiceClass_plans(ctx, field, obj)
		case "activated":
			out.Values[i] = ec._ServiceClass_activated(ctx, field, obj)
		case "apiSpec":
			out.Values[i] = ec._ServiceClass_apiSpec(ctx, field, obj)
		case "asyncApiSpec":
			out.Values[i] = ec._ServiceClass_asyncApiSpec(ctx, field, obj)
		case "content":
			out.Values[i] = ec._ServiceClass_content(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ServiceClass_name(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceClass"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceClass_externalName(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceClass"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ExternalName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceClass_displayName(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceClass"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DisplayName
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _ServiceClass_creationTimestamp(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceClass"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreationTimestamp
	return MarshalTimestamp(res)
}

func (ec *executionContext) _ServiceClass_description(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceClass"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceClass_longDescription(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceClass"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.LongDescription
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _ServiceClass_imageUrl(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceClass"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ImageUrl
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _ServiceClass_documentationUrl(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceClass"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DocumentationUrl
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _ServiceClass_providerDisplayName(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceClass"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ProviderDisplayName
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _ServiceClass_tags(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceClass"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Tags
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _ServiceClass_plans(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ServiceClass_plans(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]ServicePlan)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ServicePlan(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _ServiceClass_activated(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ServiceClass_activated(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(bool)
		return graphql.MarshalBoolean(res)
	})
}

func (ec *executionContext) _ServiceClass_apiSpec(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ServiceClass_apiSpec(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*JSON)
		if res == nil {
			return graphql.Null
		}
		return *res
	})
}

func (ec *executionContext) _ServiceClass_asyncApiSpec(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ServiceClass_asyncApiSpec(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*JSON)
		if res == nil {
			return graphql.Null
		}
		return *res
	})
}

func (ec *executionContext) _ServiceClass_content(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ServiceClass_content(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*JSON)
		if res == nil {
			return graphql.Null
		}
		return *res
	})
}

var serviceInstanceImplementors = []string{"ServiceInstance"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceInstance(ctx context.Context, sel []query.Selection, obj *ServiceInstance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, serviceInstanceImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceInstance")
		case "name":
			out.Values[i] = ec._ServiceInstance_name(ctx, field, obj)
		case "environment":
			out.Values[i] = ec._ServiceInstance_environment(ctx, field, obj)
		case "serviceClassName":
			out.Values[i] = ec._ServiceInstance_serviceClassName(ctx, field, obj)
		case "ServiceClassDisplayName":
			out.Values[i] = ec._ServiceInstance_ServiceClassDisplayName(ctx, field, obj)
		case "servicePlanName":
			out.Values[i] = ec._ServiceInstance_servicePlanName(ctx, field, obj)
		case "servicePlanDisplayName":
			out.Values[i] = ec._ServiceInstance_servicePlanDisplayName(ctx, field, obj)
		case "creationTimestamp":
			out.Values[i] = ec._ServiceInstance_creationTimestamp(ctx, field, obj)
		case "labels":
			out.Values[i] = ec._ServiceInstance_labels(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ServiceInstance_status(ctx, field, obj)
		case "servicePlan":
			out.Values[i] = ec._ServiceInstance_servicePlan(ctx, field, obj)
		case "serviceClass":
			out.Values[i] = ec._ServiceInstance_serviceClass(ctx, field, obj)
		case "bindable":
			out.Values[i] = ec._ServiceInstance_bindable(ctx, field, obj)
		case "serviceBindings":
			out.Values[i] = ec._ServiceInstance_serviceBindings(ctx, field, obj)
		case "serviceBindingUsages":
			out.Values[i] = ec._ServiceInstance_serviceBindingUsages(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ServiceInstance_name(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstance"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceInstance_environment(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstance"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Environment
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceInstance_serviceClassName(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstance"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ServiceClassName
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _ServiceInstance_ServiceClassDisplayName(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstance"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ServiceClassDisplayName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceInstance_servicePlanName(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstance"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ServicePlanName
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _ServiceInstance_servicePlanDisplayName(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstance"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ServicePlanDisplayName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceInstance_creationTimestamp(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstance"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreationTimestamp
	return MarshalTimestamp(res)
}

func (ec *executionContext) _ServiceInstance_labels(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstance"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Labels
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _ServiceInstance_status(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstance"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Status
	return ec._ServiceInstanceStatus(ctx, field.Selections, &res)
}

func (ec *executionContext) _ServiceInstance_servicePlan(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ServiceInstance_servicePlan(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*ServicePlan)
		if res == nil {
			return graphql.Null
		}
		return ec._ServicePlan(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _ServiceInstance_serviceClass(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ServiceInstance_serviceClass(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*ServiceClass)
		if res == nil {
			return graphql.Null
		}
		return ec._ServiceClass(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _ServiceInstance_bindable(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ServiceInstance_bindable(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(bool)
		return graphql.MarshalBoolean(res)
	})
}

func (ec *executionContext) _ServiceInstance_serviceBindings(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ServiceInstance_serviceBindings(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]ServiceBinding)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ServiceBinding(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _ServiceInstance_serviceBindingUsages(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ServiceInstance_serviceBindingUsages(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]ServiceBindingUsage)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ServiceBindingUsage(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

var serviceInstanceEventImplementors = []string{"ServiceInstanceEvent"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceInstanceEvent(ctx context.Context, sel []query.Selection, obj *ServiceInstanceEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, serviceInstanceEventImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceInstanceEvent")
		case "type":
			out.Values[i] = ec._ServiceInstanceEvent_type(ctx, field, obj)
		case "instance":
			out.Values[i] = ec._ServiceInstanceEvent_instance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ServiceInstanceEvent_type(ctx context.Context, field graphql.CollectedField, obj *ServiceInstanceEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstanceEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type
	return res
}

func (ec *executionContext) _ServiceInstanceEvent_instance(ctx context.Context, field graphql.CollectedField, obj *ServiceInstanceEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstanceEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Instance
	return ec._ServiceInstance(ctx, field.Selections, &res)
}

var serviceInstanceStatusImplementors = []string{"ServiceInstanceStatus"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceInstanceStatus(ctx context.Context, sel []query.Selection, obj *ServiceInstanceStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, serviceInstanceStatusImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceInstanceStatus")
		case "type":
			out.Values[i] = ec._ServiceInstanceStatus_type(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._ServiceInstanceStatus_reason(ctx, field, obj)
		case "message":
			out.Values[i] = ec._ServiceInstanceStatus_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ServiceInstanceStatus_type(ctx context.Context, field graphql.CollectedField, obj *ServiceInstanceStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstanceStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type
	return res
}

func (ec *executionContext) _ServiceInstanceStatus_reason(ctx context.Context, field graphql.CollectedField, obj *ServiceInstanceStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstanceStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Reason
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServiceInstanceStatus_message(ctx context.Context, field graphql.CollectedField, obj *ServiceInstanceStatus) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceInstanceStatus"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Message
	return graphql.MarshalString(res)
}

var servicePlanImplementors = []string{"ServicePlan"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServicePlan(ctx context.Context, sel []query.Selection, obj *ServicePlan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, servicePlanImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServicePlan")
		case "name":
			out.Values[i] = ec._ServicePlan_name(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._ServicePlan_displayName(ctx, field, obj)
		case "externalName":
			out.Values[i] = ec._ServicePlan_externalName(ctx, field, obj)
		case "description":
			out.Values[i] = ec._ServicePlan_description(ctx, field, obj)
		case "relatedServiceClassName":
			out.Values[i] = ec._ServicePlan_relatedServiceClassName(ctx, field, obj)
		case "instanceCreateParameterSchema":
			out.Values[i] = ec._ServicePlan_instanceCreateParameterSchema(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ServicePlan_name(ctx context.Context, field graphql.CollectedField, obj *ServicePlan) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServicePlan"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServicePlan_displayName(ctx context.Context, field graphql.CollectedField, obj *ServicePlan) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServicePlan"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DisplayName
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _ServicePlan_externalName(ctx context.Context, field graphql.CollectedField, obj *ServicePlan) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServicePlan"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ExternalName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServicePlan_description(ctx context.Context, field graphql.CollectedField, obj *ServicePlan) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServicePlan"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServicePlan_relatedServiceClassName(ctx context.Context, field graphql.CollectedField, obj *ServicePlan) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServicePlan"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.RelatedServiceClassName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ServicePlan_instanceCreateParameterSchema(ctx context.Context, field graphql.CollectedField, obj *ServicePlan) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServicePlan"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.InstanceCreateParameterSchema
	if res == nil {
		return graphql.Null
	}
	return *res
}

var subscriptionImplementors = []string{"Subscription"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Subscription(ctx context.Context, sel []query.Selection) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, subscriptionImplementors, ec.Variables)
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "serviceInstanceEvent":
		return ec._Subscription_serviceInstanceEvent(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

func (ec *executionContext) _Subscription_serviceInstanceEvent(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return nil
		}
	}
	args["environment"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{Field: field})
	results, err := ec.resolvers.Subscription_serviceInstanceEvent(ctx, args["environment"].(string))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler { return ec._ServiceInstanceEvent(ctx, field.Selections, &res) }())
		return &out
	}
}

var titleImplementors = []string{"Title"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Title(ctx context.Context, sel []query.Selection, obj *Title) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, titleImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Title")
		case "name":
			out.Values[i] = ec._Title_name(ctx, field, obj)
		case "anchor":
			out.Values[i] = ec._Title_anchor(ctx, field, obj)
		case "titles":
			out.Values[i] = ec._Title_titles(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Title_name(ctx context.Context, field graphql.CollectedField, obj *Title) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Title"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Title_anchor(ctx context.Context, field graphql.CollectedField, obj *Title) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Title"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Anchor
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Title_titles(ctx context.Context, field graphql.CollectedField, obj *Title) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Title"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Titles
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Title(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var topicEntryImplementors = []string{"TopicEntry"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _TopicEntry(ctx context.Context, sel []query.Selection, obj *TopicEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, topicEntryImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopicEntry")
		case "contentType":
			out.Values[i] = ec._TopicEntry_contentType(ctx, field, obj)
		case "id":
			out.Values[i] = ec._TopicEntry_id(ctx, field, obj)
		case "sections":
			out.Values[i] = ec._TopicEntry_sections(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _TopicEntry_contentType(ctx context.Context, field graphql.CollectedField, obj *TopicEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TopicEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ContentType
	return graphql.MarshalString(res)
}

func (ec *executionContext) _TopicEntry_id(ctx context.Context, field graphql.CollectedField, obj *TopicEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TopicEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalString(res)
}

func (ec *executionContext) _TopicEntry_sections(ctx context.Context, field graphql.CollectedField, obj *TopicEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TopicEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Sections
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Section(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var usageKindImplementors = []string{"UsageKind"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _UsageKind(ctx context.Context, sel []query.Selection, obj *UsageKind) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, usageKindImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UsageKind")
		case "name":
			out.Values[i] = ec._UsageKind_name(ctx, field, obj)
		case "group":
			out.Values[i] = ec._UsageKind_group(ctx, field, obj)
		case "kind":
			out.Values[i] = ec._UsageKind_kind(ctx, field, obj)
		case "version":
			out.Values[i] = ec._UsageKind_version(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._UsageKind_displayName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _UsageKind_name(ctx context.Context, field graphql.CollectedField, obj *UsageKind) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UsageKind"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _UsageKind_group(ctx context.Context, field graphql.CollectedField, obj *UsageKind) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UsageKind"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Group
	return graphql.MarshalString(res)
}

func (ec *executionContext) _UsageKind_kind(ctx context.Context, field graphql.CollectedField, obj *UsageKind) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UsageKind"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Kind
	return graphql.MarshalString(res)
}

func (ec *executionContext) _UsageKind_version(ctx context.Context, field graphql.CollectedField, obj *UsageKind) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UsageKind"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Version
	return graphql.MarshalString(res)
}

func (ec *executionContext) _UsageKind_displayName(ctx context.Context, field graphql.CollectedField, obj *UsageKind) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UsageKind"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DisplayName
	return graphql.MarshalString(res)
}

var usageKindResourceImplementors = []string{"UsageKindResource"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _UsageKindResource(ctx context.Context, sel []query.Selection, obj *UsageKindResource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, usageKindResourceImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UsageKindResource")
		case "name":
			out.Values[i] = ec._UsageKindResource_name(ctx, field, obj)
		case "namespace":
			out.Values[i] = ec._UsageKindResource_namespace(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _UsageKindResource_name(ctx context.Context, field graphql.CollectedField, obj *UsageKindResource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UsageKindResource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _UsageKindResource_namespace(ctx context.Context, field graphql.CollectedField, obj *UsageKindResource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UsageKindResource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Namespace
	return graphql.MarshalString(res)
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel []query.Selection, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __DirectiveImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Locations()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Args()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel []query.Selection, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __EnumValueImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDeprecated()
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DeprecationReason()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel []query.Selection, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __FieldImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Args()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDeprecated()
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DeprecationReason()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel []query.Selection, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __InputValueImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DefaultValue()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel []query.Selection, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __SchemaImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Types()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.QueryType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.MutationType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.SubscriptionType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Directives()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Directive(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel []query.Selection, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __TypeImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Kind()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := field.Args["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Fields(args["includeDeprecated"].(bool))
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Field(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Interfaces()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PossibleTypes()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := field.Args["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EnumValues(args["includeDeprecated"].(bool))
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___EnumValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.InputFields()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OfType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func UnmarshalCreateServiceBindingUsageInput(v interface{}) (CreateServiceBindingUsageInput, error) {
	var it CreateServiceBindingUsageInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "environment":
			var err error
			it.Environment, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "serviceBindingRef":
			var err error
			it.ServiceBindingRef, err = UnmarshalServiceBindingRefInput(v)
			if err != nil {
				return it, err
			}
		case "usedBy":
			var err error
			it.UsedBy, err = UnmarshalLocalObjectReferenceInput(v)
			if err != nil {
				return it, err
			}
		case "parameters":
			var err error
			var ptr1 ServiceBindingUsageParametersInput
			if v != nil {
				ptr1, err = UnmarshalServiceBindingUsageParametersInput(v)
				it.Parameters = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalEnvPrefixInput(v interface{}) (EnvPrefixInput, error) {
	var it EnvPrefixInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalInputTopic(v interface{}) (InputTopic, error) {
	var it InputTopic
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalLocalObjectReferenceInput(v interface{}) (LocalObjectReferenceInput, error) {
	var it LocalObjectReferenceInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "kind":
			var err error
			it.Kind, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalServiceBindingRefInput(v interface{}) (ServiceBindingRefInput, error) {
	var it ServiceBindingRefInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalServiceBindingUsageParametersInput(v interface{}) (ServiceBindingUsageParametersInput, error) {
	var it ServiceBindingUsageParametersInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "envPrefix":
			var err error
			var ptr1 EnvPrefixInput
			if v != nil {
				ptr1, err = UnmarshalEnvPrefixInput(v)
				it.EnvPrefix = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalServiceInstanceCreateInput(v interface{}) (ServiceInstanceCreateInput, error) {
	var it ServiceInstanceCreateInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "environment":
			var err error
			it.Environment, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "externalServiceClassName":
			var err error
			it.ExternalServiceClassName, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "externalPlanName":
			var err error
			it.ExternalPlanName, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "labels":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				rawIf1 = v.([]interface{})
			}
			it.Labels = make([]string, len(rawIf1))
			for idx1 := range rawIf1 {
				it.Labels[idx1], err = graphql.UnmarshalString(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		case "parameterSchema":
			var err error
			var ptr1 JSON
			if v != nil {
				err = (&ptr1).UnmarshalGQL(v)
				it.ParameterSchema = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	t := parsedSchema.Resolve(name)
	if t == nil {
		return nil
	}
	return introspection.WrapType(t)
}

var parsedSchema = schema.MustParse(`# Scalars

scalar JSON

scalar Timestamp

# Content


type Title {
    name: String!
    anchor: String!
    titles: [Title!]
}

type Section {
    titles: [Title!]!
    topicType: String!
}

type TopicEntry {
    contentType: String!
    id: String!
    sections: [Section!]!
}

# Service Catalog

type ServiceInstance {
    name: String!
    environment: String!
    serviceClassName: String
    ServiceClassDisplayName: String!
    servicePlanName: String
    servicePlanDisplayName: String!
    creationTimestamp: Timestamp!
    labels: [String]!
    status: ServiceInstanceStatus
    servicePlan: ServicePlan
    serviceClass: ServiceClass
    bindable: Boolean!
    serviceBindings: [ServiceBinding]!
    serviceBindingUsages: [ServiceBindingUsage]!
}

type ServiceInstanceStatus {
    type: InstanceStatusType!
    reason: String!
    message: String!
}

enum InstanceStatusType {
    RUNNING
    PROVISIONING
    DEPROVISIONING
    PENDING
    FAILED
}

type ServiceInstanceEvent {
    type: ServiceInstanceEventType!
    instance: ServiceInstance
}

enum ServiceInstanceEventType {
    ADD
    UPDATE
    DELETE
}

input ServiceInstanceCreateInput {
    name: String!
    environment: String!
    externalServiceClassName: String!
    externalPlanName: String!
    labels: [String]!
    parameterSchema: JSON
}

type ServiceClass {
    name: String!
    externalName: String!
    displayName: String
    creationTimestamp: Timestamp!
    description: String!
    longDescription: String
    imageUrl: String
    documentationUrl: String
    providerDisplayName: String
    tags: [String]!
    plans: [ServicePlan]!
    activated: Boolean!
    apiSpec: JSON
    asyncApiSpec: JSON
    content: JSON
}

type ServicePlan {
    name: String!
    displayName: String
    externalName: String!
    description: String!
    relatedServiceClassName: String!
    instanceCreateParameterSchema: JSON
}

type ServiceBroker {
    name: String!
    status: ServiceBrokerStatus!
    creationTimestamp: Timestamp!
    url: String!
    labels: JSON!
}

type ServiceBrokerStatus {
    ready: Boolean!
    reason: String!
    message: String!
}

type ServiceBinding {
    name: String!
    serviceInstanceName: String!
    environment: String!
    secret: Secret
    status: ServiceBindingStatus!
}

type ServiceBindingStatus {
    type: ServiceBindingStatusType!
    reason: String!
    message: String!
}

enum ServiceBindingStatusType {
    READY
    PENDING
    FAILED
    UNKNOWN
}

# We cannot use ServiceBinding as a result of create action
# because secret at the moment of mutation execution is not available.
type CreateServiceBindingOutput {
    name: String!
    serviceInstanceName: String!
    environment: String!
}

type Secret {
    name: String!
    environment: String!
    data: JSON!
}

type DeleteServiceBindingOutput {
    name: String!
    environment: String!
}

type DeleteServiceBindingUsageOutput {
    name: String!
    environment: String!
}

type ServiceBindingUsage {
    name: String!
    environment: String!
    serviceBinding: ServiceBinding
    usedBy: LocalObjectReference!
    parameters: ServiceBindingUsageParameters
    status: ServiceBindingUsageStatus!
}

type ServiceBindingUsageStatus {
    type: ServiceBindingUsageStatusType!
    reason: String!
    message: String!
}

enum ServiceBindingUsageStatusType {
    READY
    PENDING
    FAILED
    UNKNOWN
}

type LocalObjectReference {
    kind: String!
    name: String!
}

type ServiceBindingUsageParameters {
    envPrefix: EnvPrefix
}

type EnvPrefix {
    name: String!
}

type LimitRange {
    name: String!
    limits: [LimitRangeItem]!
}

type LimitRangeItem {
    limitType: LimitType!
    max: ResourceType!
    default: ResourceType!
    defaultRequest: ResourceType!
}

enum LimitType {
    Container
    Pod
}

type ResourceType {
    memory: String
    cpu: String
}

input CreateServiceBindingUsageInput {
    name: String!
    environment: String!
    serviceBindingRef: ServiceBindingRefInput!
    usedBy: LocalObjectReferenceInput!
    parameters: ServiceBindingUsageParametersInput
}

input ServiceBindingRefInput {
    name: String!
}

input LocalObjectReferenceInput {
    kind: String!
    name: String!
}

input ServiceBindingUsageParametersInput {
    envPrefix: EnvPrefixInput
}

input EnvPrefixInput {
    name: String!
}

type Container {
    name: String!
    image: String!
}

type DeploymentStatus {
    replicas: Int!
    updatedReplicas: Int!
    readyReplicas: Int!
    availableReplicas: Int!
    conditions: DeploymentCondition!
}

type DeploymentCondition {
    status: String!
    type: String!
    lastTransitionTimestamp: Timestamp!
    lastUpdateTimestamp: Timestamp!
    message: String!
    reason: String!
}

type Deployment {
    name: String!
    environment: String!
    creationTimestamp: Timestamp!
    status: DeploymentStatus!
    labels: JSON!
    containers: [Container]!
    boundServiceInstanceNames: [String]!
}

type ResourceValues {
    memory: String
    cpu: String
}

type ResourceQuota {
    name: String!
    pods: String
    limits: ResourceValues!
    requests: ResourceValues!
}

type ResourceQuotaStatus {
    exceeded: Boolean!
    message: String!
}

# Remote Environments

type Environment {
    name: String!
    remoteEnvironments: [String]!
}

type RemoteEnvironment {
    name: String!
    description: String!
    source: RemoteEnvironmentSource!
    services: [RemoteEnvironmentService]!
    enabledInEnvironments: [String]!
    status: RemoteEnvironmentStatus!
}

type ConnectorService {
    url: String!
}

type EnvironmentMapping {
    environment: String!
    remoteEnvironment: String!
}

type RemoteEnvironmentSource {
    environment: String!
    type: String!
    namespace: String!
}

type RemoteEnvironmentService {
    id: String!
    displayName: String!
    longDescription: String!
    providerDisplayName: String!
    tags: [String]!
    entries: [RemoteEnvironmentEntry]!
}

type RemoteEnvironmentEntry {
    type: String!
    gatewayUrl: String
    accessLabel: String
}

enum RemoteEnvironmentStatus {
    SERVING
    NOT_SERVING
    GATEWAY_NOT_CONFIGURED
}

type EventActivationSource {
    environment: String!
    type: String!
    namespace: String!
}

type EventActivationEvent {
    eventType: String!
    version: String!
    description: String!
}

type EventActivation {
    name: String!
    displayName: String!
    source: EventActivationSource!
    events: [EventActivationEvent]!
}

type UsageKind {
    name: String!
    group: String!
    kind: String!
    version: String!
    displayName: String!
}

type UsageKindResource {
    name: String!
    namespace: String!
}

# IDP PRESETS

type IDPPreset {
    name: String!
    issuer: String!
    jwksUri: String!
}

# Kubeless

type Function {
    name: String!
    trigger: String!
    creationTimestamp: Timestamp!
    labels: JSON!
    environment: String!
}

input InputTopic {
    id: String!
    type: String!
}

# API controller

type Service {
    name: String!
    port: Int!
}

enum AuthenticationPolicyType {
    JWT
}

type AuthenticationPolicy  {
    type: AuthenticationPolicyType!
    issuer: String!
    jwksURI: String!
}

type API {
    name: String!
    hostname: String!
    service: Service!
    authenticationPolicies: [AuthenticationPolicy]!
}

# Queries

type Query {
    serviceInstance(name: String!, environment: String!): ServiceInstance
    serviceInstances(environment: String!, first: Int, offset: Int, status: InstanceStatusType): [ServiceInstance]!
    serviceClasses(first: Int, offset: Int): [ServiceClass]!
    serviceClass(name: String!): ServiceClass
    serviceBrokers(first: Int, offset: Int): [ServiceBroker]!
    serviceBroker(name: String!): ServiceBroker
    serviceBindingUsage(name: String!, environment: String!): ServiceBindingUsage
    serviceBinding(name: String!, environment: String!): ServiceBinding
    usageKinds(first: Int, offset: Int): [UsageKind!]!

    # The query returns all instances of the resources specified by the usageKind parameter in the given environment. The result contains the resources which do not have the metadata.ownerReference.
    usageKindResources(usageKind: String!, environment: String!): [UsageKindResource!]!

    apis(environment: String!, serviceName: String, hostname: String): [API!]!

    remoteEnvironment(name: String!): RemoteEnvironment
    remoteEnvironments(environment: String, first: Int, offset: Int): [RemoteEnvironment]!
    connectorService(remoteEnvironment: String!): ConnectorService!

    environments(remoteEnvironment: String): [Environment]!
    deployments(environment: String!, excludeFunctions: Boolean): [Deployment]!
    resourceQuotas(environment: String!): [ResourceQuota]!
    resourceQuotaStatus(environment: String!): ResourceQuotaStatus!

    functions(environment: String!, first: Int, offset: Int): [Function]!

    #TODO: it is not possible to define ` + "`" + `type` + "`" + ` as argument name
    content(contentType: String!, id: String!): JSON
    topics(input: [InputTopic]!, internal: Boolean): [TopicEntry]
    eventActivations(environment: String!): [EventActivation]!

    limitRanges(environment: String!): [LimitRange!]!

    IDPPreset(name: String!): IDPPreset
    IDPPresets(first: Int, offset: Int): [IDPPreset!]!
}

# Mutations

type Mutation {
    createServiceInstance(params: ServiceInstanceCreateInput!): ServiceInstance
    deleteServiceInstance(name: String!, environment: String!): ServiceInstance
    createServiceBinding(serviceBindingName: String!, serviceInstanceName: String!, environment: String!): CreateServiceBindingOutput
    deleteServiceBinding(serviceBindingName: String!, environment: String!): DeleteServiceBindingOutput
    createServiceBindingUsage(createServiceBindingUsageInput: CreateServiceBindingUsageInput): ServiceBindingUsage
    deleteServiceBindingUsage(serviceBindingUsageName: String!, environment: String!): DeleteServiceBindingUsageOutput

    enableRemoteEnvironment(remoteEnvironment: String!, environment: String!): EnvironmentMapping
    disableRemoteEnvironment(remoteEnvironment: String!, environment: String!): EnvironmentMapping

    createIDPPreset(name: String!, issuer: String!, jwksUri: String!): IDPPreset
    deleteIDPPreset(name: String!): IDPPreset
}

# Subscriptions

type Subscription {
    serviceInstanceEvent(environment: String!): ServiceInstanceEvent!
}

# Schema

schema {
    query: Query
    mutation: Mutation
}
`)
