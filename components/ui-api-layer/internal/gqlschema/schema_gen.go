// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlschema

import (
	"bytes"
	context "context"
	strconv "strconv"
	sync "sync"
	time "time"

	graphql "github.com/99designs/gqlgen/graphql"
	introspection "github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser"
	ast "github.com/vektah/gqlparser/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Deployment() DeploymentResolver
	EventActivation() EventActivationResolver
	Mutation() MutationResolver
	Query() QueryResolver
	RemoteEnvironment() RemoteEnvironmentResolver
	ServiceBinding() ServiceBindingResolver
	ServiceBindingUsage() ServiceBindingUsageResolver
	ServiceClass() ServiceClassResolver
	ServiceInstance() ServiceInstanceResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Api struct {
		Name                   func(childComplexity int) int
		Hostname               func(childComplexity int) int
		Service                func(childComplexity int) int
		AuthenticationPolicies func(childComplexity int) int
	}

	AuthenticationPolicy struct {
		Type    func(childComplexity int) int
		Issuer  func(childComplexity int) int
		JwksUri func(childComplexity int) int
	}

	ConnectorService struct {
		Url func(childComplexity int) int
	}

	Container struct {
		Name  func(childComplexity int) int
		Image func(childComplexity int) int
	}

	CreateServiceBindingOutput struct {
		Name                func(childComplexity int) int
		ServiceInstanceName func(childComplexity int) int
		Environment         func(childComplexity int) int
	}

	DeleteServiceBindingOutput struct {
		Name        func(childComplexity int) int
		Environment func(childComplexity int) int
	}

	DeleteServiceBindingUsageOutput struct {
		Name        func(childComplexity int) int
		Environment func(childComplexity int) int
	}

	Deployment struct {
		Name                      func(childComplexity int) int
		Environment               func(childComplexity int) int
		CreationTimestamp         func(childComplexity int) int
		Status                    func(childComplexity int) int
		Labels                    func(childComplexity int) int
		Containers                func(childComplexity int) int
		BoundServiceInstanceNames func(childComplexity int) int
	}

	DeploymentCondition struct {
		Status                  func(childComplexity int) int
		Type                    func(childComplexity int) int
		LastTransitionTimestamp func(childComplexity int) int
		LastUpdateTimestamp     func(childComplexity int) int
		Message                 func(childComplexity int) int
		Reason                  func(childComplexity int) int
	}

	DeploymentStatus struct {
		Replicas          func(childComplexity int) int
		UpdatedReplicas   func(childComplexity int) int
		ReadyReplicas     func(childComplexity int) int
		AvailableReplicas func(childComplexity int) int
		Conditions        func(childComplexity int) int
	}

	EnvPrefix struct {
		Name func(childComplexity int) int
	}

	Environment struct {
		Name               func(childComplexity int) int
		RemoteEnvironments func(childComplexity int) int
	}

	EnvironmentMapping struct {
		Environment       func(childComplexity int) int
		RemoteEnvironment func(childComplexity int) int
	}

	EventActivation struct {
		Name        func(childComplexity int) int
		DisplayName func(childComplexity int) int
		Source      func(childComplexity int) int
		Events      func(childComplexity int) int
	}

	EventActivationEvent struct {
		EventType   func(childComplexity int) int
		Version     func(childComplexity int) int
		Description func(childComplexity int) int
	}

	EventActivationSource struct {
		Environment func(childComplexity int) int
		Type        func(childComplexity int) int
		Namespace   func(childComplexity int) int
	}

	ExceededQuota struct {
		QuotaName         func(childComplexity int) int
		ResourceName      func(childComplexity int) int
		AffectedResources func(childComplexity int) int
	}

	Function struct {
		Name              func(childComplexity int) int
		Trigger           func(childComplexity int) int
		CreationTimestamp func(childComplexity int) int
		Labels            func(childComplexity int) int
		Environment       func(childComplexity int) int
	}

	Idppreset struct {
		Name    func(childComplexity int) int
		Issuer  func(childComplexity int) int
		JwksUri func(childComplexity int) int
	}

	LimitRange struct {
		Name   func(childComplexity int) int
		Limits func(childComplexity int) int
	}

	LimitRangeItem struct {
		LimitType      func(childComplexity int) int
		Max            func(childComplexity int) int
		Default        func(childComplexity int) int
		DefaultRequest func(childComplexity int) int
	}

	LocalObjectReference struct {
		Kind func(childComplexity int) int
		Name func(childComplexity int) int
	}

	Mutation struct {
		CreateServiceInstance     func(childComplexity int, params ServiceInstanceCreateInput) int
		DeleteServiceInstance     func(childComplexity int, name string, environment string) int
		CreateServiceBinding      func(childComplexity int, serviceBindingName string, serviceInstanceName string, environment string) int
		DeleteServiceBinding      func(childComplexity int, serviceBindingName string, environment string) int
		CreateServiceBindingUsage func(childComplexity int, createServiceBindingUsageInput *CreateServiceBindingUsageInput) int
		DeleteServiceBindingUsage func(childComplexity int, serviceBindingUsageName string, environment string) int
		EnableRemoteEnvironment   func(childComplexity int, remoteEnvironment string, environment string) int
		DisableRemoteEnvironment  func(childComplexity int, remoteEnvironment string, environment string) int
		CreateIdppreset           func(childComplexity int, name string, issuer string, jwksUri string) int
		DeleteIdppreset           func(childComplexity int, name string) int
	}

	Query struct {
		ServiceInstance      func(childComplexity int, name string, environment string) int
		ServiceInstances     func(childComplexity int, environment string, first *int, offset *int, status *InstanceStatusType) int
		ServiceClasses       func(childComplexity int, first *int, offset *int) int
		ServiceClass         func(childComplexity int, name string) int
		ServiceBrokers       func(childComplexity int, first *int, offset *int) int
		ServiceBroker        func(childComplexity int, name string) int
		ServiceBindingUsage  func(childComplexity int, name string, environment string) int
		ServiceBinding       func(childComplexity int, name string, environment string) int
		UsageKinds           func(childComplexity int, first *int, offset *int) int
		UsageKindResources   func(childComplexity int, usageKind string, environment string) int
		Apis                 func(childComplexity int, environment string, serviceName *string, hostname *string) int
		RemoteEnvironment    func(childComplexity int, name string) int
		RemoteEnvironments   func(childComplexity int, environment *string, first *int, offset *int) int
		ConnectorService     func(childComplexity int, remoteEnvironment string) int
		Environments         func(childComplexity int, remoteEnvironment *string) int
		Deployments          func(childComplexity int, environment string, excludeFunctions *bool) int
		ResourceQuotas       func(childComplexity int, environment string) int
		ResourceQuotasStatus func(childComplexity int, environment string) int
		Functions            func(childComplexity int, environment string, first *int, offset *int) int
		Content              func(childComplexity int, contentType string, id string) int
		Topics               func(childComplexity int, input []InputTopic, internal *bool) int
		EventActivations     func(childComplexity int, environment string) int
		LimitRanges          func(childComplexity int, environment string) int
		Idppreset            func(childComplexity int, name string) int
		Idppresets           func(childComplexity int, first *int, offset *int) int
	}

	RemoteEnvironment struct {
		Name                  func(childComplexity int) int
		Description           func(childComplexity int) int
		Source                func(childComplexity int) int
		Services              func(childComplexity int) int
		EnabledInEnvironments func(childComplexity int) int
		Status                func(childComplexity int) int
	}

	RemoteEnvironmentEntry struct {
		Type        func(childComplexity int) int
		GatewayUrl  func(childComplexity int) int
		AccessLabel func(childComplexity int) int
	}

	RemoteEnvironmentService struct {
		Id                  func(childComplexity int) int
		DisplayName         func(childComplexity int) int
		LongDescription     func(childComplexity int) int
		ProviderDisplayName func(childComplexity int) int
		Tags                func(childComplexity int) int
		Entries             func(childComplexity int) int
	}

	RemoteEnvironmentSource struct {
		Environment func(childComplexity int) int
		Type        func(childComplexity int) int
		Namespace   func(childComplexity int) int
	}

	ResourceQuota struct {
		Name     func(childComplexity int) int
		Pods     func(childComplexity int) int
		Limits   func(childComplexity int) int
		Requests func(childComplexity int) int
	}

	ResourceQuotasStatus struct {
		Exceeded       func(childComplexity int) int
		ExceededQuotas func(childComplexity int) int
	}

	ResourceType struct {
		Memory func(childComplexity int) int
		Cpu    func(childComplexity int) int
	}

	ResourceValues struct {
		Memory func(childComplexity int) int
		Cpu    func(childComplexity int) int
	}

	Secret struct {
		Name        func(childComplexity int) int
		Environment func(childComplexity int) int
		Data        func(childComplexity int) int
	}

	Section struct {
		Titles    func(childComplexity int) int
		TopicType func(childComplexity int) int
	}

	Service struct {
		Name func(childComplexity int) int
		Port func(childComplexity int) int
	}

	ServiceBinding struct {
		Name                func(childComplexity int) int
		ServiceInstanceName func(childComplexity int) int
		Environment         func(childComplexity int) int
		Secret              func(childComplexity int) int
		Status              func(childComplexity int) int
	}

	ServiceBindingEvent struct {
		Type    func(childComplexity int) int
		Binding func(childComplexity int) int
	}

	ServiceBindingStatus struct {
		Type    func(childComplexity int) int
		Reason  func(childComplexity int) int
		Message func(childComplexity int) int
	}

	ServiceBindingUsage struct {
		Name           func(childComplexity int) int
		Environment    func(childComplexity int) int
		ServiceBinding func(childComplexity int) int
		UsedBy         func(childComplexity int) int
		Parameters     func(childComplexity int) int
		Status         func(childComplexity int) int
	}

	ServiceBindingUsageEvent struct {
		Type         func(childComplexity int) int
		BindingUsage func(childComplexity int) int
	}

	ServiceBindingUsageParameters struct {
		EnvPrefix func(childComplexity int) int
	}

	ServiceBindingUsageStatus struct {
		Type    func(childComplexity int) int
		Reason  func(childComplexity int) int
		Message func(childComplexity int) int
	}

	ServiceBroker struct {
		Name              func(childComplexity int) int
		Status            func(childComplexity int) int
		CreationTimestamp func(childComplexity int) int
		Url               func(childComplexity int) int
		Labels            func(childComplexity int) int
	}

	ServiceBrokerStatus struct {
		Ready   func(childComplexity int) int
		Reason  func(childComplexity int) int
		Message func(childComplexity int) int
	}

	ServiceClass struct {
		Name                func(childComplexity int) int
		ExternalName        func(childComplexity int) int
		DisplayName         func(childComplexity int) int
		CreationTimestamp   func(childComplexity int) int
		Description         func(childComplexity int) int
		LongDescription     func(childComplexity int) int
		ImageUrl            func(childComplexity int) int
		DocumentationUrl    func(childComplexity int) int
		SupportUrl          func(childComplexity int) int
		ProviderDisplayName func(childComplexity int) int
		Tags                func(childComplexity int) int
		Plans               func(childComplexity int) int
		Activated           func(childComplexity int) int
		ApiSpec             func(childComplexity int) int
		AsyncApiSpec        func(childComplexity int) int
		Content             func(childComplexity int) int
	}

	ServiceInstance struct {
		Name                    func(childComplexity int) int
		Environment             func(childComplexity int) int
		ServiceClassName        func(childComplexity int) int
		ServiceClassDisplayName func(childComplexity int) int
		ServicePlanName         func(childComplexity int) int
		ServicePlanDisplayName  func(childComplexity int) int
		ServicePlanSpec         func(childComplexity int) int
		CreationTimestamp       func(childComplexity int) int
		Labels                  func(childComplexity int) int
		Status                  func(childComplexity int) int
		ServicePlan             func(childComplexity int) int
		ServiceClass            func(childComplexity int) int
		Bindable                func(childComplexity int) int
		ServiceBindings         func(childComplexity int) int
		ServiceBindingUsages    func(childComplexity int) int
	}

	ServiceInstanceEvent struct {
		Type     func(childComplexity int) int
		Instance func(childComplexity int) int
	}

	ServiceInstanceStatus struct {
		Type    func(childComplexity int) int
		Reason  func(childComplexity int) int
		Message func(childComplexity int) int
	}

	ServicePlan struct {
		Name                          func(childComplexity int) int
		DisplayName                   func(childComplexity int) int
		ExternalName                  func(childComplexity int) int
		Description                   func(childComplexity int) int
		RelatedServiceClassName       func(childComplexity int) int
		InstanceCreateParameterSchema func(childComplexity int) int
	}

	Subscription struct {
		ServiceInstanceEvent                       func(childComplexity int, environment string) int
		ServiceBindingEventForServiceInstance      func(childComplexity int, serviceInstanceName string, environment string) int
		ServiceBindingUsageEventForServiceInstance func(childComplexity int, serviceInstanceName string, environment string) int
	}

	Title struct {
		Name   func(childComplexity int) int
		Anchor func(childComplexity int) int
		Titles func(childComplexity int) int
	}

	TopicEntry struct {
		ContentType func(childComplexity int) int
		Id          func(childComplexity int) int
		Sections    func(childComplexity int) int
	}

	UsageKind struct {
		Name        func(childComplexity int) int
		Group       func(childComplexity int) int
		Kind        func(childComplexity int) int
		Version     func(childComplexity int) int
		DisplayName func(childComplexity int) int
	}

	UsageKindResource struct {
		Name      func(childComplexity int) int
		Namespace func(childComplexity int) int
	}
}

type DeploymentResolver interface {
	BoundServiceInstanceNames(ctx context.Context, obj *Deployment) ([]string, error)
}
type EventActivationResolver interface {
	Events(ctx context.Context, obj *EventActivation) ([]EventActivationEvent, error)
}
type MutationResolver interface {
	CreateServiceInstance(ctx context.Context, params ServiceInstanceCreateInput) (*ServiceInstance, error)
	DeleteServiceInstance(ctx context.Context, name string, environment string) (*ServiceInstance, error)
	CreateServiceBinding(ctx context.Context, serviceBindingName string, serviceInstanceName string, environment string) (*CreateServiceBindingOutput, error)
	DeleteServiceBinding(ctx context.Context, serviceBindingName string, environment string) (*DeleteServiceBindingOutput, error)
	CreateServiceBindingUsage(ctx context.Context, createServiceBindingUsageInput *CreateServiceBindingUsageInput) (*ServiceBindingUsage, error)
	DeleteServiceBindingUsage(ctx context.Context, serviceBindingUsageName string, environment string) (*DeleteServiceBindingUsageOutput, error)
	EnableRemoteEnvironment(ctx context.Context, remoteEnvironment string, environment string) (*EnvironmentMapping, error)
	DisableRemoteEnvironment(ctx context.Context, remoteEnvironment string, environment string) (*EnvironmentMapping, error)
	CreateIDPPreset(ctx context.Context, name string, issuer string, jwksUri string) (*IDPPreset, error)
	DeleteIDPPreset(ctx context.Context, name string) (*IDPPreset, error)
}
type QueryResolver interface {
	ServiceInstance(ctx context.Context, name string, environment string) (*ServiceInstance, error)
	ServiceInstances(ctx context.Context, environment string, first *int, offset *int, status *InstanceStatusType) ([]ServiceInstance, error)
	ServiceClasses(ctx context.Context, first *int, offset *int) ([]ServiceClass, error)
	ServiceClass(ctx context.Context, name string) (*ServiceClass, error)
	ServiceBrokers(ctx context.Context, first *int, offset *int) ([]ServiceBroker, error)
	ServiceBroker(ctx context.Context, name string) (*ServiceBroker, error)
	ServiceBindingUsage(ctx context.Context, name string, environment string) (*ServiceBindingUsage, error)
	ServiceBinding(ctx context.Context, name string, environment string) (*ServiceBinding, error)
	UsageKinds(ctx context.Context, first *int, offset *int) ([]UsageKind, error)
	UsageKindResources(ctx context.Context, usageKind string, environment string) ([]UsageKindResource, error)
	Apis(ctx context.Context, environment string, serviceName *string, hostname *string) ([]API, error)
	RemoteEnvironment(ctx context.Context, name string) (*RemoteEnvironment, error)
	RemoteEnvironments(ctx context.Context, environment *string, first *int, offset *int) ([]RemoteEnvironment, error)
	ConnectorService(ctx context.Context, remoteEnvironment string) (ConnectorService, error)
	Environments(ctx context.Context, remoteEnvironment *string) ([]Environment, error)
	Deployments(ctx context.Context, environment string, excludeFunctions *bool) ([]Deployment, error)
	ResourceQuotas(ctx context.Context, environment string) ([]ResourceQuota, error)
	ResourceQuotasStatus(ctx context.Context, environment string) (ResourceQuotasStatus, error)
	Functions(ctx context.Context, environment string, first *int, offset *int) ([]Function, error)
	Content(ctx context.Context, contentType string, id string) (*JSON, error)
	Topics(ctx context.Context, input []InputTopic, internal *bool) ([]TopicEntry, error)
	EventActivations(ctx context.Context, environment string) ([]EventActivation, error)
	LimitRanges(ctx context.Context, environment string) ([]LimitRange, error)
	IDPPreset(ctx context.Context, name string) (*IDPPreset, error)
	IDPPresets(ctx context.Context, first *int, offset *int) ([]IDPPreset, error)
}
type RemoteEnvironmentResolver interface {
	EnabledInEnvironments(ctx context.Context, obj *RemoteEnvironment) ([]string, error)
	Status(ctx context.Context, obj *RemoteEnvironment) (RemoteEnvironmentStatus, error)
}
type ServiceBindingResolver interface {
	Secret(ctx context.Context, obj *ServiceBinding) (*Secret, error)
}
type ServiceBindingUsageResolver interface {
	ServiceBinding(ctx context.Context, obj *ServiceBindingUsage) (*ServiceBinding, error)
}
type ServiceClassResolver interface {
	Plans(ctx context.Context, obj *ServiceClass) ([]ServicePlan, error)
	Activated(ctx context.Context, obj *ServiceClass) (bool, error)
	APISpec(ctx context.Context, obj *ServiceClass) (*JSON, error)
	AsyncAPISpec(ctx context.Context, obj *ServiceClass) (*JSON, error)
	Content(ctx context.Context, obj *ServiceClass) (*JSON, error)
}
type ServiceInstanceResolver interface {
	ServicePlan(ctx context.Context, obj *ServiceInstance) (*ServicePlan, error)
	ServiceClass(ctx context.Context, obj *ServiceInstance) (*ServiceClass, error)
	Bindable(ctx context.Context, obj *ServiceInstance) (bool, error)
	ServiceBindings(ctx context.Context, obj *ServiceInstance) ([]ServiceBinding, error)
	ServiceBindingUsages(ctx context.Context, obj *ServiceInstance) ([]ServiceBindingUsage, error)
}
type SubscriptionResolver interface {
	ServiceInstanceEvent(ctx context.Context, environment string) (<-chan ServiceInstanceEvent, error)
	ServiceBindingEventForServiceInstance(ctx context.Context, serviceInstanceName string, environment string) (<-chan ServiceBindingEvent, error)
	ServiceBindingUsageEventForServiceInstance(ctx context.Context, serviceInstanceName string, environment string) (<-chan ServiceBindingUsageEvent, error)
}

func field_Mutation_createServiceInstance_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 ServiceInstanceCreateInput
	if tmp, ok := rawArgs["params"]; ok {
		var err error
		arg0, err = UnmarshalServiceInstanceCreateInput(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil

}

func field_Mutation_deleteServiceInstance_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg1
	return args, nil

}

func field_Mutation_createServiceBinding_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["serviceBindingName"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["serviceBindingName"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["serviceInstanceName"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["serviceInstanceName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg2
	return args, nil

}

func field_Mutation_deleteServiceBinding_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["serviceBindingName"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["serviceBindingName"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg1
	return args, nil

}

func field_Mutation_createServiceBindingUsage_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *CreateServiceBindingUsageInput
	if tmp, ok := rawArgs["createServiceBindingUsageInput"]; ok {
		var err error
		var ptr1 CreateServiceBindingUsageInput
		if tmp != nil {
			ptr1, err = UnmarshalCreateServiceBindingUsageInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createServiceBindingUsageInput"] = arg0
	return args, nil

}

func field_Mutation_deleteServiceBindingUsage_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["serviceBindingUsageName"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["serviceBindingUsageName"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg1
	return args, nil

}

func field_Mutation_enableRemoteEnvironment_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["remoteEnvironment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["remoteEnvironment"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg1
	return args, nil

}

func field_Mutation_disableRemoteEnvironment_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["remoteEnvironment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["remoteEnvironment"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg1
	return args, nil

}

func field_Mutation_createIDPPreset_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["issuer"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["issuer"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["jwksUri"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jwksUri"] = arg2
	return args, nil

}

func field_Mutation_deleteIDPPreset_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field_Query_serviceInstance_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg1
	return args, nil

}

func field_Query_serviceInstances_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 *InstanceStatusType
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 InstanceStatusType
		if tmp != nil {
			err = (&ptr1).UnmarshalGQL(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg3
	return args, nil

}

func field_Query_serviceClasses_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	return args, nil

}

func field_Query_serviceClass_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field_Query_serviceBrokers_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	return args, nil

}

func field_Query_serviceBroker_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field_Query_serviceBindingUsage_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg1
	return args, nil

}

func field_Query_serviceBinding_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg1
	return args, nil

}

func field_Query_usageKinds_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	return args, nil

}

func field_Query_usageKindResources_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["usageKind"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["usageKind"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg1
	return args, nil

}

func field_Query_apis_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["serviceName"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["serviceName"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["hostname"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["hostname"] = arg2
	return args, nil

}

func field_Query_remoteEnvironment_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field_Query_remoteEnvironments_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil

}

func field_Query_connectorService_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["remoteEnvironment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["remoteEnvironment"] = arg0
	return args, nil

}

func field_Query_environments_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["remoteEnvironment"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["remoteEnvironment"] = arg0
	return args, nil

}

func field_Query_deployments_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["excludeFunctions"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["excludeFunctions"] = arg1
	return args, nil

}

func field_Query_resourceQuotas_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg0
	return args, nil

}

func field_Query_resourceQuotasStatus_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg0
	return args, nil

}

func field_Query_functions_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil

}

func field_Query_content_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contentType"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contentType"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil

}

func field_Query_topics_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 []InputTopic
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg0 = make([]InputTopic, len(rawIf1))
		for idx1 := range rawIf1 {
			arg0[idx1], err = UnmarshalInputTopic(rawIf1[idx1])
		}
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["internal"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["internal"] = arg1
	return args, nil

}

func field_Query_eventActivations_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg0
	return args, nil

}

func field_Query_limitRanges_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg0
	return args, nil

}

func field_Query_IDPPreset_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field_Query_IDPPresets_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	return args, nil

}

func field_Query___type_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field_Subscription_serviceInstanceEvent_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg0
	return args, nil

}

func field_Subscription_serviceBindingEventForServiceInstance_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["serviceInstanceName"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["serviceInstanceName"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg1
	return args, nil

}

func field_Subscription_serviceBindingUsageEventForServiceInstance_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["serviceInstanceName"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["serviceInstanceName"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["environment"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["environment"] = arg1
	return args, nil

}

func field___Type_fields_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

func field___Type_enumValues_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	switch typeName + "." + field {

	case "API.name":
		if e.complexity.Api.Name == nil {
			break
		}

		return e.complexity.Api.Name(childComplexity), true

	case "API.hostname":
		if e.complexity.Api.Hostname == nil {
			break
		}

		return e.complexity.Api.Hostname(childComplexity), true

	case "API.service":
		if e.complexity.Api.Service == nil {
			break
		}

		return e.complexity.Api.Service(childComplexity), true

	case "API.authenticationPolicies":
		if e.complexity.Api.AuthenticationPolicies == nil {
			break
		}

		return e.complexity.Api.AuthenticationPolicies(childComplexity), true

	case "AuthenticationPolicy.type":
		if e.complexity.AuthenticationPolicy.Type == nil {
			break
		}

		return e.complexity.AuthenticationPolicy.Type(childComplexity), true

	case "AuthenticationPolicy.issuer":
		if e.complexity.AuthenticationPolicy.Issuer == nil {
			break
		}

		return e.complexity.AuthenticationPolicy.Issuer(childComplexity), true

	case "AuthenticationPolicy.jwksURI":
		if e.complexity.AuthenticationPolicy.JwksUri == nil {
			break
		}

		return e.complexity.AuthenticationPolicy.JwksUri(childComplexity), true

	case "ConnectorService.url":
		if e.complexity.ConnectorService.Url == nil {
			break
		}

		return e.complexity.ConnectorService.Url(childComplexity), true

	case "Container.name":
		if e.complexity.Container.Name == nil {
			break
		}

		return e.complexity.Container.Name(childComplexity), true

	case "Container.image":
		if e.complexity.Container.Image == nil {
			break
		}

		return e.complexity.Container.Image(childComplexity), true

	case "CreateServiceBindingOutput.name":
		if e.complexity.CreateServiceBindingOutput.Name == nil {
			break
		}

		return e.complexity.CreateServiceBindingOutput.Name(childComplexity), true

	case "CreateServiceBindingOutput.serviceInstanceName":
		if e.complexity.CreateServiceBindingOutput.ServiceInstanceName == nil {
			break
		}

		return e.complexity.CreateServiceBindingOutput.ServiceInstanceName(childComplexity), true

	case "CreateServiceBindingOutput.environment":
		if e.complexity.CreateServiceBindingOutput.Environment == nil {
			break
		}

		return e.complexity.CreateServiceBindingOutput.Environment(childComplexity), true

	case "DeleteServiceBindingOutput.name":
		if e.complexity.DeleteServiceBindingOutput.Name == nil {
			break
		}

		return e.complexity.DeleteServiceBindingOutput.Name(childComplexity), true

	case "DeleteServiceBindingOutput.environment":
		if e.complexity.DeleteServiceBindingOutput.Environment == nil {
			break
		}

		return e.complexity.DeleteServiceBindingOutput.Environment(childComplexity), true

	case "DeleteServiceBindingUsageOutput.name":
		if e.complexity.DeleteServiceBindingUsageOutput.Name == nil {
			break
		}

		return e.complexity.DeleteServiceBindingUsageOutput.Name(childComplexity), true

	case "DeleteServiceBindingUsageOutput.environment":
		if e.complexity.DeleteServiceBindingUsageOutput.Environment == nil {
			break
		}

		return e.complexity.DeleteServiceBindingUsageOutput.Environment(childComplexity), true

	case "Deployment.name":
		if e.complexity.Deployment.Name == nil {
			break
		}

		return e.complexity.Deployment.Name(childComplexity), true

	case "Deployment.environment":
		if e.complexity.Deployment.Environment == nil {
			break
		}

		return e.complexity.Deployment.Environment(childComplexity), true

	case "Deployment.creationTimestamp":
		if e.complexity.Deployment.CreationTimestamp == nil {
			break
		}

		return e.complexity.Deployment.CreationTimestamp(childComplexity), true

	case "Deployment.status":
		if e.complexity.Deployment.Status == nil {
			break
		}

		return e.complexity.Deployment.Status(childComplexity), true

	case "Deployment.labels":
		if e.complexity.Deployment.Labels == nil {
			break
		}

		return e.complexity.Deployment.Labels(childComplexity), true

	case "Deployment.containers":
		if e.complexity.Deployment.Containers == nil {
			break
		}

		return e.complexity.Deployment.Containers(childComplexity), true

	case "Deployment.boundServiceInstanceNames":
		if e.complexity.Deployment.BoundServiceInstanceNames == nil {
			break
		}

		return e.complexity.Deployment.BoundServiceInstanceNames(childComplexity), true

	case "DeploymentCondition.status":
		if e.complexity.DeploymentCondition.Status == nil {
			break
		}

		return e.complexity.DeploymentCondition.Status(childComplexity), true

	case "DeploymentCondition.type":
		if e.complexity.DeploymentCondition.Type == nil {
			break
		}

		return e.complexity.DeploymentCondition.Type(childComplexity), true

	case "DeploymentCondition.lastTransitionTimestamp":
		if e.complexity.DeploymentCondition.LastTransitionTimestamp == nil {
			break
		}

		return e.complexity.DeploymentCondition.LastTransitionTimestamp(childComplexity), true

	case "DeploymentCondition.lastUpdateTimestamp":
		if e.complexity.DeploymentCondition.LastUpdateTimestamp == nil {
			break
		}

		return e.complexity.DeploymentCondition.LastUpdateTimestamp(childComplexity), true

	case "DeploymentCondition.message":
		if e.complexity.DeploymentCondition.Message == nil {
			break
		}

		return e.complexity.DeploymentCondition.Message(childComplexity), true

	case "DeploymentCondition.reason":
		if e.complexity.DeploymentCondition.Reason == nil {
			break
		}

		return e.complexity.DeploymentCondition.Reason(childComplexity), true

	case "DeploymentStatus.replicas":
		if e.complexity.DeploymentStatus.Replicas == nil {
			break
		}

		return e.complexity.DeploymentStatus.Replicas(childComplexity), true

	case "DeploymentStatus.updatedReplicas":
		if e.complexity.DeploymentStatus.UpdatedReplicas == nil {
			break
		}

		return e.complexity.DeploymentStatus.UpdatedReplicas(childComplexity), true

	case "DeploymentStatus.readyReplicas":
		if e.complexity.DeploymentStatus.ReadyReplicas == nil {
			break
		}

		return e.complexity.DeploymentStatus.ReadyReplicas(childComplexity), true

	case "DeploymentStatus.availableReplicas":
		if e.complexity.DeploymentStatus.AvailableReplicas == nil {
			break
		}

		return e.complexity.DeploymentStatus.AvailableReplicas(childComplexity), true

	case "DeploymentStatus.conditions":
		if e.complexity.DeploymentStatus.Conditions == nil {
			break
		}

		return e.complexity.DeploymentStatus.Conditions(childComplexity), true

	case "EnvPrefix.name":
		if e.complexity.EnvPrefix.Name == nil {
			break
		}

		return e.complexity.EnvPrefix.Name(childComplexity), true

	case "Environment.name":
		if e.complexity.Environment.Name == nil {
			break
		}

		return e.complexity.Environment.Name(childComplexity), true

	case "Environment.remoteEnvironments":
		if e.complexity.Environment.RemoteEnvironments == nil {
			break
		}

		return e.complexity.Environment.RemoteEnvironments(childComplexity), true

	case "EnvironmentMapping.environment":
		if e.complexity.EnvironmentMapping.Environment == nil {
			break
		}

		return e.complexity.EnvironmentMapping.Environment(childComplexity), true

	case "EnvironmentMapping.remoteEnvironment":
		if e.complexity.EnvironmentMapping.RemoteEnvironment == nil {
			break
		}

		return e.complexity.EnvironmentMapping.RemoteEnvironment(childComplexity), true

	case "EventActivation.name":
		if e.complexity.EventActivation.Name == nil {
			break
		}

		return e.complexity.EventActivation.Name(childComplexity), true

	case "EventActivation.displayName":
		if e.complexity.EventActivation.DisplayName == nil {
			break
		}

		return e.complexity.EventActivation.DisplayName(childComplexity), true

	case "EventActivation.source":
		if e.complexity.EventActivation.Source == nil {
			break
		}

		return e.complexity.EventActivation.Source(childComplexity), true

	case "EventActivation.events":
		if e.complexity.EventActivation.Events == nil {
			break
		}

		return e.complexity.EventActivation.Events(childComplexity), true

	case "EventActivationEvent.eventType":
		if e.complexity.EventActivationEvent.EventType == nil {
			break
		}

		return e.complexity.EventActivationEvent.EventType(childComplexity), true

	case "EventActivationEvent.version":
		if e.complexity.EventActivationEvent.Version == nil {
			break
		}

		return e.complexity.EventActivationEvent.Version(childComplexity), true

	case "EventActivationEvent.description":
		if e.complexity.EventActivationEvent.Description == nil {
			break
		}

		return e.complexity.EventActivationEvent.Description(childComplexity), true

	case "EventActivationSource.environment":
		if e.complexity.EventActivationSource.Environment == nil {
			break
		}

		return e.complexity.EventActivationSource.Environment(childComplexity), true

	case "EventActivationSource.type":
		if e.complexity.EventActivationSource.Type == nil {
			break
		}

		return e.complexity.EventActivationSource.Type(childComplexity), true

	case "EventActivationSource.namespace":
		if e.complexity.EventActivationSource.Namespace == nil {
			break
		}

		return e.complexity.EventActivationSource.Namespace(childComplexity), true

	case "ExceededQuota.quotaName":
		if e.complexity.ExceededQuota.QuotaName == nil {
			break
		}

		return e.complexity.ExceededQuota.QuotaName(childComplexity), true

	case "ExceededQuota.resourceName":
		if e.complexity.ExceededQuota.ResourceName == nil {
			break
		}

		return e.complexity.ExceededQuota.ResourceName(childComplexity), true

	case "ExceededQuota.affectedResources":
		if e.complexity.ExceededQuota.AffectedResources == nil {
			break
		}

		return e.complexity.ExceededQuota.AffectedResources(childComplexity), true

	case "Function.name":
		if e.complexity.Function.Name == nil {
			break
		}

		return e.complexity.Function.Name(childComplexity), true

	case "Function.trigger":
		if e.complexity.Function.Trigger == nil {
			break
		}

		return e.complexity.Function.Trigger(childComplexity), true

	case "Function.creationTimestamp":
		if e.complexity.Function.CreationTimestamp == nil {
			break
		}

		return e.complexity.Function.CreationTimestamp(childComplexity), true

	case "Function.labels":
		if e.complexity.Function.Labels == nil {
			break
		}

		return e.complexity.Function.Labels(childComplexity), true

	case "Function.environment":
		if e.complexity.Function.Environment == nil {
			break
		}

		return e.complexity.Function.Environment(childComplexity), true

	case "IDPPreset.name":
		if e.complexity.Idppreset.Name == nil {
			break
		}

		return e.complexity.Idppreset.Name(childComplexity), true

	case "IDPPreset.issuer":
		if e.complexity.Idppreset.Issuer == nil {
			break
		}

		return e.complexity.Idppreset.Issuer(childComplexity), true

	case "IDPPreset.jwksUri":
		if e.complexity.Idppreset.JwksUri == nil {
			break
		}

		return e.complexity.Idppreset.JwksUri(childComplexity), true

	case "LimitRange.name":
		if e.complexity.LimitRange.Name == nil {
			break
		}

		return e.complexity.LimitRange.Name(childComplexity), true

	case "LimitRange.limits":
		if e.complexity.LimitRange.Limits == nil {
			break
		}

		return e.complexity.LimitRange.Limits(childComplexity), true

	case "LimitRangeItem.limitType":
		if e.complexity.LimitRangeItem.LimitType == nil {
			break
		}

		return e.complexity.LimitRangeItem.LimitType(childComplexity), true

	case "LimitRangeItem.max":
		if e.complexity.LimitRangeItem.Max == nil {
			break
		}

		return e.complexity.LimitRangeItem.Max(childComplexity), true

	case "LimitRangeItem.default":
		if e.complexity.LimitRangeItem.Default == nil {
			break
		}

		return e.complexity.LimitRangeItem.Default(childComplexity), true

	case "LimitRangeItem.defaultRequest":
		if e.complexity.LimitRangeItem.DefaultRequest == nil {
			break
		}

		return e.complexity.LimitRangeItem.DefaultRequest(childComplexity), true

	case "LocalObjectReference.kind":
		if e.complexity.LocalObjectReference.Kind == nil {
			break
		}

		return e.complexity.LocalObjectReference.Kind(childComplexity), true

	case "LocalObjectReference.name":
		if e.complexity.LocalObjectReference.Name == nil {
			break
		}

		return e.complexity.LocalObjectReference.Name(childComplexity), true

	case "Mutation.createServiceInstance":
		if e.complexity.Mutation.CreateServiceInstance == nil {
			break
		}

		args, err := field_Mutation_createServiceInstance_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateServiceInstance(childComplexity, args["params"].(ServiceInstanceCreateInput)), true

	case "Mutation.deleteServiceInstance":
		if e.complexity.Mutation.DeleteServiceInstance == nil {
			break
		}

		args, err := field_Mutation_deleteServiceInstance_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteServiceInstance(childComplexity, args["name"].(string), args["environment"].(string)), true

	case "Mutation.createServiceBinding":
		if e.complexity.Mutation.CreateServiceBinding == nil {
			break
		}

		args, err := field_Mutation_createServiceBinding_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateServiceBinding(childComplexity, args["serviceBindingName"].(string), args["serviceInstanceName"].(string), args["environment"].(string)), true

	case "Mutation.deleteServiceBinding":
		if e.complexity.Mutation.DeleteServiceBinding == nil {
			break
		}

		args, err := field_Mutation_deleteServiceBinding_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteServiceBinding(childComplexity, args["serviceBindingName"].(string), args["environment"].(string)), true

	case "Mutation.createServiceBindingUsage":
		if e.complexity.Mutation.CreateServiceBindingUsage == nil {
			break
		}

		args, err := field_Mutation_createServiceBindingUsage_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateServiceBindingUsage(childComplexity, args["createServiceBindingUsageInput"].(*CreateServiceBindingUsageInput)), true

	case "Mutation.deleteServiceBindingUsage":
		if e.complexity.Mutation.DeleteServiceBindingUsage == nil {
			break
		}

		args, err := field_Mutation_deleteServiceBindingUsage_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteServiceBindingUsage(childComplexity, args["serviceBindingUsageName"].(string), args["environment"].(string)), true

	case "Mutation.enableRemoteEnvironment":
		if e.complexity.Mutation.EnableRemoteEnvironment == nil {
			break
		}

		args, err := field_Mutation_enableRemoteEnvironment_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EnableRemoteEnvironment(childComplexity, args["remoteEnvironment"].(string), args["environment"].(string)), true

	case "Mutation.disableRemoteEnvironment":
		if e.complexity.Mutation.DisableRemoteEnvironment == nil {
			break
		}

		args, err := field_Mutation_disableRemoteEnvironment_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DisableRemoteEnvironment(childComplexity, args["remoteEnvironment"].(string), args["environment"].(string)), true

	case "Mutation.createIDPPreset":
		if e.complexity.Mutation.CreateIdppreset == nil {
			break
		}

		args, err := field_Mutation_createIDPPreset_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIdppreset(childComplexity, args["name"].(string), args["issuer"].(string), args["jwksUri"].(string)), true

	case "Mutation.deleteIDPPreset":
		if e.complexity.Mutation.DeleteIdppreset == nil {
			break
		}

		args, err := field_Mutation_deleteIDPPreset_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIdppreset(childComplexity, args["name"].(string)), true

	case "Query.serviceInstance":
		if e.complexity.Query.ServiceInstance == nil {
			break
		}

		args, err := field_Query_serviceInstance_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceInstance(childComplexity, args["name"].(string), args["environment"].(string)), true

	case "Query.serviceInstances":
		if e.complexity.Query.ServiceInstances == nil {
			break
		}

		args, err := field_Query_serviceInstances_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceInstances(childComplexity, args["environment"].(string), args["first"].(*int), args["offset"].(*int), args["status"].(*InstanceStatusType)), true

	case "Query.serviceClasses":
		if e.complexity.Query.ServiceClasses == nil {
			break
		}

		args, err := field_Query_serviceClasses_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceClasses(childComplexity, args["first"].(*int), args["offset"].(*int)), true

	case "Query.serviceClass":
		if e.complexity.Query.ServiceClass == nil {
			break
		}

		args, err := field_Query_serviceClass_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceClass(childComplexity, args["name"].(string)), true

	case "Query.serviceBrokers":
		if e.complexity.Query.ServiceBrokers == nil {
			break
		}

		args, err := field_Query_serviceBrokers_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceBrokers(childComplexity, args["first"].(*int), args["offset"].(*int)), true

	case "Query.serviceBroker":
		if e.complexity.Query.ServiceBroker == nil {
			break
		}

		args, err := field_Query_serviceBroker_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceBroker(childComplexity, args["name"].(string)), true

	case "Query.serviceBindingUsage":
		if e.complexity.Query.ServiceBindingUsage == nil {
			break
		}

		args, err := field_Query_serviceBindingUsage_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceBindingUsage(childComplexity, args["name"].(string), args["environment"].(string)), true

	case "Query.serviceBinding":
		if e.complexity.Query.ServiceBinding == nil {
			break
		}

		args, err := field_Query_serviceBinding_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceBinding(childComplexity, args["name"].(string), args["environment"].(string)), true

	case "Query.usageKinds":
		if e.complexity.Query.UsageKinds == nil {
			break
		}

		args, err := field_Query_usageKinds_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UsageKinds(childComplexity, args["first"].(*int), args["offset"].(*int)), true

	case "Query.usageKindResources":
		if e.complexity.Query.UsageKindResources == nil {
			break
		}

		args, err := field_Query_usageKindResources_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UsageKindResources(childComplexity, args["usageKind"].(string), args["environment"].(string)), true

	case "Query.apis":
		if e.complexity.Query.Apis == nil {
			break
		}

		args, err := field_Query_apis_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Apis(childComplexity, args["environment"].(string), args["serviceName"].(*string), args["hostname"].(*string)), true

	case "Query.remoteEnvironment":
		if e.complexity.Query.RemoteEnvironment == nil {
			break
		}

		args, err := field_Query_remoteEnvironment_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RemoteEnvironment(childComplexity, args["name"].(string)), true

	case "Query.remoteEnvironments":
		if e.complexity.Query.RemoteEnvironments == nil {
			break
		}

		args, err := field_Query_remoteEnvironments_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RemoteEnvironments(childComplexity, args["environment"].(*string), args["first"].(*int), args["offset"].(*int)), true

	case "Query.connectorService":
		if e.complexity.Query.ConnectorService == nil {
			break
		}

		args, err := field_Query_connectorService_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConnectorService(childComplexity, args["remoteEnvironment"].(string)), true

	case "Query.environments":
		if e.complexity.Query.Environments == nil {
			break
		}

		args, err := field_Query_environments_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Environments(childComplexity, args["remoteEnvironment"].(*string)), true

	case "Query.deployments":
		if e.complexity.Query.Deployments == nil {
			break
		}

		args, err := field_Query_deployments_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Deployments(childComplexity, args["environment"].(string), args["excludeFunctions"].(*bool)), true

	case "Query.resourceQuotas":
		if e.complexity.Query.ResourceQuotas == nil {
			break
		}

		args, err := field_Query_resourceQuotas_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ResourceQuotas(childComplexity, args["environment"].(string)), true

	case "Query.resourceQuotasStatus":
		if e.complexity.Query.ResourceQuotasStatus == nil {
			break
		}

		args, err := field_Query_resourceQuotasStatus_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ResourceQuotasStatus(childComplexity, args["environment"].(string)), true

	case "Query.functions":
		if e.complexity.Query.Functions == nil {
			break
		}

		args, err := field_Query_functions_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Functions(childComplexity, args["environment"].(string), args["first"].(*int), args["offset"].(*int)), true

	case "Query.content":
		if e.complexity.Query.Content == nil {
			break
		}

		args, err := field_Query_content_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Content(childComplexity, args["contentType"].(string), args["id"].(string)), true

	case "Query.topics":
		if e.complexity.Query.Topics == nil {
			break
		}

		args, err := field_Query_topics_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Topics(childComplexity, args["input"].([]InputTopic), args["internal"].(*bool)), true

	case "Query.eventActivations":
		if e.complexity.Query.EventActivations == nil {
			break
		}

		args, err := field_Query_eventActivations_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EventActivations(childComplexity, args["environment"].(string)), true

	case "Query.limitRanges":
		if e.complexity.Query.LimitRanges == nil {
			break
		}

		args, err := field_Query_limitRanges_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitRanges(childComplexity, args["environment"].(string)), true

	case "Query.IDPPreset":
		if e.complexity.Query.Idppreset == nil {
			break
		}

		args, err := field_Query_IDPPreset_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Idppreset(childComplexity, args["name"].(string)), true

	case "Query.IDPPresets":
		if e.complexity.Query.Idppresets == nil {
			break
		}

		args, err := field_Query_IDPPresets_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Idppresets(childComplexity, args["first"].(*int), args["offset"].(*int)), true

	case "RemoteEnvironment.name":
		if e.complexity.RemoteEnvironment.Name == nil {
			break
		}

		return e.complexity.RemoteEnvironment.Name(childComplexity), true

	case "RemoteEnvironment.description":
		if e.complexity.RemoteEnvironment.Description == nil {
			break
		}

		return e.complexity.RemoteEnvironment.Description(childComplexity), true

	case "RemoteEnvironment.source":
		if e.complexity.RemoteEnvironment.Source == nil {
			break
		}

		return e.complexity.RemoteEnvironment.Source(childComplexity), true

	case "RemoteEnvironment.services":
		if e.complexity.RemoteEnvironment.Services == nil {
			break
		}

		return e.complexity.RemoteEnvironment.Services(childComplexity), true

	case "RemoteEnvironment.enabledInEnvironments":
		if e.complexity.RemoteEnvironment.EnabledInEnvironments == nil {
			break
		}

		return e.complexity.RemoteEnvironment.EnabledInEnvironments(childComplexity), true

	case "RemoteEnvironment.status":
		if e.complexity.RemoteEnvironment.Status == nil {
			break
		}

		return e.complexity.RemoteEnvironment.Status(childComplexity), true

	case "RemoteEnvironmentEntry.type":
		if e.complexity.RemoteEnvironmentEntry.Type == nil {
			break
		}

		return e.complexity.RemoteEnvironmentEntry.Type(childComplexity), true

	case "RemoteEnvironmentEntry.gatewayUrl":
		if e.complexity.RemoteEnvironmentEntry.GatewayUrl == nil {
			break
		}

		return e.complexity.RemoteEnvironmentEntry.GatewayUrl(childComplexity), true

	case "RemoteEnvironmentEntry.accessLabel":
		if e.complexity.RemoteEnvironmentEntry.AccessLabel == nil {
			break
		}

		return e.complexity.RemoteEnvironmentEntry.AccessLabel(childComplexity), true

	case "RemoteEnvironmentService.id":
		if e.complexity.RemoteEnvironmentService.Id == nil {
			break
		}

		return e.complexity.RemoteEnvironmentService.Id(childComplexity), true

	case "RemoteEnvironmentService.displayName":
		if e.complexity.RemoteEnvironmentService.DisplayName == nil {
			break
		}

		return e.complexity.RemoteEnvironmentService.DisplayName(childComplexity), true

	case "RemoteEnvironmentService.longDescription":
		if e.complexity.RemoteEnvironmentService.LongDescription == nil {
			break
		}

		return e.complexity.RemoteEnvironmentService.LongDescription(childComplexity), true

	case "RemoteEnvironmentService.providerDisplayName":
		if e.complexity.RemoteEnvironmentService.ProviderDisplayName == nil {
			break
		}

		return e.complexity.RemoteEnvironmentService.ProviderDisplayName(childComplexity), true

	case "RemoteEnvironmentService.tags":
		if e.complexity.RemoteEnvironmentService.Tags == nil {
			break
		}

		return e.complexity.RemoteEnvironmentService.Tags(childComplexity), true

	case "RemoteEnvironmentService.entries":
		if e.complexity.RemoteEnvironmentService.Entries == nil {
			break
		}

		return e.complexity.RemoteEnvironmentService.Entries(childComplexity), true

	case "RemoteEnvironmentSource.environment":
		if e.complexity.RemoteEnvironmentSource.Environment == nil {
			break
		}

		return e.complexity.RemoteEnvironmentSource.Environment(childComplexity), true

	case "RemoteEnvironmentSource.type":
		if e.complexity.RemoteEnvironmentSource.Type == nil {
			break
		}

		return e.complexity.RemoteEnvironmentSource.Type(childComplexity), true

	case "RemoteEnvironmentSource.namespace":
		if e.complexity.RemoteEnvironmentSource.Namespace == nil {
			break
		}

		return e.complexity.RemoteEnvironmentSource.Namespace(childComplexity), true

	case "ResourceQuota.name":
		if e.complexity.ResourceQuota.Name == nil {
			break
		}

		return e.complexity.ResourceQuota.Name(childComplexity), true

	case "ResourceQuota.pods":
		if e.complexity.ResourceQuota.Pods == nil {
			break
		}

		return e.complexity.ResourceQuota.Pods(childComplexity), true

	case "ResourceQuota.limits":
		if e.complexity.ResourceQuota.Limits == nil {
			break
		}

		return e.complexity.ResourceQuota.Limits(childComplexity), true

	case "ResourceQuota.requests":
		if e.complexity.ResourceQuota.Requests == nil {
			break
		}

		return e.complexity.ResourceQuota.Requests(childComplexity), true

	case "ResourceQuotasStatus.exceeded":
		if e.complexity.ResourceQuotasStatus.Exceeded == nil {
			break
		}

		return e.complexity.ResourceQuotasStatus.Exceeded(childComplexity), true

	case "ResourceQuotasStatus.exceededQuotas":
		if e.complexity.ResourceQuotasStatus.ExceededQuotas == nil {
			break
		}

		return e.complexity.ResourceQuotasStatus.ExceededQuotas(childComplexity), true

	case "ResourceType.memory":
		if e.complexity.ResourceType.Memory == nil {
			break
		}

		return e.complexity.ResourceType.Memory(childComplexity), true

	case "ResourceType.cpu":
		if e.complexity.ResourceType.Cpu == nil {
			break
		}

		return e.complexity.ResourceType.Cpu(childComplexity), true

	case "ResourceValues.memory":
		if e.complexity.ResourceValues.Memory == nil {
			break
		}

		return e.complexity.ResourceValues.Memory(childComplexity), true

	case "ResourceValues.cpu":
		if e.complexity.ResourceValues.Cpu == nil {
			break
		}

		return e.complexity.ResourceValues.Cpu(childComplexity), true

	case "Secret.name":
		if e.complexity.Secret.Name == nil {
			break
		}

		return e.complexity.Secret.Name(childComplexity), true

	case "Secret.environment":
		if e.complexity.Secret.Environment == nil {
			break
		}

		return e.complexity.Secret.Environment(childComplexity), true

	case "Secret.data":
		if e.complexity.Secret.Data == nil {
			break
		}

		return e.complexity.Secret.Data(childComplexity), true

	case "Section.titles":
		if e.complexity.Section.Titles == nil {
			break
		}

		return e.complexity.Section.Titles(childComplexity), true

	case "Section.topicType":
		if e.complexity.Section.TopicType == nil {
			break
		}

		return e.complexity.Section.TopicType(childComplexity), true

	case "Service.name":
		if e.complexity.Service.Name == nil {
			break
		}

		return e.complexity.Service.Name(childComplexity), true

	case "Service.port":
		if e.complexity.Service.Port == nil {
			break
		}

		return e.complexity.Service.Port(childComplexity), true

	case "ServiceBinding.name":
		if e.complexity.ServiceBinding.Name == nil {
			break
		}

		return e.complexity.ServiceBinding.Name(childComplexity), true

	case "ServiceBinding.serviceInstanceName":
		if e.complexity.ServiceBinding.ServiceInstanceName == nil {
			break
		}

		return e.complexity.ServiceBinding.ServiceInstanceName(childComplexity), true

	case "ServiceBinding.environment":
		if e.complexity.ServiceBinding.Environment == nil {
			break
		}

		return e.complexity.ServiceBinding.Environment(childComplexity), true

	case "ServiceBinding.secret":
		if e.complexity.ServiceBinding.Secret == nil {
			break
		}

		return e.complexity.ServiceBinding.Secret(childComplexity), true

	case "ServiceBinding.status":
		if e.complexity.ServiceBinding.Status == nil {
			break
		}

		return e.complexity.ServiceBinding.Status(childComplexity), true

	case "ServiceBindingEvent.type":
		if e.complexity.ServiceBindingEvent.Type == nil {
			break
		}

		return e.complexity.ServiceBindingEvent.Type(childComplexity), true

	case "ServiceBindingEvent.binding":
		if e.complexity.ServiceBindingEvent.Binding == nil {
			break
		}

		return e.complexity.ServiceBindingEvent.Binding(childComplexity), true

	case "ServiceBindingStatus.type":
		if e.complexity.ServiceBindingStatus.Type == nil {
			break
		}

		return e.complexity.ServiceBindingStatus.Type(childComplexity), true

	case "ServiceBindingStatus.reason":
		if e.complexity.ServiceBindingStatus.Reason == nil {
			break
		}

		return e.complexity.ServiceBindingStatus.Reason(childComplexity), true

	case "ServiceBindingStatus.message":
		if e.complexity.ServiceBindingStatus.Message == nil {
			break
		}

		return e.complexity.ServiceBindingStatus.Message(childComplexity), true

	case "ServiceBindingUsage.name":
		if e.complexity.ServiceBindingUsage.Name == nil {
			break
		}

		return e.complexity.ServiceBindingUsage.Name(childComplexity), true

	case "ServiceBindingUsage.environment":
		if e.complexity.ServiceBindingUsage.Environment == nil {
			break
		}

		return e.complexity.ServiceBindingUsage.Environment(childComplexity), true

	case "ServiceBindingUsage.serviceBinding":
		if e.complexity.ServiceBindingUsage.ServiceBinding == nil {
			break
		}

		return e.complexity.ServiceBindingUsage.ServiceBinding(childComplexity), true

	case "ServiceBindingUsage.usedBy":
		if e.complexity.ServiceBindingUsage.UsedBy == nil {
			break
		}

		return e.complexity.ServiceBindingUsage.UsedBy(childComplexity), true

	case "ServiceBindingUsage.parameters":
		if e.complexity.ServiceBindingUsage.Parameters == nil {
			break
		}

		return e.complexity.ServiceBindingUsage.Parameters(childComplexity), true

	case "ServiceBindingUsage.status":
		if e.complexity.ServiceBindingUsage.Status == nil {
			break
		}

		return e.complexity.ServiceBindingUsage.Status(childComplexity), true

	case "ServiceBindingUsageEvent.type":
		if e.complexity.ServiceBindingUsageEvent.Type == nil {
			break
		}

		return e.complexity.ServiceBindingUsageEvent.Type(childComplexity), true

	case "ServiceBindingUsageEvent.bindingUsage":
		if e.complexity.ServiceBindingUsageEvent.BindingUsage == nil {
			break
		}

		return e.complexity.ServiceBindingUsageEvent.BindingUsage(childComplexity), true

	case "ServiceBindingUsageParameters.envPrefix":
		if e.complexity.ServiceBindingUsageParameters.EnvPrefix == nil {
			break
		}

		return e.complexity.ServiceBindingUsageParameters.EnvPrefix(childComplexity), true

	case "ServiceBindingUsageStatus.type":
		if e.complexity.ServiceBindingUsageStatus.Type == nil {
			break
		}

		return e.complexity.ServiceBindingUsageStatus.Type(childComplexity), true

	case "ServiceBindingUsageStatus.reason":
		if e.complexity.ServiceBindingUsageStatus.Reason == nil {
			break
		}

		return e.complexity.ServiceBindingUsageStatus.Reason(childComplexity), true

	case "ServiceBindingUsageStatus.message":
		if e.complexity.ServiceBindingUsageStatus.Message == nil {
			break
		}

		return e.complexity.ServiceBindingUsageStatus.Message(childComplexity), true

	case "ServiceBroker.name":
		if e.complexity.ServiceBroker.Name == nil {
			break
		}

		return e.complexity.ServiceBroker.Name(childComplexity), true

	case "ServiceBroker.status":
		if e.complexity.ServiceBroker.Status == nil {
			break
		}

		return e.complexity.ServiceBroker.Status(childComplexity), true

	case "ServiceBroker.creationTimestamp":
		if e.complexity.ServiceBroker.CreationTimestamp == nil {
			break
		}

		return e.complexity.ServiceBroker.CreationTimestamp(childComplexity), true

	case "ServiceBroker.url":
		if e.complexity.ServiceBroker.Url == nil {
			break
		}

		return e.complexity.ServiceBroker.Url(childComplexity), true

	case "ServiceBroker.labels":
		if e.complexity.ServiceBroker.Labels == nil {
			break
		}

		return e.complexity.ServiceBroker.Labels(childComplexity), true

	case "ServiceBrokerStatus.ready":
		if e.complexity.ServiceBrokerStatus.Ready == nil {
			break
		}

		return e.complexity.ServiceBrokerStatus.Ready(childComplexity), true

	case "ServiceBrokerStatus.reason":
		if e.complexity.ServiceBrokerStatus.Reason == nil {
			break
		}

		return e.complexity.ServiceBrokerStatus.Reason(childComplexity), true

	case "ServiceBrokerStatus.message":
		if e.complexity.ServiceBrokerStatus.Message == nil {
			break
		}

		return e.complexity.ServiceBrokerStatus.Message(childComplexity), true

	case "ServiceClass.name":
		if e.complexity.ServiceClass.Name == nil {
			break
		}

		return e.complexity.ServiceClass.Name(childComplexity), true

	case "ServiceClass.externalName":
		if e.complexity.ServiceClass.ExternalName == nil {
			break
		}

		return e.complexity.ServiceClass.ExternalName(childComplexity), true

	case "ServiceClass.displayName":
		if e.complexity.ServiceClass.DisplayName == nil {
			break
		}

		return e.complexity.ServiceClass.DisplayName(childComplexity), true

	case "ServiceClass.creationTimestamp":
		if e.complexity.ServiceClass.CreationTimestamp == nil {
			break
		}

		return e.complexity.ServiceClass.CreationTimestamp(childComplexity), true

	case "ServiceClass.description":
		if e.complexity.ServiceClass.Description == nil {
			break
		}

		return e.complexity.ServiceClass.Description(childComplexity), true

	case "ServiceClass.longDescription":
		if e.complexity.ServiceClass.LongDescription == nil {
			break
		}

		return e.complexity.ServiceClass.LongDescription(childComplexity), true

	case "ServiceClass.imageUrl":
		if e.complexity.ServiceClass.ImageUrl == nil {
			break
		}

		return e.complexity.ServiceClass.ImageUrl(childComplexity), true

	case "ServiceClass.documentationUrl":
		if e.complexity.ServiceClass.DocumentationUrl == nil {
			break
		}

		return e.complexity.ServiceClass.DocumentationUrl(childComplexity), true

	case "ServiceClass.supportUrl":
		if e.complexity.ServiceClass.SupportUrl == nil {
			break
		}

		return e.complexity.ServiceClass.SupportUrl(childComplexity), true

	case "ServiceClass.providerDisplayName":
		if e.complexity.ServiceClass.ProviderDisplayName == nil {
			break
		}

		return e.complexity.ServiceClass.ProviderDisplayName(childComplexity), true

	case "ServiceClass.tags":
		if e.complexity.ServiceClass.Tags == nil {
			break
		}

		return e.complexity.ServiceClass.Tags(childComplexity), true

	case "ServiceClass.plans":
		if e.complexity.ServiceClass.Plans == nil {
			break
		}

		return e.complexity.ServiceClass.Plans(childComplexity), true

	case "ServiceClass.activated":
		if e.complexity.ServiceClass.Activated == nil {
			break
		}

		return e.complexity.ServiceClass.Activated(childComplexity), true

	case "ServiceClass.apiSpec":
		if e.complexity.ServiceClass.ApiSpec == nil {
			break
		}

		return e.complexity.ServiceClass.ApiSpec(childComplexity), true

	case "ServiceClass.asyncApiSpec":
		if e.complexity.ServiceClass.AsyncApiSpec == nil {
			break
		}

		return e.complexity.ServiceClass.AsyncApiSpec(childComplexity), true

	case "ServiceClass.content":
		if e.complexity.ServiceClass.Content == nil {
			break
		}

		return e.complexity.ServiceClass.Content(childComplexity), true

	case "ServiceInstance.name":
		if e.complexity.ServiceInstance.Name == nil {
			break
		}

		return e.complexity.ServiceInstance.Name(childComplexity), true

	case "ServiceInstance.environment":
		if e.complexity.ServiceInstance.Environment == nil {
			break
		}

		return e.complexity.ServiceInstance.Environment(childComplexity), true

	case "ServiceInstance.serviceClassName":
		if e.complexity.ServiceInstance.ServiceClassName == nil {
			break
		}

		return e.complexity.ServiceInstance.ServiceClassName(childComplexity), true

	case "ServiceInstance.ServiceClassDisplayName":
		if e.complexity.ServiceInstance.ServiceClassDisplayName == nil {
			break
		}

		return e.complexity.ServiceInstance.ServiceClassDisplayName(childComplexity), true

	case "ServiceInstance.servicePlanName":
		if e.complexity.ServiceInstance.ServicePlanName == nil {
			break
		}

		return e.complexity.ServiceInstance.ServicePlanName(childComplexity), true

	case "ServiceInstance.servicePlanDisplayName":
		if e.complexity.ServiceInstance.ServicePlanDisplayName == nil {
			break
		}

		return e.complexity.ServiceInstance.ServicePlanDisplayName(childComplexity), true

	case "ServiceInstance.servicePlanSpec":
		if e.complexity.ServiceInstance.ServicePlanSpec == nil {
			break
		}

		return e.complexity.ServiceInstance.ServicePlanSpec(childComplexity), true

	case "ServiceInstance.creationTimestamp":
		if e.complexity.ServiceInstance.CreationTimestamp == nil {
			break
		}

		return e.complexity.ServiceInstance.CreationTimestamp(childComplexity), true

	case "ServiceInstance.labels":
		if e.complexity.ServiceInstance.Labels == nil {
			break
		}

		return e.complexity.ServiceInstance.Labels(childComplexity), true

	case "ServiceInstance.status":
		if e.complexity.ServiceInstance.Status == nil {
			break
		}

		return e.complexity.ServiceInstance.Status(childComplexity), true

	case "ServiceInstance.servicePlan":
		if e.complexity.ServiceInstance.ServicePlan == nil {
			break
		}

		return e.complexity.ServiceInstance.ServicePlan(childComplexity), true

	case "ServiceInstance.serviceClass":
		if e.complexity.ServiceInstance.ServiceClass == nil {
			break
		}

		return e.complexity.ServiceInstance.ServiceClass(childComplexity), true

	case "ServiceInstance.bindable":
		if e.complexity.ServiceInstance.Bindable == nil {
			break
		}

		return e.complexity.ServiceInstance.Bindable(childComplexity), true

	case "ServiceInstance.serviceBindings":
		if e.complexity.ServiceInstance.ServiceBindings == nil {
			break
		}

		return e.complexity.ServiceInstance.ServiceBindings(childComplexity), true

	case "ServiceInstance.serviceBindingUsages":
		if e.complexity.ServiceInstance.ServiceBindingUsages == nil {
			break
		}

		return e.complexity.ServiceInstance.ServiceBindingUsages(childComplexity), true

	case "ServiceInstanceEvent.type":
		if e.complexity.ServiceInstanceEvent.Type == nil {
			break
		}

		return e.complexity.ServiceInstanceEvent.Type(childComplexity), true

	case "ServiceInstanceEvent.instance":
		if e.complexity.ServiceInstanceEvent.Instance == nil {
			break
		}

		return e.complexity.ServiceInstanceEvent.Instance(childComplexity), true

	case "ServiceInstanceStatus.type":
		if e.complexity.ServiceInstanceStatus.Type == nil {
			break
		}

		return e.complexity.ServiceInstanceStatus.Type(childComplexity), true

	case "ServiceInstanceStatus.reason":
		if e.complexity.ServiceInstanceStatus.Reason == nil {
			break
		}

		return e.complexity.ServiceInstanceStatus.Reason(childComplexity), true

	case "ServiceInstanceStatus.message":
		if e.complexity.ServiceInstanceStatus.Message == nil {
			break
		}

		return e.complexity.ServiceInstanceStatus.Message(childComplexity), true

	case "ServicePlan.name":
		if e.complexity.ServicePlan.Name == nil {
			break
		}

		return e.complexity.ServicePlan.Name(childComplexity), true

	case "ServicePlan.displayName":
		if e.complexity.ServicePlan.DisplayName == nil {
			break
		}

		return e.complexity.ServicePlan.DisplayName(childComplexity), true

	case "ServicePlan.externalName":
		if e.complexity.ServicePlan.ExternalName == nil {
			break
		}

		return e.complexity.ServicePlan.ExternalName(childComplexity), true

	case "ServicePlan.description":
		if e.complexity.ServicePlan.Description == nil {
			break
		}

		return e.complexity.ServicePlan.Description(childComplexity), true

	case "ServicePlan.relatedServiceClassName":
		if e.complexity.ServicePlan.RelatedServiceClassName == nil {
			break
		}

		return e.complexity.ServicePlan.RelatedServiceClassName(childComplexity), true

	case "ServicePlan.instanceCreateParameterSchema":
		if e.complexity.ServicePlan.InstanceCreateParameterSchema == nil {
			break
		}

		return e.complexity.ServicePlan.InstanceCreateParameterSchema(childComplexity), true

	case "Subscription.serviceInstanceEvent":
		if e.complexity.Subscription.ServiceInstanceEvent == nil {
			break
		}

		args, err := field_Subscription_serviceInstanceEvent_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ServiceInstanceEvent(childComplexity, args["environment"].(string)), true

	case "Subscription.serviceBindingEventForServiceInstance":
		if e.complexity.Subscription.ServiceBindingEventForServiceInstance == nil {
			break
		}

		args, err := field_Subscription_serviceBindingEventForServiceInstance_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ServiceBindingEventForServiceInstance(childComplexity, args["serviceInstanceName"].(string), args["environment"].(string)), true

	case "Subscription.serviceBindingUsageEventForServiceInstance":
		if e.complexity.Subscription.ServiceBindingUsageEventForServiceInstance == nil {
			break
		}

		args, err := field_Subscription_serviceBindingUsageEventForServiceInstance_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ServiceBindingUsageEventForServiceInstance(childComplexity, args["serviceInstanceName"].(string), args["environment"].(string)), true

	case "Title.name":
		if e.complexity.Title.Name == nil {
			break
		}

		return e.complexity.Title.Name(childComplexity), true

	case "Title.anchor":
		if e.complexity.Title.Anchor == nil {
			break
		}

		return e.complexity.Title.Anchor(childComplexity), true

	case "Title.titles":
		if e.complexity.Title.Titles == nil {
			break
		}

		return e.complexity.Title.Titles(childComplexity), true

	case "TopicEntry.contentType":
		if e.complexity.TopicEntry.ContentType == nil {
			break
		}

		return e.complexity.TopicEntry.ContentType(childComplexity), true

	case "TopicEntry.id":
		if e.complexity.TopicEntry.Id == nil {
			break
		}

		return e.complexity.TopicEntry.Id(childComplexity), true

	case "TopicEntry.sections":
		if e.complexity.TopicEntry.Sections == nil {
			break
		}

		return e.complexity.TopicEntry.Sections(childComplexity), true

	case "UsageKind.name":
		if e.complexity.UsageKind.Name == nil {
			break
		}

		return e.complexity.UsageKind.Name(childComplexity), true

	case "UsageKind.group":
		if e.complexity.UsageKind.Group == nil {
			break
		}

		return e.complexity.UsageKind.Group(childComplexity), true

	case "UsageKind.kind":
		if e.complexity.UsageKind.Kind == nil {
			break
		}

		return e.complexity.UsageKind.Kind(childComplexity), true

	case "UsageKind.version":
		if e.complexity.UsageKind.Version == nil {
			break
		}

		return e.complexity.UsageKind.Version(childComplexity), true

	case "UsageKind.displayName":
		if e.complexity.UsageKind.DisplayName == nil {
			break
		}

		return e.complexity.UsageKind.DisplayName(childComplexity), true

	case "UsageKindResource.name":
		if e.complexity.UsageKindResource.Name == nil {
			break
		}

		return e.complexity.UsageKindResource.Name(childComplexity), true

	case "UsageKindResource.namespace":
		if e.complexity.UsageKindResource.Namespace == nil {
			break
		}

		return e.complexity.UsageKindResource.Namespace(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	next := ec._Subscription(ctx, op.SelectionSet)
	if ec.Errors != nil {
		return graphql.OneShot(&graphql.Response{Data: []byte("null"), Errors: ec.Errors})
	}

	var buf bytes.Buffer
	return func() *graphql.Response {
		buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)
			return buf.Bytes()
		})

		if buf == nil {
			return nil
		}

		return &graphql.Response{
			Data:   buf,
			Errors: ec.Errors,
		}
	}
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

var aPIImplementors = []string{"API"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _API(ctx context.Context, sel ast.SelectionSet, obj *API) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, aPIImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("API")
		case "name":
			out.Values[i] = ec._API_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "hostname":
			out.Values[i] = ec._API_hostname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "service":
			out.Values[i] = ec._API_service(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "authenticationPolicies":
			out.Values[i] = ec._API_authenticationPolicies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _API_name(ctx context.Context, field graphql.CollectedField, obj *API) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "API",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _API_hostname(ctx context.Context, field graphql.CollectedField, obj *API) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "API",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Hostname, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _API_service(ctx context.Context, field graphql.CollectedField, obj *API) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "API",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Service, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(Service)
	rctx.Result = res

	return ec._Service(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _API_authenticationPolicies(ctx context.Context, field graphql.CollectedField, obj *API) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "API",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.AuthenticationPolicies, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]AuthenticationPolicy)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._AuthenticationPolicy(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var authenticationPolicyImplementors = []string{"AuthenticationPolicy"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AuthenticationPolicy(ctx context.Context, sel ast.SelectionSet, obj *AuthenticationPolicy) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, authenticationPolicyImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthenticationPolicy")
		case "type":
			out.Values[i] = ec._AuthenticationPolicy_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "issuer":
			out.Values[i] = ec._AuthenticationPolicy_issuer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "jwksURI":
			out.Values[i] = ec._AuthenticationPolicy_jwksURI(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _AuthenticationPolicy_type(ctx context.Context, field graphql.CollectedField, obj *AuthenticationPolicy) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "AuthenticationPolicy",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(AuthenticationPolicyType)
	rctx.Result = res
	return res
}

// nolint: vetshadow
func (ec *executionContext) _AuthenticationPolicy_issuer(ctx context.Context, field graphql.CollectedField, obj *AuthenticationPolicy) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "AuthenticationPolicy",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Issuer, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _AuthenticationPolicy_jwksURI(ctx context.Context, field graphql.CollectedField, obj *AuthenticationPolicy) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "AuthenticationPolicy",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.JwksURI, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var connectorServiceImplementors = []string{"ConnectorService"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ConnectorService(ctx context.Context, sel ast.SelectionSet, obj *ConnectorService) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, connectorServiceImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectorService")
		case "url":
			out.Values[i] = ec._ConnectorService_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ConnectorService_url(ctx context.Context, field graphql.CollectedField, obj *ConnectorService) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ConnectorService",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.URL, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var containerImplementors = []string{"Container"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Container(ctx context.Context, sel ast.SelectionSet, obj *Container) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, containerImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Container")
		case "name":
			out.Values[i] = ec._Container_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "image":
			out.Values[i] = ec._Container_image(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Container_name(ctx context.Context, field graphql.CollectedField, obj *Container) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Container",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Container_image(ctx context.Context, field graphql.CollectedField, obj *Container) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Container",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Image, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var createServiceBindingOutputImplementors = []string{"CreateServiceBindingOutput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CreateServiceBindingOutput(ctx context.Context, sel ast.SelectionSet, obj *CreateServiceBindingOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, createServiceBindingOutputImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateServiceBindingOutput")
		case "name":
			out.Values[i] = ec._CreateServiceBindingOutput_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "serviceInstanceName":
			out.Values[i] = ec._CreateServiceBindingOutput_serviceInstanceName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "environment":
			out.Values[i] = ec._CreateServiceBindingOutput_environment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _CreateServiceBindingOutput_name(ctx context.Context, field graphql.CollectedField, obj *CreateServiceBindingOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "CreateServiceBindingOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CreateServiceBindingOutput_serviceInstanceName(ctx context.Context, field graphql.CollectedField, obj *CreateServiceBindingOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "CreateServiceBindingOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ServiceInstanceName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _CreateServiceBindingOutput_environment(ctx context.Context, field graphql.CollectedField, obj *CreateServiceBindingOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "CreateServiceBindingOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Environment, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var deleteServiceBindingOutputImplementors = []string{"DeleteServiceBindingOutput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _DeleteServiceBindingOutput(ctx context.Context, sel ast.SelectionSet, obj *DeleteServiceBindingOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, deleteServiceBindingOutputImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteServiceBindingOutput")
		case "name":
			out.Values[i] = ec._DeleteServiceBindingOutput_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "environment":
			out.Values[i] = ec._DeleteServiceBindingOutput_environment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _DeleteServiceBindingOutput_name(ctx context.Context, field graphql.CollectedField, obj *DeleteServiceBindingOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeleteServiceBindingOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _DeleteServiceBindingOutput_environment(ctx context.Context, field graphql.CollectedField, obj *DeleteServiceBindingOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeleteServiceBindingOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Environment, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var deleteServiceBindingUsageOutputImplementors = []string{"DeleteServiceBindingUsageOutput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _DeleteServiceBindingUsageOutput(ctx context.Context, sel ast.SelectionSet, obj *DeleteServiceBindingUsageOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, deleteServiceBindingUsageOutputImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteServiceBindingUsageOutput")
		case "name":
			out.Values[i] = ec._DeleteServiceBindingUsageOutput_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "environment":
			out.Values[i] = ec._DeleteServiceBindingUsageOutput_environment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _DeleteServiceBindingUsageOutput_name(ctx context.Context, field graphql.CollectedField, obj *DeleteServiceBindingUsageOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeleteServiceBindingUsageOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _DeleteServiceBindingUsageOutput_environment(ctx context.Context, field graphql.CollectedField, obj *DeleteServiceBindingUsageOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeleteServiceBindingUsageOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Environment, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var deploymentImplementors = []string{"Deployment"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Deployment(ctx context.Context, sel ast.SelectionSet, obj *Deployment) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, deploymentImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Deployment")
		case "name":
			out.Values[i] = ec._Deployment_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "environment":
			out.Values[i] = ec._Deployment_environment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "creationTimestamp":
			out.Values[i] = ec._Deployment_creationTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "status":
			out.Values[i] = ec._Deployment_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "labels":
			out.Values[i] = ec._Deployment_labels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "containers":
			out.Values[i] = ec._Deployment_containers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "boundServiceInstanceNames":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Deployment_boundServiceInstanceNames(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Deployment_name(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Deployment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Deployment_environment(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Deployment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Environment, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Deployment_creationTimestamp(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Deployment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.CreationTimestamp, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return MarshalTimestamp(res)
}

// nolint: vetshadow
func (ec *executionContext) _Deployment_status(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Deployment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(DeploymentStatus)
	rctx.Result = res

	return ec._DeploymentStatus(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Deployment_labels(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Deployment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Labels, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(JSON)
	rctx.Result = res
	return res
}

// nolint: vetshadow
func (ec *executionContext) _Deployment_containers(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Deployment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Containers, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]Container)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._Container(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Deployment_boundServiceInstanceNames(ctx context.Context, field graphql.CollectedField, obj *Deployment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Deployment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Deployment().BoundServiceInstanceNames(ctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var deploymentConditionImplementors = []string{"DeploymentCondition"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _DeploymentCondition(ctx context.Context, sel ast.SelectionSet, obj *DeploymentCondition) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, deploymentConditionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeploymentCondition")
		case "status":
			out.Values[i] = ec._DeploymentCondition_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "type":
			out.Values[i] = ec._DeploymentCondition_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "lastTransitionTimestamp":
			out.Values[i] = ec._DeploymentCondition_lastTransitionTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "lastUpdateTimestamp":
			out.Values[i] = ec._DeploymentCondition_lastUpdateTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "message":
			out.Values[i] = ec._DeploymentCondition_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "reason":
			out.Values[i] = ec._DeploymentCondition_reason(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _DeploymentCondition_status(ctx context.Context, field graphql.CollectedField, obj *DeploymentCondition) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeploymentCondition",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _DeploymentCondition_type(ctx context.Context, field graphql.CollectedField, obj *DeploymentCondition) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeploymentCondition",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _DeploymentCondition_lastTransitionTimestamp(ctx context.Context, field graphql.CollectedField, obj *DeploymentCondition) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeploymentCondition",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.LastTransitionTimestamp, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return MarshalTimestamp(res)
}

// nolint: vetshadow
func (ec *executionContext) _DeploymentCondition_lastUpdateTimestamp(ctx context.Context, field graphql.CollectedField, obj *DeploymentCondition) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeploymentCondition",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.LastUpdateTimestamp, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return MarshalTimestamp(res)
}

// nolint: vetshadow
func (ec *executionContext) _DeploymentCondition_message(ctx context.Context, field graphql.CollectedField, obj *DeploymentCondition) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeploymentCondition",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Message, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _DeploymentCondition_reason(ctx context.Context, field graphql.CollectedField, obj *DeploymentCondition) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeploymentCondition",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Reason, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var deploymentStatusImplementors = []string{"DeploymentStatus"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _DeploymentStatus(ctx context.Context, sel ast.SelectionSet, obj *DeploymentStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, deploymentStatusImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeploymentStatus")
		case "replicas":
			out.Values[i] = ec._DeploymentStatus_replicas(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "updatedReplicas":
			out.Values[i] = ec._DeploymentStatus_updatedReplicas(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "readyReplicas":
			out.Values[i] = ec._DeploymentStatus_readyReplicas(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "availableReplicas":
			out.Values[i] = ec._DeploymentStatus_availableReplicas(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "conditions":
			out.Values[i] = ec._DeploymentStatus_conditions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _DeploymentStatus_replicas(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeploymentStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Replicas, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _DeploymentStatus_updatedReplicas(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeploymentStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedReplicas, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _DeploymentStatus_readyReplicas(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeploymentStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ReadyReplicas, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _DeploymentStatus_availableReplicas(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeploymentStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.AvailableReplicas, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return graphql.MarshalInt(res)
}

// nolint: vetshadow
func (ec *executionContext) _DeploymentStatus_conditions(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "DeploymentStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Conditions, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]DeploymentCondition)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._DeploymentCondition(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var envPrefixImplementors = []string{"EnvPrefix"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _EnvPrefix(ctx context.Context, sel ast.SelectionSet, obj *EnvPrefix) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, envPrefixImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnvPrefix")
		case "name":
			out.Values[i] = ec._EnvPrefix_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _EnvPrefix_name(ctx context.Context, field graphql.CollectedField, obj *EnvPrefix) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "EnvPrefix",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var environmentImplementors = []string{"Environment"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Environment(ctx context.Context, sel ast.SelectionSet, obj *Environment) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, environmentImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Environment")
		case "name":
			out.Values[i] = ec._Environment_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "remoteEnvironments":
			out.Values[i] = ec._Environment_remoteEnvironments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Environment_name(ctx context.Context, field graphql.CollectedField, obj *Environment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Environment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Environment_remoteEnvironments(ctx context.Context, field graphql.CollectedField, obj *Environment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Environment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.RemoteEnvironments, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var environmentMappingImplementors = []string{"EnvironmentMapping"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _EnvironmentMapping(ctx context.Context, sel ast.SelectionSet, obj *EnvironmentMapping) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, environmentMappingImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnvironmentMapping")
		case "environment":
			out.Values[i] = ec._EnvironmentMapping_environment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "remoteEnvironment":
			out.Values[i] = ec._EnvironmentMapping_remoteEnvironment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _EnvironmentMapping_environment(ctx context.Context, field graphql.CollectedField, obj *EnvironmentMapping) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "EnvironmentMapping",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Environment, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _EnvironmentMapping_remoteEnvironment(ctx context.Context, field graphql.CollectedField, obj *EnvironmentMapping) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "EnvironmentMapping",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.RemoteEnvironment, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var eventActivationImplementors = []string{"EventActivation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _EventActivation(ctx context.Context, sel ast.SelectionSet, obj *EventActivation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, eventActivationImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventActivation")
		case "name":
			out.Values[i] = ec._EventActivation_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "displayName":
			out.Values[i] = ec._EventActivation_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "source":
			out.Values[i] = ec._EventActivation_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "events":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._EventActivation_events(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _EventActivation_name(ctx context.Context, field graphql.CollectedField, obj *EventActivation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "EventActivation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _EventActivation_displayName(ctx context.Context, field graphql.CollectedField, obj *EventActivation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "EventActivation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.DisplayName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _EventActivation_source(ctx context.Context, field graphql.CollectedField, obj *EventActivation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "EventActivation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Source, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(EventActivationSource)
	rctx.Result = res

	return ec._EventActivationSource(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _EventActivation_events(ctx context.Context, field graphql.CollectedField, obj *EventActivation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "EventActivation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.EventActivation().Events(ctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]EventActivationEvent)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._EventActivationEvent(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var eventActivationEventImplementors = []string{"EventActivationEvent"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _EventActivationEvent(ctx context.Context, sel ast.SelectionSet, obj *EventActivationEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, eventActivationEventImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventActivationEvent")
		case "eventType":
			out.Values[i] = ec._EventActivationEvent_eventType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "version":
			out.Values[i] = ec._EventActivationEvent_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec._EventActivationEvent_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _EventActivationEvent_eventType(ctx context.Context, field graphql.CollectedField, obj *EventActivationEvent) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "EventActivationEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.EventType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _EventActivationEvent_version(ctx context.Context, field graphql.CollectedField, obj *EventActivationEvent) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "EventActivationEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Version, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _EventActivationEvent_description(ctx context.Context, field graphql.CollectedField, obj *EventActivationEvent) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "EventActivationEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var eventActivationSourceImplementors = []string{"EventActivationSource"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _EventActivationSource(ctx context.Context, sel ast.SelectionSet, obj *EventActivationSource) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, eventActivationSourceImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventActivationSource")
		case "environment":
			out.Values[i] = ec._EventActivationSource_environment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "type":
			out.Values[i] = ec._EventActivationSource_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "namespace":
			out.Values[i] = ec._EventActivationSource_namespace(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _EventActivationSource_environment(ctx context.Context, field graphql.CollectedField, obj *EventActivationSource) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "EventActivationSource",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Environment, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _EventActivationSource_type(ctx context.Context, field graphql.CollectedField, obj *EventActivationSource) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "EventActivationSource",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _EventActivationSource_namespace(ctx context.Context, field graphql.CollectedField, obj *EventActivationSource) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "EventActivationSource",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Namespace, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var exceededQuotaImplementors = []string{"ExceededQuota"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ExceededQuota(ctx context.Context, sel ast.SelectionSet, obj *ExceededQuota) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, exceededQuotaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExceededQuota")
		case "quotaName":
			out.Values[i] = ec._ExceededQuota_quotaName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "resourceName":
			out.Values[i] = ec._ExceededQuota_resourceName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "affectedResources":
			out.Values[i] = ec._ExceededQuota_affectedResources(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ExceededQuota_quotaName(ctx context.Context, field graphql.CollectedField, obj *ExceededQuota) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ExceededQuota",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.QuotaName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ExceededQuota_resourceName(ctx context.Context, field graphql.CollectedField, obj *ExceededQuota) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ExceededQuota",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ResourceName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ExceededQuota_affectedResources(ctx context.Context, field graphql.CollectedField, obj *ExceededQuota) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ExceededQuota",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.AffectedResources, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var functionImplementors = []string{"Function"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Function(ctx context.Context, sel ast.SelectionSet, obj *Function) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, functionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Function")
		case "name":
			out.Values[i] = ec._Function_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "trigger":
			out.Values[i] = ec._Function_trigger(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "creationTimestamp":
			out.Values[i] = ec._Function_creationTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "labels":
			out.Values[i] = ec._Function_labels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "environment":
			out.Values[i] = ec._Function_environment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Function_name(ctx context.Context, field graphql.CollectedField, obj *Function) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Function",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Function_trigger(ctx context.Context, field graphql.CollectedField, obj *Function) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Function",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Trigger, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Function_creationTimestamp(ctx context.Context, field graphql.CollectedField, obj *Function) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Function",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.CreationTimestamp, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return MarshalTimestamp(res)
}

// nolint: vetshadow
func (ec *executionContext) _Function_labels(ctx context.Context, field graphql.CollectedField, obj *Function) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Function",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Labels, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(JSON)
	rctx.Result = res
	return res
}

// nolint: vetshadow
func (ec *executionContext) _Function_environment(ctx context.Context, field graphql.CollectedField, obj *Function) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Function",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Environment, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var iDPPresetImplementors = []string{"IDPPreset"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _IDPPreset(ctx context.Context, sel ast.SelectionSet, obj *IDPPreset) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, iDPPresetImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IDPPreset")
		case "name":
			out.Values[i] = ec._IDPPreset_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "issuer":
			out.Values[i] = ec._IDPPreset_issuer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "jwksUri":
			out.Values[i] = ec._IDPPreset_jwksUri(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _IDPPreset_name(ctx context.Context, field graphql.CollectedField, obj *IDPPreset) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "IDPPreset",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _IDPPreset_issuer(ctx context.Context, field graphql.CollectedField, obj *IDPPreset) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "IDPPreset",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Issuer, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _IDPPreset_jwksUri(ctx context.Context, field graphql.CollectedField, obj *IDPPreset) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "IDPPreset",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.JwksURI, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var limitRangeImplementors = []string{"LimitRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _LimitRange(ctx context.Context, sel ast.SelectionSet, obj *LimitRange) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, limitRangeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitRange")
		case "name":
			out.Values[i] = ec._LimitRange_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "limits":
			out.Values[i] = ec._LimitRange_limits(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _LimitRange_name(ctx context.Context, field graphql.CollectedField, obj *LimitRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "LimitRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _LimitRange_limits(ctx context.Context, field graphql.CollectedField, obj *LimitRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "LimitRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Limits, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]LimitRangeItem)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._LimitRangeItem(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var limitRangeItemImplementors = []string{"LimitRangeItem"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _LimitRangeItem(ctx context.Context, sel ast.SelectionSet, obj *LimitRangeItem) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, limitRangeItemImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitRangeItem")
		case "limitType":
			out.Values[i] = ec._LimitRangeItem_limitType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "max":
			out.Values[i] = ec._LimitRangeItem_max(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "default":
			out.Values[i] = ec._LimitRangeItem_default(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "defaultRequest":
			out.Values[i] = ec._LimitRangeItem_defaultRequest(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _LimitRangeItem_limitType(ctx context.Context, field graphql.CollectedField, obj *LimitRangeItem) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "LimitRangeItem",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.LimitType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(LimitType)
	rctx.Result = res
	return res
}

// nolint: vetshadow
func (ec *executionContext) _LimitRangeItem_max(ctx context.Context, field graphql.CollectedField, obj *LimitRangeItem) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "LimitRangeItem",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Max, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ResourceType)
	rctx.Result = res

	return ec._ResourceType(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _LimitRangeItem_default(ctx context.Context, field graphql.CollectedField, obj *LimitRangeItem) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "LimitRangeItem",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Default, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ResourceType)
	rctx.Result = res

	return ec._ResourceType(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _LimitRangeItem_defaultRequest(ctx context.Context, field graphql.CollectedField, obj *LimitRangeItem) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "LimitRangeItem",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.DefaultRequest, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ResourceType)
	rctx.Result = res

	return ec._ResourceType(ctx, field.Selections, &res)
}

var localObjectReferenceImplementors = []string{"LocalObjectReference"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _LocalObjectReference(ctx context.Context, sel ast.SelectionSet, obj *LocalObjectReference) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, localObjectReferenceImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocalObjectReference")
		case "kind":
			out.Values[i] = ec._LocalObjectReference_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec._LocalObjectReference_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _LocalObjectReference_kind(ctx context.Context, field graphql.CollectedField, obj *LocalObjectReference) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "LocalObjectReference",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Kind, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _LocalObjectReference_name(ctx context.Context, field graphql.CollectedField, obj *LocalObjectReference) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "LocalObjectReference",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createServiceInstance":
			out.Values[i] = ec._Mutation_createServiceInstance(ctx, field)
		case "deleteServiceInstance":
			out.Values[i] = ec._Mutation_deleteServiceInstance(ctx, field)
		case "createServiceBinding":
			out.Values[i] = ec._Mutation_createServiceBinding(ctx, field)
		case "deleteServiceBinding":
			out.Values[i] = ec._Mutation_deleteServiceBinding(ctx, field)
		case "createServiceBindingUsage":
			out.Values[i] = ec._Mutation_createServiceBindingUsage(ctx, field)
		case "deleteServiceBindingUsage":
			out.Values[i] = ec._Mutation_deleteServiceBindingUsage(ctx, field)
		case "enableRemoteEnvironment":
			out.Values[i] = ec._Mutation_enableRemoteEnvironment(ctx, field)
		case "disableRemoteEnvironment":
			out.Values[i] = ec._Mutation_disableRemoteEnvironment(ctx, field)
		case "createIDPPreset":
			out.Values[i] = ec._Mutation_createIDPPreset(ctx, field)
		case "deleteIDPPreset":
			out.Values[i] = ec._Mutation_deleteIDPPreset(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_createServiceInstance(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_createServiceInstance_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().CreateServiceInstance(ctx, args["params"].(ServiceInstanceCreateInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceInstance)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._ServiceInstance(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_deleteServiceInstance(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_deleteServiceInstance_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().DeleteServiceInstance(ctx, args["name"].(string), args["environment"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceInstance)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._ServiceInstance(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_createServiceBinding(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_createServiceBinding_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().CreateServiceBinding(ctx, args["serviceBindingName"].(string), args["serviceInstanceName"].(string), args["environment"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CreateServiceBindingOutput)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._CreateServiceBindingOutput(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_deleteServiceBinding(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_deleteServiceBinding_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().DeleteServiceBinding(ctx, args["serviceBindingName"].(string), args["environment"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*DeleteServiceBindingOutput)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._DeleteServiceBindingOutput(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_createServiceBindingUsage(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_createServiceBindingUsage_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().CreateServiceBindingUsage(ctx, args["createServiceBindingUsageInput"].(*CreateServiceBindingUsageInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceBindingUsage)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._ServiceBindingUsage(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_deleteServiceBindingUsage(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_deleteServiceBindingUsage_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().DeleteServiceBindingUsage(ctx, args["serviceBindingUsageName"].(string), args["environment"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*DeleteServiceBindingUsageOutput)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._DeleteServiceBindingUsageOutput(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_enableRemoteEnvironment(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_enableRemoteEnvironment_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().EnableRemoteEnvironment(ctx, args["remoteEnvironment"].(string), args["environment"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*EnvironmentMapping)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._EnvironmentMapping(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_disableRemoteEnvironment(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_disableRemoteEnvironment_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().DisableRemoteEnvironment(ctx, args["remoteEnvironment"].(string), args["environment"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*EnvironmentMapping)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._EnvironmentMapping(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_createIDPPreset(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_createIDPPreset_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().CreateIDPPreset(ctx, args["name"].(string), args["issuer"].(string), args["jwksUri"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*IDPPreset)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._IDPPreset(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_deleteIDPPreset(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_deleteIDPPreset_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().DeleteIDPPreset(ctx, args["name"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*IDPPreset)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._IDPPreset(ctx, field.Selections, res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "serviceInstance":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_serviceInstance(ctx, field)
				wg.Done()
			}(i, field)
		case "serviceInstances":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_serviceInstances(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "serviceClasses":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_serviceClasses(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "serviceClass":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_serviceClass(ctx, field)
				wg.Done()
			}(i, field)
		case "serviceBrokers":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_serviceBrokers(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "serviceBroker":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_serviceBroker(ctx, field)
				wg.Done()
			}(i, field)
		case "serviceBindingUsage":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_serviceBindingUsage(ctx, field)
				wg.Done()
			}(i, field)
		case "serviceBinding":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_serviceBinding(ctx, field)
				wg.Done()
			}(i, field)
		case "usageKinds":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_usageKinds(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "usageKindResources":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_usageKindResources(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "apis":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_apis(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "remoteEnvironment":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_remoteEnvironment(ctx, field)
				wg.Done()
			}(i, field)
		case "remoteEnvironments":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_remoteEnvironments(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "connectorService":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_connectorService(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "environments":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_environments(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "deployments":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_deployments(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "resourceQuotas":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_resourceQuotas(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "resourceQuotasStatus":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_resourceQuotasStatus(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "functions":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_functions(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "content":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_content(ctx, field)
				wg.Done()
			}(i, field)
		case "topics":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_topics(ctx, field)
				wg.Done()
			}(i, field)
		case "eventActivations":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_eventActivations(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "limitRanges":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_limitRanges(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "IDPPreset":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_IDPPreset(ctx, field)
				wg.Done()
			}(i, field)
		case "IDPPresets":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_IDPPresets(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Query_serviceInstance(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_serviceInstance_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().ServiceInstance(ctx, args["name"].(string), args["environment"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceInstance)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._ServiceInstance(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_serviceInstances(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_serviceInstances_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().ServiceInstances(ctx, args["environment"].(string), args["first"].(*int), args["offset"].(*int), args["status"].(*InstanceStatusType))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ServiceInstance)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ServiceInstance(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_serviceClasses(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_serviceClasses_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().ServiceClasses(ctx, args["first"].(*int), args["offset"].(*int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ServiceClass)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ServiceClass(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_serviceClass(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_serviceClass_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().ServiceClass(ctx, args["name"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceClass)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._ServiceClass(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_serviceBrokers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_serviceBrokers_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().ServiceBrokers(ctx, args["first"].(*int), args["offset"].(*int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ServiceBroker)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ServiceBroker(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_serviceBroker(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_serviceBroker_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().ServiceBroker(ctx, args["name"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceBroker)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._ServiceBroker(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_serviceBindingUsage(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_serviceBindingUsage_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().ServiceBindingUsage(ctx, args["name"].(string), args["environment"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceBindingUsage)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._ServiceBindingUsage(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_serviceBinding(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_serviceBinding_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().ServiceBinding(ctx, args["name"].(string), args["environment"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceBinding)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._ServiceBinding(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_usageKinds(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_usageKinds_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().UsageKinds(ctx, args["first"].(*int), args["offset"].(*int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]UsageKind)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._UsageKind(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_usageKindResources(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_usageKindResources_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().UsageKindResources(ctx, args["usageKind"].(string), args["environment"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]UsageKindResource)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._UsageKindResource(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_apis(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_apis_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().Apis(ctx, args["environment"].(string), args["serviceName"].(*string), args["hostname"].(*string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]API)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._API(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_remoteEnvironment(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_remoteEnvironment_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().RemoteEnvironment(ctx, args["name"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RemoteEnvironment)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._RemoteEnvironment(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_remoteEnvironments(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_remoteEnvironments_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().RemoteEnvironments(ctx, args["environment"].(*string), args["first"].(*int), args["offset"].(*int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]RemoteEnvironment)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._RemoteEnvironment(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_connectorService(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_connectorService_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().ConnectorService(ctx, args["remoteEnvironment"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ConnectorService)
	rctx.Result = res

	return ec._ConnectorService(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_environments(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_environments_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().Environments(ctx, args["remoteEnvironment"].(*string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]Environment)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._Environment(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_deployments(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_deployments_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().Deployments(ctx, args["environment"].(string), args["excludeFunctions"].(*bool))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]Deployment)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._Deployment(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_resourceQuotas(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_resourceQuotas_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().ResourceQuotas(ctx, args["environment"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ResourceQuota)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ResourceQuota(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_resourceQuotasStatus(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_resourceQuotasStatus_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().ResourceQuotasStatus(ctx, args["environment"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ResourceQuotasStatus)
	rctx.Result = res

	return ec._ResourceQuotasStatus(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_functions(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_functions_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().Functions(ctx, args["environment"].(string), args["first"].(*int), args["offset"].(*int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]Function)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._Function(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_content(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_content_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().Content(ctx, args["contentType"].(string), args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*JSON)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return *res
}

// nolint: vetshadow
func (ec *executionContext) _Query_topics(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_topics_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().Topics(ctx, args["input"].([]InputTopic), args["internal"].(*bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]TopicEntry)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._TopicEntry(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_eventActivations(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_eventActivations_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().EventActivations(ctx, args["environment"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]EventActivation)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._EventActivation(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_limitRanges(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_limitRanges_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().LimitRanges(ctx, args["environment"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]LimitRange)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._LimitRange(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_IDPPreset(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_IDPPreset_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().IDPPreset(ctx, args["name"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*IDPPreset)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._IDPPreset(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_IDPPresets(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_IDPPresets_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Query().IDPPresets(ctx, args["first"].(*int), args["offset"].(*int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]IDPPreset)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._IDPPreset(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query___type_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.introspectType(args["name"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(ctx context.Context) (interface{}, error) {
		return ec.introspectSchema(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Schema(ctx, field.Selections, res)
}

var remoteEnvironmentImplementors = []string{"RemoteEnvironment"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _RemoteEnvironment(ctx context.Context, sel ast.SelectionSet, obj *RemoteEnvironment) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, remoteEnvironmentImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoteEnvironment")
		case "name":
			out.Values[i] = ec._RemoteEnvironment_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec._RemoteEnvironment_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "source":
			out.Values[i] = ec._RemoteEnvironment_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "services":
			out.Values[i] = ec._RemoteEnvironment_services(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "enabledInEnvironments":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._RemoteEnvironment_enabledInEnvironments(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "status":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._RemoteEnvironment_status(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironment_name(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironment_description(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironment_source(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Source, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(RemoteEnvironmentSource)
	rctx.Result = res

	return ec._RemoteEnvironmentSource(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironment_services(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Services, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]RemoteEnvironmentService)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._RemoteEnvironmentService(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironment_enabledInEnvironments(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.RemoteEnvironment().EnabledInEnvironments(ctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironment_status(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironment) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironment",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.RemoteEnvironment().Status(ctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(RemoteEnvironmentStatus)
	rctx.Result = res
	return res
}

var remoteEnvironmentEntryImplementors = []string{"RemoteEnvironmentEntry"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _RemoteEnvironmentEntry(ctx context.Context, sel ast.SelectionSet, obj *RemoteEnvironmentEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, remoteEnvironmentEntryImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoteEnvironmentEntry")
		case "type":
			out.Values[i] = ec._RemoteEnvironmentEntry_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "gatewayUrl":
			out.Values[i] = ec._RemoteEnvironmentEntry_gatewayUrl(ctx, field, obj)
		case "accessLabel":
			out.Values[i] = ec._RemoteEnvironmentEntry_accessLabel(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironmentEntry_type(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentEntry) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironmentEntry",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironmentEntry_gatewayUrl(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentEntry) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironmentEntry",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.GatewayURL, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironmentEntry_accessLabel(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentEntry) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironmentEntry",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.AccessLabel, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var remoteEnvironmentServiceImplementors = []string{"RemoteEnvironmentService"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _RemoteEnvironmentService(ctx context.Context, sel ast.SelectionSet, obj *RemoteEnvironmentService) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, remoteEnvironmentServiceImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoteEnvironmentService")
		case "id":
			out.Values[i] = ec._RemoteEnvironmentService_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "displayName":
			out.Values[i] = ec._RemoteEnvironmentService_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "longDescription":
			out.Values[i] = ec._RemoteEnvironmentService_longDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "providerDisplayName":
			out.Values[i] = ec._RemoteEnvironmentService_providerDisplayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "tags":
			out.Values[i] = ec._RemoteEnvironmentService_tags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "entries":
			out.Values[i] = ec._RemoteEnvironmentService_entries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironmentService_id(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentService) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironmentService",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironmentService_displayName(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentService) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironmentService",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.DisplayName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironmentService_longDescription(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentService) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironmentService",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.LongDescription, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironmentService_providerDisplayName(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentService) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironmentService",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ProviderDisplayName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironmentService_tags(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentService) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironmentService",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Tags, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironmentService_entries(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentService) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironmentService",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Entries, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]RemoteEnvironmentEntry)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._RemoteEnvironmentEntry(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var remoteEnvironmentSourceImplementors = []string{"RemoteEnvironmentSource"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _RemoteEnvironmentSource(ctx context.Context, sel ast.SelectionSet, obj *RemoteEnvironmentSource) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, remoteEnvironmentSourceImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoteEnvironmentSource")
		case "environment":
			out.Values[i] = ec._RemoteEnvironmentSource_environment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "type":
			out.Values[i] = ec._RemoteEnvironmentSource_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "namespace":
			out.Values[i] = ec._RemoteEnvironmentSource_namespace(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironmentSource_environment(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentSource) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironmentSource",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Environment, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironmentSource_type(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentSource) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironmentSource",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _RemoteEnvironmentSource_namespace(ctx context.Context, field graphql.CollectedField, obj *RemoteEnvironmentSource) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "RemoteEnvironmentSource",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Namespace, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var resourceQuotaImplementors = []string{"ResourceQuota"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ResourceQuota(ctx context.Context, sel ast.SelectionSet, obj *ResourceQuota) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, resourceQuotaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceQuota")
		case "name":
			out.Values[i] = ec._ResourceQuota_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "pods":
			out.Values[i] = ec._ResourceQuota_pods(ctx, field, obj)
		case "limits":
			out.Values[i] = ec._ResourceQuota_limits(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "requests":
			out.Values[i] = ec._ResourceQuota_requests(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ResourceQuota_name(ctx context.Context, field graphql.CollectedField, obj *ResourceQuota) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ResourceQuota",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ResourceQuota_pods(ctx context.Context, field graphql.CollectedField, obj *ResourceQuota) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ResourceQuota",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Pods, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ResourceQuota_limits(ctx context.Context, field graphql.CollectedField, obj *ResourceQuota) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ResourceQuota",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Limits, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ResourceValues)
	rctx.Result = res

	return ec._ResourceValues(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _ResourceQuota_requests(ctx context.Context, field graphql.CollectedField, obj *ResourceQuota) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ResourceQuota",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Requests, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ResourceValues)
	rctx.Result = res

	return ec._ResourceValues(ctx, field.Selections, &res)
}

var resourceQuotasStatusImplementors = []string{"ResourceQuotasStatus"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ResourceQuotasStatus(ctx context.Context, sel ast.SelectionSet, obj *ResourceQuotasStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, resourceQuotasStatusImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceQuotasStatus")
		case "exceeded":
			out.Values[i] = ec._ResourceQuotasStatus_exceeded(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "exceededQuotas":
			out.Values[i] = ec._ResourceQuotasStatus_exceededQuotas(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ResourceQuotasStatus_exceeded(ctx context.Context, field graphql.CollectedField, obj *ResourceQuotasStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ResourceQuotasStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Exceeded, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _ResourceQuotasStatus_exceededQuotas(ctx context.Context, field graphql.CollectedField, obj *ResourceQuotasStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ResourceQuotasStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ExceededQuotas, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ExceededQuota)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ExceededQuota(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var resourceTypeImplementors = []string{"ResourceType"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ResourceType(ctx context.Context, sel ast.SelectionSet, obj *ResourceType) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, resourceTypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceType")
		case "memory":
			out.Values[i] = ec._ResourceType_memory(ctx, field, obj)
		case "cpu":
			out.Values[i] = ec._ResourceType_cpu(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ResourceType_memory(ctx context.Context, field graphql.CollectedField, obj *ResourceType) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ResourceType",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Memory, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ResourceType_cpu(ctx context.Context, field graphql.CollectedField, obj *ResourceType) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ResourceType",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.CPU, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var resourceValuesImplementors = []string{"ResourceValues"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ResourceValues(ctx context.Context, sel ast.SelectionSet, obj *ResourceValues) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, resourceValuesImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResourceValues")
		case "memory":
			out.Values[i] = ec._ResourceValues_memory(ctx, field, obj)
		case "cpu":
			out.Values[i] = ec._ResourceValues_cpu(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ResourceValues_memory(ctx context.Context, field graphql.CollectedField, obj *ResourceValues) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ResourceValues",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Memory, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ResourceValues_cpu(ctx context.Context, field graphql.CollectedField, obj *ResourceValues) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ResourceValues",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.CPU, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var secretImplementors = []string{"Secret"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Secret(ctx context.Context, sel ast.SelectionSet, obj *Secret) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, secretImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Secret")
		case "name":
			out.Values[i] = ec._Secret_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "environment":
			out.Values[i] = ec._Secret_environment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "data":
			out.Values[i] = ec._Secret_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Secret_name(ctx context.Context, field graphql.CollectedField, obj *Secret) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Secret",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Secret_environment(ctx context.Context, field graphql.CollectedField, obj *Secret) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Secret",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Environment, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Secret_data(ctx context.Context, field graphql.CollectedField, obj *Secret) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Secret",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Data, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(JSON)
	rctx.Result = res
	return res
}

var sectionImplementors = []string{"Section"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Section(ctx context.Context, sel ast.SelectionSet, obj *Section) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, sectionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Section")
		case "titles":
			out.Values[i] = ec._Section_titles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "topicType":
			out.Values[i] = ec._Section_topicType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Section_titles(ctx context.Context, field graphql.CollectedField, obj *Section) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Section",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Titles, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]Title)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._Title(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Section_topicType(ctx context.Context, field graphql.CollectedField, obj *Section) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Section",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.TopicType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var serviceImplementors = []string{"Service"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Service(ctx context.Context, sel ast.SelectionSet, obj *Service) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Service")
		case "name":
			out.Values[i] = ec._Service_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "port":
			out.Values[i] = ec._Service_port(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Service_name(ctx context.Context, field graphql.CollectedField, obj *Service) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Service",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Service_port(ctx context.Context, field graphql.CollectedField, obj *Service) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Service",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Port, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	return graphql.MarshalInt(res)
}

var serviceBindingImplementors = []string{"ServiceBinding"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBinding(ctx context.Context, sel ast.SelectionSet, obj *ServiceBinding) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceBindingImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBinding")
		case "name":
			out.Values[i] = ec._ServiceBinding_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "serviceInstanceName":
			out.Values[i] = ec._ServiceBinding_serviceInstanceName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "environment":
			out.Values[i] = ec._ServiceBinding_environment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "secret":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ServiceBinding_secret(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "status":
			out.Values[i] = ec._ServiceBinding_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBinding_name(ctx context.Context, field graphql.CollectedField, obj *ServiceBinding) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBinding",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBinding_serviceInstanceName(ctx context.Context, field graphql.CollectedField, obj *ServiceBinding) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBinding",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ServiceInstanceName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBinding_environment(ctx context.Context, field graphql.CollectedField, obj *ServiceBinding) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBinding",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Environment, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBinding_secret(ctx context.Context, field graphql.CollectedField, obj *ServiceBinding) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBinding",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.ServiceBinding().Secret(ctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Secret)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._Secret(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBinding_status(ctx context.Context, field graphql.CollectedField, obj *ServiceBinding) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBinding",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ServiceBindingStatus)
	rctx.Result = res

	return ec._ServiceBindingStatus(ctx, field.Selections, &res)
}

var serviceBindingEventImplementors = []string{"ServiceBindingEvent"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBindingEvent(ctx context.Context, sel ast.SelectionSet, obj *ServiceBindingEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceBindingEventImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBindingEvent")
		case "type":
			out.Values[i] = ec._ServiceBindingEvent_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "binding":
			out.Values[i] = ec._ServiceBindingEvent_binding(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingEvent_type(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingEvent) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(SubscriptionEventType)
	rctx.Result = res
	return res
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingEvent_binding(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingEvent) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Binding, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ServiceBinding)
	rctx.Result = res

	return ec._ServiceBinding(ctx, field.Selections, &res)
}

var serviceBindingStatusImplementors = []string{"ServiceBindingStatus"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBindingStatus(ctx context.Context, sel ast.SelectionSet, obj *ServiceBindingStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceBindingStatusImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBindingStatus")
		case "type":
			out.Values[i] = ec._ServiceBindingStatus_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "reason":
			out.Values[i] = ec._ServiceBindingStatus_reason(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "message":
			out.Values[i] = ec._ServiceBindingStatus_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingStatus_type(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ServiceBindingStatusType)
	rctx.Result = res
	return res
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingStatus_reason(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Reason, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingStatus_message(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Message, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var serviceBindingUsageImplementors = []string{"ServiceBindingUsage"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBindingUsage(ctx context.Context, sel ast.SelectionSet, obj *ServiceBindingUsage) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceBindingUsageImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBindingUsage")
		case "name":
			out.Values[i] = ec._ServiceBindingUsage_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "environment":
			out.Values[i] = ec._ServiceBindingUsage_environment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "serviceBinding":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ServiceBindingUsage_serviceBinding(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "usedBy":
			out.Values[i] = ec._ServiceBindingUsage_usedBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "parameters":
			out.Values[i] = ec._ServiceBindingUsage_parameters(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ServiceBindingUsage_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingUsage_name(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsage) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingUsage",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingUsage_environment(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsage) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingUsage",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Environment, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingUsage_serviceBinding(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsage) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingUsage",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.ServiceBindingUsage().ServiceBinding(ctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceBinding)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._ServiceBinding(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingUsage_usedBy(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsage) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingUsage",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.UsedBy, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(LocalObjectReference)
	rctx.Result = res

	return ec._LocalObjectReference(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingUsage_parameters(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsage) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingUsage",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Parameters, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceBindingUsageParameters)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._ServiceBindingUsageParameters(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingUsage_status(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsage) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingUsage",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ServiceBindingUsageStatus)
	rctx.Result = res

	return ec._ServiceBindingUsageStatus(ctx, field.Selections, &res)
}

var serviceBindingUsageEventImplementors = []string{"ServiceBindingUsageEvent"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBindingUsageEvent(ctx context.Context, sel ast.SelectionSet, obj *ServiceBindingUsageEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceBindingUsageEventImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBindingUsageEvent")
		case "type":
			out.Values[i] = ec._ServiceBindingUsageEvent_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "bindingUsage":
			out.Values[i] = ec._ServiceBindingUsageEvent_bindingUsage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingUsageEvent_type(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsageEvent) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingUsageEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(SubscriptionEventType)
	rctx.Result = res
	return res
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingUsageEvent_bindingUsage(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsageEvent) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingUsageEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.BindingUsage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ServiceBindingUsage)
	rctx.Result = res

	return ec._ServiceBindingUsage(ctx, field.Selections, &res)
}

var serviceBindingUsageParametersImplementors = []string{"ServiceBindingUsageParameters"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBindingUsageParameters(ctx context.Context, sel ast.SelectionSet, obj *ServiceBindingUsageParameters) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceBindingUsageParametersImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBindingUsageParameters")
		case "envPrefix":
			out.Values[i] = ec._ServiceBindingUsageParameters_envPrefix(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingUsageParameters_envPrefix(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsageParameters) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingUsageParameters",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.EnvPrefix, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*EnvPrefix)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._EnvPrefix(ctx, field.Selections, res)
}

var serviceBindingUsageStatusImplementors = []string{"ServiceBindingUsageStatus"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBindingUsageStatus(ctx context.Context, sel ast.SelectionSet, obj *ServiceBindingUsageStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceBindingUsageStatusImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBindingUsageStatus")
		case "type":
			out.Values[i] = ec._ServiceBindingUsageStatus_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "reason":
			out.Values[i] = ec._ServiceBindingUsageStatus_reason(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "message":
			out.Values[i] = ec._ServiceBindingUsageStatus_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingUsageStatus_type(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsageStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingUsageStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ServiceBindingUsageStatusType)
	rctx.Result = res
	return res
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingUsageStatus_reason(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsageStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingUsageStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Reason, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBindingUsageStatus_message(ctx context.Context, field graphql.CollectedField, obj *ServiceBindingUsageStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBindingUsageStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Message, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var serviceBrokerImplementors = []string{"ServiceBroker"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBroker(ctx context.Context, sel ast.SelectionSet, obj *ServiceBroker) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceBrokerImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBroker")
		case "name":
			out.Values[i] = ec._ServiceBroker_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "status":
			out.Values[i] = ec._ServiceBroker_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "creationTimestamp":
			out.Values[i] = ec._ServiceBroker_creationTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "url":
			out.Values[i] = ec._ServiceBroker_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "labels":
			out.Values[i] = ec._ServiceBroker_labels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBroker_name(ctx context.Context, field graphql.CollectedField, obj *ServiceBroker) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBroker",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBroker_status(ctx context.Context, field graphql.CollectedField, obj *ServiceBroker) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBroker",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ServiceBrokerStatus)
	rctx.Result = res

	return ec._ServiceBrokerStatus(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBroker_creationTimestamp(ctx context.Context, field graphql.CollectedField, obj *ServiceBroker) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBroker",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.CreationTimestamp, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return MarshalTimestamp(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBroker_url(ctx context.Context, field graphql.CollectedField, obj *ServiceBroker) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBroker",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.URL, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBroker_labels(ctx context.Context, field graphql.CollectedField, obj *ServiceBroker) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBroker",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Labels, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(JSON)
	rctx.Result = res
	return res
}

var serviceBrokerStatusImplementors = []string{"ServiceBrokerStatus"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceBrokerStatus(ctx context.Context, sel ast.SelectionSet, obj *ServiceBrokerStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceBrokerStatusImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceBrokerStatus")
		case "ready":
			out.Values[i] = ec._ServiceBrokerStatus_ready(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "reason":
			out.Values[i] = ec._ServiceBrokerStatus_reason(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "message":
			out.Values[i] = ec._ServiceBrokerStatus_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBrokerStatus_ready(ctx context.Context, field graphql.CollectedField, obj *ServiceBrokerStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBrokerStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Ready, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBrokerStatus_reason(ctx context.Context, field graphql.CollectedField, obj *ServiceBrokerStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBrokerStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Reason, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceBrokerStatus_message(ctx context.Context, field graphql.CollectedField, obj *ServiceBrokerStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceBrokerStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Message, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var serviceClassImplementors = []string{"ServiceClass"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceClass(ctx context.Context, sel ast.SelectionSet, obj *ServiceClass) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceClassImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceClass")
		case "name":
			out.Values[i] = ec._ServiceClass_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "externalName":
			out.Values[i] = ec._ServiceClass_externalName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "displayName":
			out.Values[i] = ec._ServiceClass_displayName(ctx, field, obj)
		case "creationTimestamp":
			out.Values[i] = ec._ServiceClass_creationTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec._ServiceClass_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "longDescription":
			out.Values[i] = ec._ServiceClass_longDescription(ctx, field, obj)
		case "imageUrl":
			out.Values[i] = ec._ServiceClass_imageUrl(ctx, field, obj)
		case "documentationUrl":
			out.Values[i] = ec._ServiceClass_documentationUrl(ctx, field, obj)
		case "supportUrl":
			out.Values[i] = ec._ServiceClass_supportUrl(ctx, field, obj)
		case "providerDisplayName":
			out.Values[i] = ec._ServiceClass_providerDisplayName(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._ServiceClass_tags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "plans":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ServiceClass_plans(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "activated":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ServiceClass_activated(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "apiSpec":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ServiceClass_apiSpec(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "asyncApiSpec":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ServiceClass_asyncApiSpec(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "content":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ServiceClass_content(ctx, field, obj)
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_name(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_externalName(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ExternalName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_displayName(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.DisplayName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_creationTimestamp(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.CreationTimestamp, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return MarshalTimestamp(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_description(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_longDescription(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.LongDescription, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_imageUrl(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ImageURL, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_documentationUrl(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.DocumentationURL, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_supportUrl(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.SupportURL, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_providerDisplayName(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ProviderDisplayName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_tags(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Tags, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_plans(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.ServiceClass().Plans(ctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ServicePlan)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ServicePlan(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_activated(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.ServiceClass().Activated(ctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_apiSpec(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.ServiceClass().APISpec(ctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*JSON)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return *res
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_asyncApiSpec(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.ServiceClass().AsyncAPISpec(ctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*JSON)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return *res
}

// nolint: vetshadow
func (ec *executionContext) _ServiceClass_content(ctx context.Context, field graphql.CollectedField, obj *ServiceClass) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceClass",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.ServiceClass().Content(ctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*JSON)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return *res
}

var serviceInstanceImplementors = []string{"ServiceInstance"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceInstance(ctx context.Context, sel ast.SelectionSet, obj *ServiceInstance) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceInstanceImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceInstance")
		case "name":
			out.Values[i] = ec._ServiceInstance_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "environment":
			out.Values[i] = ec._ServiceInstance_environment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "serviceClassName":
			out.Values[i] = ec._ServiceInstance_serviceClassName(ctx, field, obj)
		case "ServiceClassDisplayName":
			out.Values[i] = ec._ServiceInstance_ServiceClassDisplayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "servicePlanName":
			out.Values[i] = ec._ServiceInstance_servicePlanName(ctx, field, obj)
		case "servicePlanDisplayName":
			out.Values[i] = ec._ServiceInstance_servicePlanDisplayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "servicePlanSpec":
			out.Values[i] = ec._ServiceInstance_servicePlanSpec(ctx, field, obj)
		case "creationTimestamp":
			out.Values[i] = ec._ServiceInstance_creationTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "labels":
			out.Values[i] = ec._ServiceInstance_labels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "status":
			out.Values[i] = ec._ServiceInstance_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "servicePlan":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ServiceInstance_servicePlan(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "serviceClass":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ServiceInstance_serviceClass(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "bindable":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ServiceInstance_bindable(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "serviceBindings":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ServiceInstance_serviceBindings(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "serviceBindingUsages":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._ServiceInstance_serviceBindingUsages(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_name(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_environment(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Environment, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_serviceClassName(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ServiceClassName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_ServiceClassDisplayName(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ServiceClassDisplayName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_servicePlanName(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ServicePlanName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_servicePlanDisplayName(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ServicePlanDisplayName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_servicePlanSpec(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ServicePlanSpec, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*JSON)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return *res
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_creationTimestamp(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.CreationTimestamp, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return MarshalTimestamp(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_labels(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Labels, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_status(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ServiceInstanceStatus)
	rctx.Result = res

	return ec._ServiceInstanceStatus(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_servicePlan(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.ServiceInstance().ServicePlan(ctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServicePlan)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._ServicePlan(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_serviceClass(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.ServiceInstance().ServiceClass(ctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ServiceClass)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._ServiceClass(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_bindable(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.ServiceInstance().Bindable(ctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_serviceBindings(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.ServiceInstance().ServiceBindings(ctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ServiceBinding)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ServiceBinding(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstance_serviceBindingUsages(ctx context.Context, field graphql.CollectedField, obj *ServiceInstance) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstance",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.ServiceInstance().ServiceBindingUsages(ctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ServiceBindingUsage)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._ServiceBindingUsage(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var serviceInstanceEventImplementors = []string{"ServiceInstanceEvent"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceInstanceEvent(ctx context.Context, sel ast.SelectionSet, obj *ServiceInstanceEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceInstanceEventImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceInstanceEvent")
		case "type":
			out.Values[i] = ec._ServiceInstanceEvent_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "instance":
			out.Values[i] = ec._ServiceInstanceEvent_instance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstanceEvent_type(ctx context.Context, field graphql.CollectedField, obj *ServiceInstanceEvent) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstanceEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(SubscriptionEventType)
	rctx.Result = res
	return res
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstanceEvent_instance(ctx context.Context, field graphql.CollectedField, obj *ServiceInstanceEvent) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstanceEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Instance, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ServiceInstance)
	rctx.Result = res

	return ec._ServiceInstance(ctx, field.Selections, &res)
}

var serviceInstanceStatusImplementors = []string{"ServiceInstanceStatus"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceInstanceStatus(ctx context.Context, sel ast.SelectionSet, obj *ServiceInstanceStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceInstanceStatusImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceInstanceStatus")
		case "type":
			out.Values[i] = ec._ServiceInstanceStatus_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "reason":
			out.Values[i] = ec._ServiceInstanceStatus_reason(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "message":
			out.Values[i] = ec._ServiceInstanceStatus_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstanceStatus_type(ctx context.Context, field graphql.CollectedField, obj *ServiceInstanceStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstanceStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(InstanceStatusType)
	rctx.Result = res
	return res
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstanceStatus_reason(ctx context.Context, field graphql.CollectedField, obj *ServiceInstanceStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstanceStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Reason, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServiceInstanceStatus_message(ctx context.Context, field graphql.CollectedField, obj *ServiceInstanceStatus) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServiceInstanceStatus",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Message, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var servicePlanImplementors = []string{"ServicePlan"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServicePlan(ctx context.Context, sel ast.SelectionSet, obj *ServicePlan) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, servicePlanImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServicePlan")
		case "name":
			out.Values[i] = ec._ServicePlan_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "displayName":
			out.Values[i] = ec._ServicePlan_displayName(ctx, field, obj)
		case "externalName":
			out.Values[i] = ec._ServicePlan_externalName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec._ServicePlan_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "relatedServiceClassName":
			out.Values[i] = ec._ServicePlan_relatedServiceClassName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "instanceCreateParameterSchema":
			out.Values[i] = ec._ServicePlan_instanceCreateParameterSchema(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ServicePlan_name(ctx context.Context, field graphql.CollectedField, obj *ServicePlan) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServicePlan",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServicePlan_displayName(ctx context.Context, field graphql.CollectedField, obj *ServicePlan) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServicePlan",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.DisplayName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ServicePlan_externalName(ctx context.Context, field graphql.CollectedField, obj *ServicePlan) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServicePlan",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ExternalName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServicePlan_description(ctx context.Context, field graphql.CollectedField, obj *ServicePlan) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServicePlan",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServicePlan_relatedServiceClassName(ctx context.Context, field graphql.CollectedField, obj *ServicePlan) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServicePlan",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.RelatedServiceClassName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _ServicePlan_instanceCreateParameterSchema(ctx context.Context, field graphql.CollectedField, obj *ServicePlan) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "ServicePlan",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.InstanceCreateParameterSchema, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*JSON)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return *res
}

var subscriptionImplementors = []string{"Subscription"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, subscriptionImplementors)
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "serviceInstanceEvent":
		return ec._Subscription_serviceInstanceEvent(ctx, fields[0])
	case "serviceBindingEventForServiceInstance":
		return ec._Subscription_serviceBindingEventForServiceInstance(ctx, fields[0])
	case "serviceBindingUsageEventForServiceInstance":
		return ec._Subscription_serviceBindingUsageEventForServiceInstance(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

func (ec *executionContext) _Subscription_serviceInstanceEvent(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_serviceInstanceEvent_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	results, err := ec.resolvers.Subscription().ServiceInstanceEvent(ctx, args["environment"].(string))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._ServiceInstanceEvent(ctx, field.Selections, &res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_serviceBindingEventForServiceInstance(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_serviceBindingEventForServiceInstance_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	results, err := ec.resolvers.Subscription().ServiceBindingEventForServiceInstance(ctx, args["serviceInstanceName"].(string), args["environment"].(string))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._ServiceBindingEvent(ctx, field.Selections, &res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_serviceBindingUsageEventForServiceInstance(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_serviceBindingUsageEventForServiceInstance_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	results, err := ec.resolvers.Subscription().ServiceBindingUsageEventForServiceInstance(ctx, args["serviceInstanceName"].(string), args["environment"].(string))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			return ec._ServiceBindingUsageEvent(ctx, field.Selections, &res)
		}())
		return &out
	}
}

var titleImplementors = []string{"Title"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Title(ctx context.Context, sel ast.SelectionSet, obj *Title) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, titleImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Title")
		case "name":
			out.Values[i] = ec._Title_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "anchor":
			out.Values[i] = ec._Title_anchor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "titles":
			out.Values[i] = ec._Title_titles(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Title_name(ctx context.Context, field graphql.CollectedField, obj *Title) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Title",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Title_anchor(ctx context.Context, field graphql.CollectedField, obj *Title) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Title",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Anchor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Title_titles(ctx context.Context, field graphql.CollectedField, obj *Title) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Title",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Titles, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]Title)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._Title(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var topicEntryImplementors = []string{"TopicEntry"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _TopicEntry(ctx context.Context, sel ast.SelectionSet, obj *TopicEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, topicEntryImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopicEntry")
		case "contentType":
			out.Values[i] = ec._TopicEntry_contentType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "id":
			out.Values[i] = ec._TopicEntry_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "sections":
			out.Values[i] = ec._TopicEntry_sections(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _TopicEntry_contentType(ctx context.Context, field graphql.CollectedField, obj *TopicEntry) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "TopicEntry",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ContentType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _TopicEntry_id(ctx context.Context, field graphql.CollectedField, obj *TopicEntry) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "TopicEntry",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _TopicEntry_sections(ctx context.Context, field graphql.CollectedField, obj *TopicEntry) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "TopicEntry",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Sections, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]Section)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec._Section(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var usageKindImplementors = []string{"UsageKind"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _UsageKind(ctx context.Context, sel ast.SelectionSet, obj *UsageKind) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, usageKindImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UsageKind")
		case "name":
			out.Values[i] = ec._UsageKind_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "group":
			out.Values[i] = ec._UsageKind_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "kind":
			out.Values[i] = ec._UsageKind_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "version":
			out.Values[i] = ec._UsageKind_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "displayName":
			out.Values[i] = ec._UsageKind_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _UsageKind_name(ctx context.Context, field graphql.CollectedField, obj *UsageKind) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "UsageKind",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _UsageKind_group(ctx context.Context, field graphql.CollectedField, obj *UsageKind) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "UsageKind",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Group, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _UsageKind_kind(ctx context.Context, field graphql.CollectedField, obj *UsageKind) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "UsageKind",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Kind, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _UsageKind_version(ctx context.Context, field graphql.CollectedField, obj *UsageKind) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "UsageKind",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Version, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _UsageKind_displayName(ctx context.Context, field graphql.CollectedField, obj *UsageKind) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "UsageKind",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.DisplayName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var usageKindResourceImplementors = []string{"UsageKindResource"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _UsageKindResource(ctx context.Context, sel ast.SelectionSet, obj *UsageKindResource) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, usageKindResourceImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UsageKindResource")
		case "name":
			out.Values[i] = ec._UsageKindResource_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "namespace":
			out.Values[i] = ec._UsageKindResource_namespace(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _UsageKindResource_name(ctx context.Context, field graphql.CollectedField, obj *UsageKindResource) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "UsageKindResource",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _UsageKindResource_namespace(ctx context.Context, field graphql.CollectedField, obj *UsageKindResource) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "UsageKindResource",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Namespace, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Locations, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Types(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Directives(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Directive(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Kind(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_fields_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Field(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_enumValues_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___EnumValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(ctx context.Context) (interface{}, error) {
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

func UnmarshalCreateServiceBindingUsageInput(v interface{}) (CreateServiceBindingUsageInput, error) {
	var it CreateServiceBindingUsageInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "environment":
			var err error
			it.Environment, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "serviceBindingRef":
			var err error
			it.ServiceBindingRef, err = UnmarshalServiceBindingRefInput(v)
			if err != nil {
				return it, err
			}
		case "usedBy":
			var err error
			it.UsedBy, err = UnmarshalLocalObjectReferenceInput(v)
			if err != nil {
				return it, err
			}
		case "parameters":
			var err error
			var ptr1 ServiceBindingUsageParametersInput
			if v != nil {
				ptr1, err = UnmarshalServiceBindingUsageParametersInput(v)
				it.Parameters = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalEnvPrefixInput(v interface{}) (EnvPrefixInput, error) {
	var it EnvPrefixInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalInputTopic(v interface{}) (InputTopic, error) {
	var it InputTopic
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalLocalObjectReferenceInput(v interface{}) (LocalObjectReferenceInput, error) {
	var it LocalObjectReferenceInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "kind":
			var err error
			it.Kind, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalServiceBindingRefInput(v interface{}) (ServiceBindingRefInput, error) {
	var it ServiceBindingRefInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalServiceBindingUsageParametersInput(v interface{}) (ServiceBindingUsageParametersInput, error) {
	var it ServiceBindingUsageParametersInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "envPrefix":
			var err error
			var ptr1 EnvPrefixInput
			if v != nil {
				ptr1, err = UnmarshalEnvPrefixInput(v)
				it.EnvPrefix = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalServiceInstanceCreateInput(v interface{}) (ServiceInstanceCreateInput, error) {
	var it ServiceInstanceCreateInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "environment":
			var err error
			it.Environment, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "externalServiceClassName":
			var err error
			it.ExternalServiceClassName, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "externalPlanName":
			var err error
			it.ExternalPlanName, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "labels":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Labels = make([]string, len(rawIf1))
			for idx1 := range rawIf1 {
				it.Labels[idx1], err = graphql.UnmarshalString(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		case "parameterSchema":
			var err error
			var ptr1 JSON
			if v != nil {
				err = (&ptr1).UnmarshalGQL(v)
				it.ParameterSchema = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) (ret interface{}) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name])
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "schema.graphql", Input: `# Scalars

scalar JSON

scalar Timestamp

# Content


type Title {
    name: String!
    anchor: String!
    titles: [Title!]
}

type Section {
    titles: [Title!]!
    topicType: String!
}

type TopicEntry {
    contentType: String!
    id: String!
    sections: [Section!]!
}

# Service Catalog

type ServiceInstance {
    name: String!
    environment: String!
    serviceClassName: String
    ServiceClassDisplayName: String!
    servicePlanName: String
    servicePlanDisplayName: String!
    servicePlanSpec: JSON
    creationTimestamp: Timestamp!
    labels: [String!]!
    status: ServiceInstanceStatus!
    servicePlan: ServicePlan
    serviceClass: ServiceClass
    bindable: Boolean!
    serviceBindings: [ServiceBinding!]!
    serviceBindingUsages: [ServiceBindingUsage!]!
}

type ServiceInstanceStatus {
    type: InstanceStatusType!
    reason: String!
    message: String!
}

enum InstanceStatusType {
    RUNNING
    PROVISIONING
    DEPROVISIONING
    PENDING
    FAILED
}

type ServiceInstanceEvent {
    type: SubscriptionEventType!
    instance: ServiceInstance!
}

enum SubscriptionEventType {
    ADD
    UPDATE
    DELETE
}

input ServiceInstanceCreateInput {
    name: String!
    environment: String!
    externalServiceClassName: String!
    externalPlanName: String!
    labels: [String!]!
    parameterSchema: JSON
}

type ServiceClass {
    name: String!
    externalName: String!
    displayName: String
    creationTimestamp: Timestamp!
    description: String!
    longDescription: String
    imageUrl: String
    documentationUrl: String
    supportUrl: String
    providerDisplayName: String
    tags: [String!]!
    plans: [ServicePlan!]!
    activated: Boolean!
    apiSpec: JSON
    asyncApiSpec: JSON
    content: JSON
}

type ServicePlan {
    name: String!
    displayName: String
    externalName: String!
    description: String!
    relatedServiceClassName: String!
    instanceCreateParameterSchema: JSON
}

type ServiceBroker {
    name: String!
    status: ServiceBrokerStatus!
    creationTimestamp: Timestamp!
    url: String!
    labels: JSON!
}

type ServiceBrokerStatus {
    ready: Boolean!
    reason: String!
    message: String!
}

type ServiceBinding {
    name: String!
    serviceInstanceName: String!
    environment: String!
    secret: Secret
    status: ServiceBindingStatus!
}

type ServiceBindingStatus {
    type: ServiceBindingStatusType!
    reason: String!
    message: String!
}

enum ServiceBindingStatusType {
    READY
    PENDING
    FAILED
    UNKNOWN
}

type ServiceBindingEvent {
    type: SubscriptionEventType!
    binding: ServiceBinding!
}

# We cannot use ServiceBinding as a result of create action
# because secret at the moment of mutation execution is not available.
type CreateServiceBindingOutput {
    name: String!
    serviceInstanceName: String!
    environment: String!
}

type Secret {
    name: String!
    environment: String!
    data: JSON!
}

type DeleteServiceBindingOutput {
    name: String!
    environment: String!
}

type DeleteServiceBindingUsageOutput {
    name: String!
    environment: String!
}

type ServiceBindingUsage {
    name: String!
    environment: String!
    serviceBinding: ServiceBinding
    usedBy: LocalObjectReference!
    parameters: ServiceBindingUsageParameters
    status: ServiceBindingUsageStatus!
}

type ServiceBindingUsageEvent {
    type: SubscriptionEventType!
    bindingUsage: ServiceBindingUsage!
}

type ServiceBindingUsageStatus {
    type: ServiceBindingUsageStatusType!
    reason: String!
    message: String!
}

enum ServiceBindingUsageStatusType {
    READY
    PENDING
    FAILED
    UNKNOWN
}

type LocalObjectReference {
    kind: String!
    name: String!
}

type ServiceBindingUsageParameters {
    envPrefix: EnvPrefix
}

type EnvPrefix {
    name: String!
}

type LimitRange {
    name: String!
    limits: [LimitRangeItem!]!
}

type LimitRangeItem {
    limitType: LimitType!
    max: ResourceType!
    default: ResourceType!
    defaultRequest: ResourceType!
}

enum LimitType {
    Container
    Pod
}

type ResourceType {
    memory: String
    cpu: String
}

input CreateServiceBindingUsageInput {
    name: String!
    environment: String!
    serviceBindingRef: ServiceBindingRefInput!
    usedBy: LocalObjectReferenceInput!
    parameters: ServiceBindingUsageParametersInput
}

input ServiceBindingRefInput {
    name: String!
}

input LocalObjectReferenceInput {
    kind: String!
    name: String!
}

input ServiceBindingUsageParametersInput {
    envPrefix: EnvPrefixInput
}

input EnvPrefixInput {
    name: String!
}

type Container {
    name: String!
    image: String!
}

type DeploymentStatus {
    replicas: Int!
    updatedReplicas: Int!
    readyReplicas: Int!
    availableReplicas: Int!
    conditions: [DeploymentCondition!]!
}

type DeploymentCondition {
    status: String!
    type: String!
    lastTransitionTimestamp: Timestamp!
    lastUpdateTimestamp: Timestamp!
    message: String!
    reason: String!
}

type Deployment {
    name: String!
    environment: String!
    creationTimestamp: Timestamp!
    status: DeploymentStatus!
    labels: JSON!
    containers: [Container!]!
    boundServiceInstanceNames: [String!]!
}

type ResourceValues {
    memory: String
    cpu: String
}

type ResourceQuota {
    name: String!
    pods: String
    limits: ResourceValues!
    requests: ResourceValues!
}

type ResourceQuotasStatus {
    exceeded: Boolean!
    exceededQuotas: [ExceededQuota!]!
}

type ExceededQuota {
    quotaName: String!
    resourceName: String!
    affectedResources: [String!]!
}

# Remote Environments

type Environment {
    name: String!
    remoteEnvironments: [String!]!
}

type RemoteEnvironment {
    name: String!
    description: String!
    source: RemoteEnvironmentSource!
    services: [RemoteEnvironmentService!]!
    enabledInEnvironments: [String!]!
    status: RemoteEnvironmentStatus!
}

type ConnectorService {
    url: String!
}

type EnvironmentMapping {
    environment: String!
    remoteEnvironment: String!
}

type RemoteEnvironmentSource {
    environment: String!
    type: String!
    namespace: String!
}

type RemoteEnvironmentService {
    id: String!
    displayName: String!
    longDescription: String!
    providerDisplayName: String!
    tags: [String!]!
    entries: [RemoteEnvironmentEntry!]!
}

type RemoteEnvironmentEntry {
    type: String!
    gatewayUrl: String
    accessLabel: String
}

enum RemoteEnvironmentStatus {
    SERVING
    NOT_SERVING
    GATEWAY_NOT_CONFIGURED
}

type EventActivationSource {
    environment: String!
    type: String!
    namespace: String!
}

type EventActivationEvent {
    eventType: String!
    version: String!
    description: String!
}

type EventActivation {
    name: String!
    displayName: String!
    source: EventActivationSource!
    events: [EventActivationEvent!]!
}

type UsageKind {
    name: String!
    group: String!
    kind: String!
    version: String!
    displayName: String!
}

type UsageKindResource {
    name: String!
    namespace: String!
}

# IDP PRESETS

type IDPPreset {
    name: String!
    issuer: String!
    jwksUri: String!
}

# Kubeless

type Function {
    name: String!
    trigger: String!
    creationTimestamp: Timestamp!
    labels: JSON!
    environment: String!
}

input InputTopic {
    id: String!
    type: String!
}

# API controller

type Service {
    name: String!
    port: Int!
}

enum AuthenticationPolicyType {
    JWT
}

type AuthenticationPolicy  {
    type: AuthenticationPolicyType!
    issuer: String!
    jwksURI: String!
}

type API {
    name: String!
    hostname: String!
    service: Service!
    authenticationPolicies: [AuthenticationPolicy!]!
}

# Queries

type Query {
    serviceInstance(name: String!, environment: String!): ServiceInstance
    serviceInstances(environment: String!, first: Int, offset: Int, status: InstanceStatusType): [ServiceInstance!]!
    serviceClasses(first: Int, offset: Int): [ServiceClass!]!
    serviceClass(name: String!): ServiceClass
    serviceBrokers(first: Int, offset: Int): [ServiceBroker!]!
    serviceBroker(name: String!): ServiceBroker
    serviceBindingUsage(name: String!, environment: String!): ServiceBindingUsage
    serviceBinding(name: String!, environment: String!): ServiceBinding
    usageKinds(first: Int, offset: Int): [UsageKind!]!

    # The query returns all instances of the resources specified by the usageKind parameter in the given environment. The result contains the resources which do not have the metadata.ownerReference.
    usageKindResources(usageKind: String!, environment: String!): [UsageKindResource!]!

    apis(environment: String!, serviceName: String, hostname: String): [API!]!

    remoteEnvironment(name: String!): RemoteEnvironment
    remoteEnvironments(environment: String, first: Int, offset: Int): [RemoteEnvironment!]!
    connectorService(remoteEnvironment: String!): ConnectorService!

    environments(remoteEnvironment: String): [Environment!]!
    deployments(environment: String!, excludeFunctions: Boolean): [Deployment!]!
    resourceQuotas(environment: String!): [ResourceQuota!]!
    resourceQuotasStatus(environment: String!): ResourceQuotasStatus!

    functions(environment: String!, first: Int, offset: Int): [Function!]!

    content(contentType: String!, id: String!): JSON
    topics(input: [InputTopic!]!, internal: Boolean): [TopicEntry!]
    eventActivations(environment: String!): [EventActivation!]!

    limitRanges(environment: String!): [LimitRange!]!

    IDPPreset(name: String!): IDPPreset
    IDPPresets(first: Int, offset: Int): [IDPPreset!]!
}

# Mutations

type Mutation {
    createServiceInstance(params: ServiceInstanceCreateInput!): ServiceInstance
    deleteServiceInstance(name: String!, environment: String!): ServiceInstance
    createServiceBinding(serviceBindingName: String!, serviceInstanceName: String!, environment: String!): CreateServiceBindingOutput
    deleteServiceBinding(serviceBindingName: String!, environment: String!): DeleteServiceBindingOutput
    createServiceBindingUsage(createServiceBindingUsageInput: CreateServiceBindingUsageInput): ServiceBindingUsage
    deleteServiceBindingUsage(serviceBindingUsageName: String!, environment: String!): DeleteServiceBindingUsageOutput

    enableRemoteEnvironment(remoteEnvironment: String!, environment: String!): EnvironmentMapping
    disableRemoteEnvironment(remoteEnvironment: String!, environment: String!): EnvironmentMapping

    createIDPPreset(name: String!, issuer: String!, jwksUri: String!): IDPPreset
    deleteIDPPreset(name: String!): IDPPreset
}

# Subscriptions

type Subscription {
    serviceInstanceEvent(environment: String!): ServiceInstanceEvent!
    serviceBindingEventForServiceInstance(serviceInstanceName: String!, environment: String!): ServiceBindingEvent!
    serviceBindingUsageEventForServiceInstance(serviceInstanceName: String!, environment: String!): ServiceBindingUsageEvent!
}

# Schema

schema {
    query: Query
    mutation: Mutation
}
`},
)
