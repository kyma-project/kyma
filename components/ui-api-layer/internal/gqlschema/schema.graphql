# Scalars

scalar JSON

scalar Labels

scalar Timestamp

# Content


type Title {
    name: String!
    anchor: String!
    titles: [Title!]
}

type Section {
    name: String!
    anchor: String!
    titles: [Title!]!
    topicType: String!
}

type TopicEntry {
    contentType: String!
    id: String!
    sections: [Section!]!
}

# Service Catalog

type ServiceInstance {
    name: String!
    environment: String!
    planSpec: JSON
    creationTimestamp: Timestamp!
    labels: [String!]!
    status: ServiceInstanceStatus!
    classReference: ServiceInstanceResourceRef
    planReference: ServiceInstanceResourceRef
    serviceClass: ServiceClass
    clusterServiceClass: ClusterServiceClass
    servicePlan: ServicePlan
    clusterServicePlan: ClusterServicePlan
    bindable: Boolean!
    serviceBindings: ServiceBindings!
    serviceBindingUsages: [ServiceBindingUsage!]!
}

type ServiceInstanceResourceRef {
    name: String!
    displayName: String!
    clusterWide: Boolean!
}

type ServiceInstanceStatus {
    type: InstanceStatusType!
    reason: String!
    message: String!
}

enum InstanceStatusType {
    RUNNING
    PROVISIONING
    DEPROVISIONING
    PENDING
    FAILED
}

type ServiceInstanceEvent {
    type: SubscriptionEventType!
    serviceInstance: ServiceInstance!
}

type ServiceBrokerEvent {
    type: SubscriptionEventType!
    serviceBroker: ServiceBroker!
}

type ClusterServiceBrokerEvent {
    type: SubscriptionEventType!
    clusterServiceBroker: ClusterServiceBroker!
}

enum SubscriptionEventType {
    ADD
    UPDATE
    DELETE
}

input ServiceInstanceCreateInput {
    name: String!
    environment: String!
    classRef: ServiceInstanceCreateInputResourceRef!
    planRef: ServiceInstanceCreateInputResourceRef!
    labels: [String!]!
    parameterSchema: JSON
}

input ServiceInstanceCreateInputResourceRef {
    externalName: String!
    clusterWide: Boolean!
}

type ServiceClass {
    name: String!
    environment: String!
    externalName: String!
    displayName: String
    creationTimestamp: Timestamp!
    description: String!
    longDescription: String
    imageUrl: String
    documentationUrl: String
    supportUrl: String
    providerDisplayName: String
    tags: [String!]!
    plans: [ServicePlan!]!
    activated: Boolean!
    apiSpec: JSON
    asyncApiSpec: JSON
    content: JSON
}

type ClusterServiceClass {
    name: String!
    externalName: String!
    displayName: String
    creationTimestamp: Timestamp!
    description: String!
    longDescription: String
    imageUrl: String
    documentationUrl: String
    supportUrl: String
    providerDisplayName: String
    tags: [String!]!
    plans: [ClusterServicePlan!]!
    activated: Boolean!
    apiSpec: JSON
    asyncApiSpec: JSON
    content: JSON
}

type ServicePlan {
    name: String!
    environment: String!
    displayName: String
    externalName: String!
    description: String!
    relatedServiceClassName: String!
    instanceCreateParameterSchema: JSON
    bindingCreateParameterSchema: JSON
}

type ClusterServicePlan {
    name: String!
    displayName: String
    externalName: String!
    description: String!
    relatedClusterServiceClassName: String!
    instanceCreateParameterSchema: JSON
}

type ServiceBroker {
    name: String!
    environment: String!
    status: ServiceBrokerStatus!
    creationTimestamp: Timestamp!
    url: String!
    labels: Labels!
}

type ClusterServiceBroker {
    name: String!
    status: ServiceBrokerStatus!
    creationTimestamp: Timestamp!
    url: String!
    labels: Labels!
}

type ServiceBrokerStatus {
    ready: Boolean!
    reason: String!
    message: String!
}

type ServiceBindings {
    items: [ServiceBinding!]!
    stats: ServiceBindingsStats!
}

type ServiceBindingsStats {
    ready: Int!
    failed: Int!
    pending: Int!
    unknown: Int!
}

type ServiceBinding {
    name: String!
    serviceInstanceName: String!
    environment: String!
    secret: Secret
    status: ServiceBindingStatus!
    parameters: JSON
}

type ServiceBindingStatus {
    type: ServiceBindingStatusType!
    reason: String!
    message: String!
}

enum ServiceBindingStatusType {
    READY
    PENDING
    FAILED
    UNKNOWN
}

type ServiceBindingEvent {
    type: SubscriptionEventType!
    serviceBinding: ServiceBinding!
}

# We cannot use ServiceBinding as a result of create action
# because secret at the moment of mutation execution is not available.
type CreateServiceBindingOutput {
    name: String!
    serviceInstanceName: String!
    environment: String!
}

type Secret {
    name: String!
    environment: String!
    data: JSON!
}

type DeleteServiceBindingOutput {
    name: String!
    environment: String!
}

type DeleteServiceBindingUsageOutput {
    name: String!
    environment: String!
}

type ServiceBindingUsage {
    name: String!
    environment: String!
    serviceBinding: ServiceBinding
    usedBy: LocalObjectReference!
    parameters: ServiceBindingUsageParameters
    status: ServiceBindingUsageStatus!
}

type ServiceBindingUsageEvent {
    type: SubscriptionEventType!
    serviceBindingUsage: ServiceBindingUsage!
}

type ServiceBindingUsageStatus {
    type: ServiceBindingUsageStatusType!
    reason: String!
    message: String!
}

enum ServiceBindingUsageStatusType {
    READY
    PENDING
    FAILED
    UNKNOWN
}

type LocalObjectReference {
    kind: String!
    name: String!
}

type ServiceBindingUsageParameters {
    envPrefix: EnvPrefix
}

type EnvPrefix {
    name: String!
}

type LimitRange {
    name: String!
    limits: [LimitRangeItem!]!
}

type LimitRangeItem {
    limitType: LimitType!
    max: ResourceType!
    default: ResourceType!
    defaultRequest: ResourceType!
}

enum LimitType {
    Container
    Pod
}

type ResourceType {
    memory: String
    cpu: String
}

input CreateServiceBindingUsageInput {
    name: String
    environment: String!
    serviceBindingRef: ServiceBindingRefInput!
    usedBy: LocalObjectReferenceInput!
    parameters: ServiceBindingUsageParametersInput
}

input ServiceBindingRefInput {
    name: String!
}

input LocalObjectReferenceInput {
    kind: String!
    name: String!
}

input ServiceBindingUsageParametersInput {
    envPrefix: EnvPrefixInput
}

input EnvPrefixInput {
    name: String!
}

type Container {
    name: String!
    image: String!
}

type DeploymentStatus {
    replicas: Int!
    updatedReplicas: Int!
    readyReplicas: Int!
    availableReplicas: Int!
    conditions: [DeploymentCondition!]!
}

type DeploymentCondition {
    status: String!
    type: String!
    lastTransitionTimestamp: Timestamp!
    lastUpdateTimestamp: Timestamp!
    message: String!
    reason: String!
}

type Deployment {
    name: String!
    environment: String!
    creationTimestamp: Timestamp!
    status: DeploymentStatus!
    labels: Labels!
    containers: [Container!]!
    boundServiceInstanceNames: [String!]!
}

type ResourceValues {
    memory: String
    cpu: String
}

type ResourceQuota {
    name: String!
    pods: String
    limits: ResourceValues!
    requests: ResourceValues!
}

type ResourceQuotasStatus {
    exceeded: Boolean!
    exceededQuotas: [ExceededQuota!]!
}

type ExceededQuota {
    quotaName: String!
    resourceName: String!
    affectedResources: [String!]!
}

# Remote Environments

type Environment {
    name: String!
    remoteEnvironments: [String!]!
}

type RemoteEnvironment {
    name: String!
    description: String!
    labels: Labels!
    services: [RemoteEnvironmentService!]!
    enabledInEnvironments: [String!]!
    status: RemoteEnvironmentStatus!
}

type ConnectorService {
    url: String!
}

type EnvironmentMapping {
    environment: String!
    remoteEnvironment: String!
}

type RemoteEnvironmentService {
    id: String!
    displayName: String!
    longDescription: String!
    providerDisplayName: String!
    tags: [String!]!
    entries: [RemoteEnvironmentEntry!]!
}

type RemoteEnvironmentEntry {
    type: String!
    gatewayUrl: String
    accessLabel: String
}

enum RemoteEnvironmentStatus {
    SERVING
    NOT_SERVING
    GATEWAY_NOT_CONFIGURED
}

type RemoteEnvironmentMutationOutput {
    name: String!
    description: String!
    labels: Labels!
}

type DeleteRemoteEnvironmentOutput {
    name: String!
}

type EventActivationEvent {
    eventType: String!
    version: String!
    description: String!
}

type EventActivation {
    name: String!
    displayName: String!
    sourceId: String!
    events: [EventActivationEvent!]!
}

type UsageKind {
    name: String!
    group: String!
    kind: String!
    version: String!
    displayName: String!
}

type UsageKindResource {
    name: String!
    namespace: String!
}

type BindableResourcesOutputItem {
    kind: String!
    displayName: String!
    resources: [UsageKindResource!]!
}

# IDP PRESETS

type IDPPreset {
    name: String!
    issuer: String!
    jwksUri: String!
}

# Kubeless

type Function {
    name: String!
    trigger: String!
    creationTimestamp: Timestamp!
    labels: Labels!
    environment: String!
}

input InputTopic {
    id: String!
    type: String!
}

# API controller

type Service {
    name: String!
    port: Int!
}

enum AuthenticationPolicyType {
    JWT
}

type AuthenticationPolicy  {
    type: AuthenticationPolicyType!
    issuer: String!
    jwksURI: String!
}

type API {
    name: String!
    hostname: String!
    service: Service!
    authenticationPolicies: [AuthenticationPolicy!]!
}

# Queries

type Query {
    serviceInstance(name: String!, environment: String!): ServiceInstance
    serviceInstances(environment: String!, first: Int, offset: Int, status: InstanceStatusType): [ServiceInstance!]!

    clusterServiceClasses(first: Int, offset: Int): [ClusterServiceClass!]!
    clusterServiceClass(name: String!): ClusterServiceClass
    serviceClasses(environment: String!, first: Int, offset: Int): [ServiceClass!]!
    serviceClass(environment: String!, name: String!): ServiceClass

    clusterServiceBrokers(first: Int, offset: Int): [ClusterServiceBroker!]!
    clusterServiceBroker(name: String!): ClusterServiceBroker
    serviceBrokers(environment: String!, first: Int, offset: Int): [ServiceBroker!]!
    serviceBroker(name: String!, environment: String!): ServiceBroker

    serviceBindingUsage(name: String!, environment: String!): ServiceBindingUsage
    serviceBinding(name: String!, environment: String!): ServiceBinding
    usageKinds(first: Int, offset: Int): [UsageKind!]!

    # The query returns all instances of the resources specified by the usageKind parameter in the given environment. The result contains the resources which do not have the metadata.ownerReference.
    # DEPRECATED - will be changed by bindable resources query.
    usageKindResources(usageKind: String!, environment: String!): [UsageKindResource!]!

    # The query returns all instance of the resources which could be bound (proper UsageKind exists).
    bindableResources(environment: String!): [BindableResourcesOutputItem!]!

    apis(environment: String!, serviceName: String, hostname: String): [API!]!

    remoteEnvironment(name: String!): RemoteEnvironment
    remoteEnvironments(environment: String, first: Int, offset: Int): [RemoteEnvironment!]!
    connectorService(remoteEnvironment: String!): ConnectorService!

    environments(remoteEnvironment: String): [Environment!]!
    deployments(environment: String!, excludeFunctions: Boolean): [Deployment!]!
    resourceQuotas(environment: String!): [ResourceQuota!]!
    resourceQuotasStatus(environment: String!): ResourceQuotasStatus!

    functions(environment: String!, first: Int, offset: Int): [Function!]!

    content(contentType: String!, id: String!): JSON
    topics(input: [InputTopic!]!, internal: Boolean): [TopicEntry!]
    eventActivations(environment: String!): [EventActivation!]!

    limitRanges(environment: String!): [LimitRange!]!

    IDPPreset(name: String!): IDPPreset
    IDPPresets(first: Int, offset: Int): [IDPPreset!]!
}

# Mutations

type Mutation {
    createServiceInstance(params: ServiceInstanceCreateInput!): ServiceInstance
    deleteServiceInstance(name: String!, environment: String!): ServiceInstance
    createServiceBinding(serviceBindingName: String, serviceInstanceName: String!, environment: String!, parameters: JSON): CreateServiceBindingOutput
    deleteServiceBinding(serviceBindingName: String!, environment: String!): DeleteServiceBindingOutput
    createServiceBindingUsage(createServiceBindingUsageInput: CreateServiceBindingUsageInput): ServiceBindingUsage
    deleteServiceBindingUsage(serviceBindingUsageName: String!, environment: String!): DeleteServiceBindingUsageOutput

    createRemoteEnvironment(name: String!, description: String, labels: Labels): RemoteEnvironmentMutationOutput!
    updateRemoteEnvironment(name: String!, description: String, labels: Labels): RemoteEnvironmentMutationOutput!
    deleteRemoteEnvironment(name: String!): DeleteRemoteEnvironmentOutput!

    enableRemoteEnvironment(remoteEnvironment: String!, environment: String!): EnvironmentMapping
    disableRemoteEnvironment(remoteEnvironment: String!, environment: String!): EnvironmentMapping

    createIDPPreset(name: String!, issuer: String!, jwksUri: String!): IDPPreset
    deleteIDPPreset(name: String!): IDPPreset
}

# Subscriptions

type Subscription {
    serviceInstanceEvent(environment: String!): ServiceInstanceEvent!
    serviceBindingEventForServiceInstance(serviceInstanceName: String!, environment: String!): ServiceBindingEvent!
    serviceBindingUsageEventForServiceInstance(serviceInstanceName: String!, environment: String!): ServiceBindingUsageEvent!
    serviceBrokerEvent(environment: String!): ServiceBrokerEvent!
    clusterServiceBrokerEvent: ClusterServiceBrokerEvent!
}

# Schema

schema {
    query: Query
    mutation: Mutation
}
