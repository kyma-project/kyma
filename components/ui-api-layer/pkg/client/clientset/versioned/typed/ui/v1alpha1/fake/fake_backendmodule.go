// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/kyma-project/kyma/components/ui-api-layer/pkg/apis/ui/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeBackendModules implements BackendModuleInterface
type FakeBackendModules struct {
	Fake *FakeUiV1alpha1
}

var backendmodulesResource = schema.GroupVersionResource{Group: "ui.kyma-project.io", Version: "v1alpha1", Resource: "backendmodules"}

var backendmodulesKind = schema.GroupVersionKind{Group: "ui.kyma-project.io", Version: "v1alpha1", Kind: "BackendModule"}

// Get takes name of the backendModule, and returns the corresponding backendModule object, and an error if there is any.
func (c *FakeBackendModules) Get(name string, options v1.GetOptions) (result *v1alpha1.BackendModule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(backendmodulesResource, name), &v1alpha1.BackendModule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BackendModule), err
}

// List takes label and field selectors, and returns the list of BackendModules that match those selectors.
func (c *FakeBackendModules) List(opts v1.ListOptions) (result *v1alpha1.BackendModuleList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(backendmodulesResource, backendmodulesKind, opts), &v1alpha1.BackendModuleList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.BackendModuleList{ListMeta: obj.(*v1alpha1.BackendModuleList).ListMeta}
	for _, item := range obj.(*v1alpha1.BackendModuleList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested backendModules.
func (c *FakeBackendModules) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(backendmodulesResource, opts))
}

// Create takes the representation of a backendModule and creates it.  Returns the server's representation of the backendModule, and an error, if there is any.
func (c *FakeBackendModules) Create(backendModule *v1alpha1.BackendModule) (result *v1alpha1.BackendModule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(backendmodulesResource, backendModule), &v1alpha1.BackendModule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BackendModule), err
}

// Update takes the representation of a backendModule and updates it. Returns the server's representation of the backendModule, and an error, if there is any.
func (c *FakeBackendModules) Update(backendModule *v1alpha1.BackendModule) (result *v1alpha1.BackendModule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(backendmodulesResource, backendModule), &v1alpha1.BackendModule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BackendModule), err
}

// Delete takes name of the backendModule and deletes it. Returns an error if one occurs.
func (c *FakeBackendModules) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(backendmodulesResource, name), &v1alpha1.BackendModule{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeBackendModules) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(backendmodulesResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.BackendModuleList{})
	return err
}

// Patch applies the patch and returns the patched backendModule.
func (c *FakeBackendModules) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.BackendModule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(backendmodulesResource, name, data, subresources...), &v1alpha1.BackendModule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BackendModule), err
}
