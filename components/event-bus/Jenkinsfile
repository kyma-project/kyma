#!/usr/bin/env groovy
def label = "kyma-${UUID.randomUUID().toString()}"
def application = "event-bus"
def dockerPushRoot = "${env.DOCKER_REGISTRY}${params.PUSH_DIR}"
def dockerImageTag = params.APP_VERSION
def registry = env.DOCKER_REGISTRY
def buildpack = 'golang-buildpack:0.0.9'
def appFolder = env.APP_FOLDER
def repositoryName = 'kyma'

def checkoutDir = "src/github.com/kyma-project/$repositoryName"
def componentDir = "$checkoutDir/$appFolder"
def workDir = ""

def imageNamePush = 'event-bus-push'
def imageNamePublish = 'event-bus-publish'
def imageNameSubValidator = 'event-bus-sub-validator'

echo """
********************************
Job started with the following parameters:
DOCKER_REGISTRY=${env.DOCKER_REGISTRY}
PUSH_DIR=${params.PUSH_DIR}
DOCKER_CREDENTIALS=${env.DOCKER_CREDENTIALS}
GIT_REVISION=${params.GIT_REVISION}
GIT_BRANCH=${params.GIT_BRANCH}
APP_VERSION=${params.APP_VERSION}
APP_FOLDER=${env.APP_FOLDER}
FULL_BUILD=${params.FULL_BUILD}
********************************
"""

podTemplate(label: label, 
    containers: [
        containerTemplate(name: "golang-buildpack", image: "${registry}${buildpack}", ttyEnabled: true, command: 'cat'),
    ]) {

    node(label) {
        try {
            timestamps {
                timeout(time:20, unit:"MINUTES") {
                    ansiColor('xterm') {
                        stage("setup") {

                            workDir = pwd()

                            dir(checkoutDir) {
                                checkout scm
                            }

                            if(dockerImageTag == "") {
                                error("No version for docker tag defined, please set APP_VERSION parameter for master branch or GIT_BRANCH parameter for any branch")
                            }

                            withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS, passwordVariable: 'pwd', usernameVariable: 'uname')]) {
                                sh "docker login -u $uname -p '$pwd' $env.DOCKER_REGISTRY"
                            }
                        }

                        stage("install dependencies $application") {
                            execute("make resolve", workDir, componentDir)
                        }

                        stage("code quality") {
                            execute("gometalinter --skip=generated --vendor --deadline=2m --disable-all --enable=vet ./...", workDir, componentDir)
                        }

                        stage("build - event-bus-publish") {
                            execute("make clean compile", workDir, componentDir+"/cmd/event-bus-publish")
                        }

                        stage("build - event-bus-push") {
                            execute("make clean compile", workDir, componentDir+"/cmd/event-bus-push")
                        }

                        stage("build - event-bus-sub-validator") {
                            execute("make clean compile", workDir, componentDir+"/cmd/event-bus-sv")
                        }

                        stage("test - event-bus") {
                            execute("make test", workDir, componentDir)
                        }

                        stage("build image - event-bus-publish") {
                            dir(componentDir + '/cmd/event-bus-publish') {
                                sh "./dockerBuild.sh event-bus-publish ${dockerImageTag} ${application}"
                            }
                        }

                        stage("build image - event-bus-push") {
                            dir(componentDir + '/cmd/event-bus-push') {
                                sh "./dockerBuild.sh event-bus-push ${dockerImageTag} ${application}"
                            }
                        }

                        stage("build image - event-bus-sub-validator") {
                            dir(componentDir + '/cmd/event-bus-sv') {
                                sh "./dockerBuild.sh event-bus-sub-validator ${dockerImageTag} ${application}"
                            }
                        }

                        stage("push image - event-bus-publish") {
                            def imageName = "${dockerPushRoot}${imageNamePublish}:${dockerImageTag}"
                            sh "docker tag event-bus-publish:${dockerImageTag} ${imageName}"
                            sh "docker push ${imageName}"
                            echo "pushed image event-bus-publish: ${imageName}"

                            if (params.GIT_BRANCH == 'master') {
                                def latestImageName = "${dockerPushRoot}${imageNamePublish}:latest"
                                sh "docker tag event-bus-publish:${dockerImageTag} ${latestImageName}"
                                sh "docker push ${latestImageName}"
                            }
                        }

                        stage("push image - event-bus-push") {
                            def imageName = "${dockerPushRoot}${imageNamePush}:${dockerImageTag}"
                            sh "docker tag event-bus-push:${dockerImageTag} ${imageName}"
                            sh "docker push ${imageName}"
                            echo "pushed image event-bus-push: ${imageName}"

                            if (params.GIT_BRANCH == 'master') {
                                def latestImageName = "${dockerPushRoot}${imageNamePush}:latest"
                                sh "docker tag event-bus-push:${dockerImageTag} ${latestImageName}"
                                sh "docker push ${latestImageName}"
                            }
                        }

                        stage("push image - event-bus-sub-validator") {
                            def imageName = "${dockerPushRoot}${imageNameSubValidator}:${dockerImageTag}"
                            sh "docker tag event-bus-sub-validator:${dockerImageTag} ${imageName}"
                            sh "docker push ${imageName}"
                            echo "pushed image event-bus-sub-validator: ${imageName}"

                            if (params.GIT_BRANCH == 'master') {
                                def latestImageName = "${dockerPushRoot}${imageNameSubValidator}:latest"
                                sh "docker tag event-bus-sub-validator:${dockerImageTag} ${latestImageName}"
                                sh "docker push ${latestImageName}"
                            }
                        }
                    }
                }
            }
        } catch (ex) {
            slaveDiagnostics()
            execute("df -h", workDir, componentDir)

            echo "Got exception: ${ex}"
            currentBuild.result = "FAILURE"
            def body = "${currentBuild.currentResult} ${env.JOB_NAME}${env.BUILD_DISPLAY_NAME}: on branch: ${params.GIT_BRANCH}. See details: ${env.BUILD_URL}"
            emailext body: body, recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: "${currentBuild.currentResult}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
        }
    }
}

def execute(command, workDir, componentDir) {
    container("golang-buildpack") {
        sh """
            export GOPATH=$workDir
            cd $workDir/$componentDir
            bash -c '$command'
        """
    }
}

def slaveDiagnostics() {
    sh "whoami"
    sh "pwd"
    sh "df -h"
    sh "mount"
}
