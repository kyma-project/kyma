// Code generated by mockery 2.7.4. DO NOT EDIT.

package automock

import (
	context "context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/rbac/v1"
)

// CRBInterface is an autogenerated mock type for the CRBInterface type
type CRBInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, clusterRoleBinding, opts
func (_m *CRBInterface) Create(ctx context.Context, clusterRoleBinding *v1.ClusterRoleBinding, opts metav1.CreateOptions) (*v1.ClusterRoleBinding, error) {
	ret := _m.Called(ctx, clusterRoleBinding, opts)

	var r0 *v1.ClusterRoleBinding
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ClusterRoleBinding, metav1.CreateOptions) *v1.ClusterRoleBinding); ok {
		r0 = rf(ctx, clusterRoleBinding, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ClusterRoleBinding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.ClusterRoleBinding, metav1.CreateOptions) error); ok {
		r1 = rf(ctx, clusterRoleBinding, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, name, opts
func (_m *CRBInterface) Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ClusterRoleBinding, error) {
	ret := _m.Called(ctx, name, opts)

	var r0 *v1.ClusterRoleBinding
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) *v1.ClusterRoleBinding); ok {
		r0 = rf(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ClusterRoleBinding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, metav1.GetOptions) error); ok {
		r1 = rf(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, clusterRoleBinding, opts
func (_m *CRBInterface) Update(ctx context.Context, clusterRoleBinding *v1.ClusterRoleBinding, opts metav1.UpdateOptions) (*v1.ClusterRoleBinding, error) {
	ret := _m.Called(ctx, clusterRoleBinding, opts)

	var r0 *v1.ClusterRoleBinding
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ClusterRoleBinding, metav1.UpdateOptions) *v1.ClusterRoleBinding); ok {
		r0 = rf(ctx, clusterRoleBinding, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ClusterRoleBinding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.ClusterRoleBinding, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, clusterRoleBinding, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
