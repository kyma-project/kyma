// Code generated by mockery 2.7.4. DO NOT EDIT.

package automock

import (
	uaa "github.com/kyma-project/kyma/components/busola-migrator/internal/uaa"
	mock "github.com/stretchr/testify/mock"
)

// UAAClient is an autogenerated mock type for the UAAClient type
type UAAClient struct {
	mock.Mock
}

// GetAuthorizationEndpointWithParams provides a mock function with given fields: authzEndpoint, oauthState
func (_m *UAAClient) GetAuthorizationEndpointWithParams(authzEndpoint string, oauthState string) (string, error) {
	ret := _m.Called(authzEndpoint, oauthState)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(authzEndpoint, oauthState)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(authzEndpoint, oauthState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOpenIDConfiguration provides a mock function with given fields:
func (_m *UAAClient) GetOpenIDConfiguration() (uaa.OpenIDConfiguration, error) {
	ret := _m.Called()

	var r0 uaa.OpenIDConfiguration
	if rf, ok := ret.Get(0).(func() uaa.OpenIDConfiguration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uaa.OpenIDConfiguration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToken provides a mock function with given fields: tokenEndpoint, authCode
func (_m *UAAClient) GetToken(tokenEndpoint string, authCode string) (map[string]interface{}, error) {
	ret := _m.Called(tokenEndpoint, authCode)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = rf(tokenEndpoint, authCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tokenEndpoint, authCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
