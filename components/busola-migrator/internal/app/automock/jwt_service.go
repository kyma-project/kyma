// Code generated by mockery 2.7.4. DO NOT EDIT.

package automock

import (
	jwt "github.com/lestrrat-go/jwx/jwt"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-project/kyma/components/busola-migrator/internal/model"
)

// JWTService is an autogenerated mock type for the JWTService type
type JWTService struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: token
func (_m *JWTService) GetUser(token jwt.Token) (model.User, error) {
	ret := _m.Called(token)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(jwt.Token) model.User); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseAndVerify provides a mock function with given fields: jwtSrc, jwksURI
func (_m *JWTService) ParseAndVerify(jwtSrc string, jwksURI string) (jwt.Token, error) {
	ret := _m.Called(jwtSrc, jwksURI)

	var r0 jwt.Token
	if rf, ok := ret.Get(0).(func(string, string) jwt.Token); ok {
		r0 = rf(jwtSrc, jwksURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(jwtSrc, jwksURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
