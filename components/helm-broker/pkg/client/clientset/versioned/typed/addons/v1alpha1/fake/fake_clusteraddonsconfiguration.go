// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/kyma-project/kyma/components/helm-broker/pkg/apis/addons/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeClusterAddonsConfigurations implements ClusterAddonsConfigurationInterface
type FakeClusterAddonsConfigurations struct {
	Fake *FakeAddonsV1alpha1
}

var clusteraddonsconfigurationsResource = schema.GroupVersionResource{Group: "addons.kyma-project.io", Version: "v1alpha1", Resource: "clusteraddonsconfigurations"}

var clusteraddonsconfigurationsKind = schema.GroupVersionKind{Group: "addons.kyma-project.io", Version: "v1alpha1", Kind: "ClusterAddonsConfiguration"}

// Get takes name of the clusterAddonsConfiguration, and returns the corresponding clusterAddonsConfiguration object, and an error if there is any.
func (c *FakeClusterAddonsConfigurations) Get(name string, options v1.GetOptions) (result *v1alpha1.ClusterAddonsConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(clusteraddonsconfigurationsResource, name), &v1alpha1.ClusterAddonsConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterAddonsConfiguration), err
}

// List takes label and field selectors, and returns the list of ClusterAddonsConfigurations that match those selectors.
func (c *FakeClusterAddonsConfigurations) List(opts v1.ListOptions) (result *v1alpha1.ClusterAddonsConfigurationList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(clusteraddonsconfigurationsResource, clusteraddonsconfigurationsKind, opts), &v1alpha1.ClusterAddonsConfigurationList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ClusterAddonsConfigurationList{ListMeta: obj.(*v1alpha1.ClusterAddonsConfigurationList).ListMeta}
	for _, item := range obj.(*v1alpha1.ClusterAddonsConfigurationList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested clusterAddonsConfigurations.
func (c *FakeClusterAddonsConfigurations) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(clusteraddonsconfigurationsResource, opts))
}

// Create takes the representation of a clusterAddonsConfiguration and creates it.  Returns the server's representation of the clusterAddonsConfiguration, and an error, if there is any.
func (c *FakeClusterAddonsConfigurations) Create(clusterAddonsConfiguration *v1alpha1.ClusterAddonsConfiguration) (result *v1alpha1.ClusterAddonsConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(clusteraddonsconfigurationsResource, clusterAddonsConfiguration), &v1alpha1.ClusterAddonsConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterAddonsConfiguration), err
}

// Update takes the representation of a clusterAddonsConfiguration and updates it. Returns the server's representation of the clusterAddonsConfiguration, and an error, if there is any.
func (c *FakeClusterAddonsConfigurations) Update(clusterAddonsConfiguration *v1alpha1.ClusterAddonsConfiguration) (result *v1alpha1.ClusterAddonsConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(clusteraddonsconfigurationsResource, clusterAddonsConfiguration), &v1alpha1.ClusterAddonsConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterAddonsConfiguration), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeClusterAddonsConfigurations) UpdateStatus(clusterAddonsConfiguration *v1alpha1.ClusterAddonsConfiguration) (*v1alpha1.ClusterAddonsConfiguration, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(clusteraddonsconfigurationsResource, "status", clusterAddonsConfiguration), &v1alpha1.ClusterAddonsConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterAddonsConfiguration), err
}

// Delete takes name of the clusterAddonsConfiguration and deletes it. Returns an error if one occurs.
func (c *FakeClusterAddonsConfigurations) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(clusteraddonsconfigurationsResource, name), &v1alpha1.ClusterAddonsConfiguration{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeClusterAddonsConfigurations) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(clusteraddonsconfigurationsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.ClusterAddonsConfigurationList{})
	return err
}

// Patch applies the patch and returns the patched clusterAddonsConfiguration.
func (c *FakeClusterAddonsConfigurations) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterAddonsConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(clusteraddonsconfigurationsResource, name, data, subresources...), &v1alpha1.ClusterAddonsConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterAddonsConfiguration), err
}
