// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import storage "github.com/kyma-project/kyma/components/helm-broker/internal/storage"

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

// Bundle provides a mock function with given fields:
func (_m *Factory) Bundle() storage.Bundle {
	ret := _m.Called()

	var r0 storage.Bundle
	if rf, ok := ret.Get(0).(func() storage.Bundle); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Bundle)
		}
	}

	return r0
}

// Chart provides a mock function with given fields:
func (_m *Factory) Chart() storage.Chart {
	ret := _m.Called()

	var r0 storage.Chart
	if rf, ok := ret.Get(0).(func() storage.Chart); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Chart)
		}
	}

	return r0
}

// Instance provides a mock function with given fields:
func (_m *Factory) Instance() storage.Instance {
	ret := _m.Called()

	var r0 storage.Instance
	if rf, ok := ret.Get(0).(func() storage.Instance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Instance)
		}
	}

	return r0
}

// InstanceBindData provides a mock function with given fields:
func (_m *Factory) InstanceBindData() storage.InstanceBindData {
	ret := _m.Called()

	var r0 storage.InstanceBindData
	if rf, ok := ret.Get(0).(func() storage.InstanceBindData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.InstanceBindData)
		}
	}

	return r0
}

// InstanceOperation provides a mock function with given fields:
func (_m *Factory) InstanceOperation() storage.InstanceOperation {
	ret := _m.Called()

	var r0 storage.InstanceOperation
	if rf, ok := ret.Get(0).(func() storage.InstanceOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.InstanceOperation)
		}
	}

	return r0
}
