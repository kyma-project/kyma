// Code generated by mockery v1.0.0
package automock

import addon "github.com/kyma-project/kyma/components/helm-broker/internal/addon"

import mock "github.com/stretchr/testify/mock"

// AddonProvider is an autogenerated mock type for the AddonProvider type
type AddonProvider struct {
	mock.Mock
}

// GetIndex provides a mock function with given fields: _a0
func (_m *AddonProvider) GetIndex(_a0 string) (*addon.IndexDTO, error) {
	ret := _m.Called(_a0)

	var r0 *addon.IndexDTO
	if rf, ok := ret.Get(0).(func(string) *addon.IndexDTO); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*addon.IndexDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadCompleteAddon provides a mock function with given fields: _a0, _a1
func (_m *AddonProvider) LoadCompleteAddon(_a0 addon.EntryDTO, _a1 addon.Name) (addon.CompleteAddon, error) {
	ret := _m.Called(_a0, _a1)

	var r0 addon.CompleteAddon
	if rf, ok := ret.Get(0).(func(addon.EntryDTO, addon.Name) addon.CompleteAddon); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(addon.CompleteAddon)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(addon.EntryDTO, addon.Name) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
