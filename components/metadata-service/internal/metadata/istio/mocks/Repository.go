// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import apperrors "github.com/kyma-project/kyma/components/metadata-service/internal/apperrors"

import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateCheckNothing provides a mock function with given fields: application, serviceId, name
func (_m *Repository) CreateCheckNothing(application string, serviceId string, name string) apperrors.AppError {
	ret := _m.Called(application, serviceId, name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string, string) apperrors.AppError); ok {
		r0 = rf(application, serviceId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// CreateDenier provides a mock function with given fields: application, serviceId, name
func (_m *Repository) CreateDenier(application string, serviceId string, name string) apperrors.AppError {
	ret := _m.Called(application, serviceId, name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string, string) apperrors.AppError); ok {
		r0 = rf(application, serviceId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// CreateRule provides a mock function with given fields: application, serviceId, name
func (_m *Repository) CreateRule(application string, serviceId string, name string) apperrors.AppError {
	ret := _m.Called(application, serviceId, name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string, string) apperrors.AppError); ok {
		r0 = rf(application, serviceId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// DeleteCheckNothing provides a mock function with given fields: name
func (_m *Repository) DeleteCheckNothing(name string) apperrors.AppError {
	ret := _m.Called(name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string) apperrors.AppError); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// DeleteDenier provides a mock function with given fields: name
func (_m *Repository) DeleteDenier(name string) apperrors.AppError {
	ret := _m.Called(name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string) apperrors.AppError); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// DeleteRule provides a mock function with given fields: name
func (_m *Repository) DeleteRule(name string) apperrors.AppError {
	ret := _m.Called(name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string) apperrors.AppError); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// UpsertCheckNothing provides a mock function with given fields: application, serviceId, name
func (_m *Repository) UpsertCheckNothing(application string, serviceId string, name string) apperrors.AppError {
	ret := _m.Called(application, serviceId, name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string, string) apperrors.AppError); ok {
		r0 = rf(application, serviceId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// UpsertDenier provides a mock function with given fields: application, serviceId, name
func (_m *Repository) UpsertDenier(application string, serviceId string, name string) apperrors.AppError {
	ret := _m.Called(application, serviceId, name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string, string) apperrors.AppError); ok {
		r0 = rf(application, serviceId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// UpsertRule provides a mock function with given fields: application, serviceId, name
func (_m *Repository) UpsertRule(application string, serviceId string, name string) apperrors.AppError {
	ret := _m.Called(application, serviceId, name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string, string) apperrors.AppError); ok {
		r0 = rf(application, serviceId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}
