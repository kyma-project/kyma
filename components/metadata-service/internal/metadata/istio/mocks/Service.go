// Code generated by mockery v1.0.0
package mocks

import apperrors "github.com/kyma-project/kyma/components/metadata-service/internal/apperrors"

import mock "github.com/stretchr/testify/mock"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: remoteEnvironment, serviceId, resourceName
func (_m *Service) Create(remoteEnvironment string, serviceId string, resourceName string) apperrors.AppError {
	ret := _m.Called(remoteEnvironment, serviceId, resourceName)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string, string) apperrors.AppError); ok {
		r0 = rf(remoteEnvironment, serviceId, resourceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: resourceName
func (_m *Service) Delete(resourceName string) apperrors.AppError {
	ret := _m.Called(resourceName)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string) apperrors.AppError); ok {
		r0 = rf(resourceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: remoteEnvironment, serviceId, resourceName
func (_m *Service) Upsert(remoteEnvironment string, serviceId string, resourceName string) apperrors.AppError {
	ret := _m.Called(remoteEnvironment, serviceId, resourceName)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string, string) apperrors.AppError); ok {
		r0 = rf(remoteEnvironment, serviceId, resourceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}
