// Code generated by mockery v1.0.0
package mocks

import apperrors "github.com/kyma-project/kyma/components/metadata-service/internal/apperrors"
import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: remoteEnvironment, name, clientID, clientSecret, serviceID
func (_m *Repository) Create(remoteEnvironment string, name string, clientID string, clientSecret string, serviceID string) apperrors.AppError {
	ret := _m.Called(remoteEnvironment, name, clientID, clientSecret, serviceID)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) apperrors.AppError); ok {
		r0 = rf(remoteEnvironment, name, clientID, clientSecret, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: name
func (_m *Repository) Delete(name string) apperrors.AppError {
	ret := _m.Called(name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string) apperrors.AppError); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// Get provides a mock function with given fields: remoteEnvironment, name
func (_m *Repository) Get(remoteEnvironment string, name string) (string, string, apperrors.AppError) {
	ret := _m.Called(remoteEnvironment, name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(remoteEnvironment, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(remoteEnvironment, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 apperrors.AppError
	if rf, ok := ret.Get(2).(func(string, string) apperrors.AppError); ok {
		r2 = rf(remoteEnvironment, name)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(apperrors.AppError)
		}
	}

	return r0, r1, r2
}

// Upsert provides a mock function with given fields: remoteEnvironment, name, clientID, clientSecret, secretID
func (_m *Repository) Upsert(remoteEnvironment string, name string, clientID string, clientSecret string, secretID string) apperrors.AppError {
	ret := _m.Called(remoteEnvironment, name, clientID, clientSecret, secretID)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) apperrors.AppError); ok {
		r0 = rf(remoteEnvironment, name, clientID, clientSecret, secretID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}
