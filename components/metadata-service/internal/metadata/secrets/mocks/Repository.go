// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import apperrors "github.com/kyma-project/kyma/components/metadata-service/internal/apperrors"
import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: remoteEnvironment, name, secretID, data
func (_m *Repository) Create(remoteEnvironment string, name string, secretID string, data map[string][]byte) apperrors.AppError {
	ret := _m.Called(remoteEnvironment, name, secretID, data)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string, string, map[string][]byte) apperrors.AppError); ok {
		r0 = rf(remoteEnvironment, name, secretID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: name
func (_m *Repository) Delete(name string) apperrors.AppError {
	ret := _m.Called(name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string) apperrors.AppError); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// Get provides a mock function with given fields: remoteEnvironment, name
func (_m *Repository) Get(remoteEnvironment string, name string) (map[string][]byte, apperrors.AppError) {
	ret := _m.Called(remoteEnvironment, name)

	var r0 map[string][]byte
	if rf, ok := ret.Get(0).(func(string, string) map[string][]byte); ok {
		r0 = rf(remoteEnvironment, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string, string) apperrors.AppError); ok {
		r1 = rf(remoteEnvironment, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: remoteEnvironment, name, secretID, data
func (_m *Repository) Upsert(remoteEnvironment string, name string, secretID string, data map[string][]byte) apperrors.AppError {
	ret := _m.Called(remoteEnvironment, name, secretID, data)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, string, string, map[string][]byte) apperrors.AppError); ok {
		r0 = rf(remoteEnvironment, name, secretID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}
