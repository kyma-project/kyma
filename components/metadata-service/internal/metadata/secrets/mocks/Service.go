// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import apperrors "github.com/kyma-project/kyma/components/metadata-service/internal/apperrors"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-project/kyma/components/metadata-service/internal/metadata/model"
import remoteenv "github.com/kyma-project/kyma/components/metadata-service/internal/metadata/remoteenv"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: remoteEnvironment, serviceID, credentials
func (_m *Service) Create(remoteEnvironment string, serviceID string, credentials *model.Credentials) (remoteenv.Credentials, apperrors.AppError) {
	ret := _m.Called(remoteEnvironment, serviceID, credentials)

	var r0 remoteenv.Credentials
	if rf, ok := ret.Get(0).(func(string, string, *model.Credentials) remoteenv.Credentials); ok {
		r0 = rf(remoteEnvironment, serviceID, credentials)
	} else {
		r0 = ret.Get(0).(remoteenv.Credentials)
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string, string, *model.Credentials) apperrors.AppError); ok {
		r1 = rf(remoteEnvironment, serviceID, credentials)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name
func (_m *Service) Delete(name string) apperrors.AppError {
	ret := _m.Called(name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string) apperrors.AppError); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// Get provides a mock function with given fields: remoteEnvironment, credentials
func (_m *Service) Get(remoteEnvironment string, credentials remoteenv.Credentials) (model.Credentials, apperrors.AppError) {
	ret := _m.Called(remoteEnvironment, credentials)

	var r0 model.Credentials
	if rf, ok := ret.Get(0).(func(string, remoteenv.Credentials) model.Credentials); ok {
		r0 = rf(remoteEnvironment, credentials)
	} else {
		r0 = ret.Get(0).(model.Credentials)
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string, remoteenv.Credentials) apperrors.AppError); ok {
		r1 = rf(remoteEnvironment, credentials)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: remoteEnvironment, serviceID, credentials
func (_m *Service) Update(remoteEnvironment string, serviceID string, credentials *model.Credentials) (remoteenv.Credentials, apperrors.AppError) {
	ret := _m.Called(remoteEnvironment, serviceID, credentials)

	var r0 remoteenv.Credentials
	if rf, ok := ret.Get(0).(func(string, string, *model.Credentials) remoteenv.Credentials); ok {
		r0 = rf(remoteEnvironment, serviceID, credentials)
	} else {
		r0 = ret.Get(0).(remoteenv.Credentials)
	}

	var r1 apperrors.AppError
	if rf, ok := ret.Get(1).(func(string, string, *model.Credentials) apperrors.AppError); ok {
		r1 = rf(remoteEnvironment, serviceID, credentials)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}
