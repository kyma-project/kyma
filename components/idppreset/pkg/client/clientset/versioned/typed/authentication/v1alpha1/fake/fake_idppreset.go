// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/kyma-project/kyma/components/idppreset/pkg/apis/authentication/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeIDPPresets implements IDPPresetInterface
type FakeIDPPresets struct {
	Fake *FakeAuthenticationV1alpha1
}

var idppresetsResource = schema.GroupVersionResource{Group: "authentication.kyma-project.io", Version: "v1alpha1", Resource: "idppresets"}

var idppresetsKind = schema.GroupVersionKind{Group: "authentication.kyma-project.io", Version: "v1alpha1", Kind: "IDPPreset"}

// Get takes name of the iDPPreset, and returns the corresponding iDPPreset object, and an error if there is any.
func (c *FakeIDPPresets) Get(name string, options v1.GetOptions) (result *v1alpha1.IDPPreset, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(idppresetsResource, name), &v1alpha1.IDPPreset{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.IDPPreset), err
}

// List takes label and field selectors, and returns the list of IDPPresets that match those selectors.
func (c *FakeIDPPresets) List(opts v1.ListOptions) (result *v1alpha1.IDPPresetList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(idppresetsResource, idppresetsKind, opts), &v1alpha1.IDPPresetList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.IDPPresetList{}
	for _, item := range obj.(*v1alpha1.IDPPresetList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested iDPPresets.
func (c *FakeIDPPresets) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(idppresetsResource, opts))
}

// Create takes the representation of a iDPPreset and creates it.  Returns the server's representation of the iDPPreset, and an error, if there is any.
func (c *FakeIDPPresets) Create(iDPPreset *v1alpha1.IDPPreset) (result *v1alpha1.IDPPreset, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(idppresetsResource, iDPPreset), &v1alpha1.IDPPreset{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.IDPPreset), err
}

// Update takes the representation of a iDPPreset and updates it. Returns the server's representation of the iDPPreset, and an error, if there is any.
func (c *FakeIDPPresets) Update(iDPPreset *v1alpha1.IDPPreset) (result *v1alpha1.IDPPreset, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(idppresetsResource, iDPPreset), &v1alpha1.IDPPreset{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.IDPPreset), err
}

// Delete takes name of the iDPPreset and deletes it. Returns an error if one occurs.
func (c *FakeIDPPresets) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(idppresetsResource, name), &v1alpha1.IDPPreset{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeIDPPresets) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(idppresetsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.IDPPresetList{})
	return err
}

// Patch applies the patch and returns the patched iDPPreset.
func (c *FakeIDPPresets) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.IDPPreset, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(idppresetsResource, name, data, subresources...), &v1alpha1.IDPPreset{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.IDPPreset), err
}
