name: 📰 Deploy VitePress site to GitHub Pages

on:
  workflow_dispatch:
    inputs:
      repository_branches:
        description: 'JSON with repository branches: {"btp-manager":"main","istio":"release-1.20"} or [{"repository":"btp-manager","branch":"main"}]'
        required: false
        default: '{}'
  schedule:
    - cron: '0 0 * * *'  # Runs at 00:00 UTC every day

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  copy-docs:
    strategy:
      fail-fast: false
      matrix:
        repository:
          - btp-manager
          - istio
          - serverless
          - telemetry-manager
          - eventing-manager
          - api-gateway
          - nats-manager
          - application-connector-manager
          - keda-manager
          - cloud-manager
          - docker-registry
          - busola
          - cli
          - registry-proxy
    runs-on: ubuntu-latest
    steps:
      - name: 🔧 Determine branch for ${{matrix.repository}}
        id: get-branch
        run: |
          REPO="${{matrix.repository}}"
          JSON_INPUT="${{ inputs.repository_branches }}"
          
          # Default branch
          BRANCH="main"
          
          # Try to parse JSON input first
          if [ -n "$JSON_INPUT" ] && [ "$JSON_INPUT" != "{}" ]; then
            echo "📄 Parsing JSON input: $JSON_INPUT"
            
            # Check if it's object format: {"repo":"branch"}
            if echo "$JSON_INPUT" | jq -e "has(\"$REPO\")" > /dev/null 2>&1; then
              BRANCH=$(echo "$JSON_INPUT" | jq -r ".[\"$REPO\"]")
              echo "✅ Found branch '$BRANCH' for $REPO in JSON (object format)"
            else
              # Check if it's array format: [{"repository":"repo","branch":"branch"}]
              BRANCH_FROM_ARRAY=$(echo "$JSON_INPUT" | jq -r ".[] | select(.repository == \"$REPO\") | .branch" 2>/dev/null || echo "")
              if [ -n "$BRANCH_FROM_ARRAY" ] && [ "$BRANCH_FROM_ARRAY" != "null" ]; then
                BRANCH="$BRANCH_FROM_ARRAY"
                echo "✅ Found branch '$BRANCH' for $REPO in JSON (array format)"
              else
                echo "ℹ️  Repository $REPO not found in JSON, checking GitHub variables..."
              fi
            fi
          else
            echo "ℹ️  No JSON input provided, checking GitHub variables..."
          fi
          
          # Fallback to GitHub Variables if not found in JSON
          if [ "$BRANCH" = "main" ]; then
            REPO_VAR=$(echo "$REPO" | tr '[:lower:]' '[:upper:]' | tr '-' '_')_BRANCH
            case "$REPO" in
              "btp-manager") VAR_BRANCH="${{ vars.BTP_MANAGER_BRANCH }}" ;;
              "istio") VAR_BRANCH="${{ vars.ISTIO_BRANCH }}" ;;
              "serverless") VAR_BRANCH="${{ vars.SERVERLESS_BRANCH }}" ;;
              "telemetry-manager") VAR_BRANCH="${{ vars.TELEMETRY_MANAGER_BRANCH }}" ;;
              "eventing-manager") VAR_BRANCH="${{ vars.EVENTING_MANAGER_BRANCH }}" ;;
              "api-gateway") VAR_BRANCH="${{ vars.API_GATEWAY_BRANCH }}" ;;
              "nats-manager") VAR_BRANCH="${{ vars.NATS_MANAGER_BRANCH }}" ;;
              "application-connector-manager") VAR_BRANCH="${{ vars.APPLICATION_CONNECTOR_MANAGER_BRANCH }}" ;;
              "keda-manager") VAR_BRANCH="${{ vars.KEDA_MANAGER_BRANCH }}" ;;
              "cloud-manager") VAR_BRANCH="${{ vars.CLOUD_MANAGER_BRANCH }}" ;;
              "docker-registry") VAR_BRANCH="${{ vars.DOCKER_REGISTRY_BRANCH }}" ;;
              "busola") VAR_BRANCH="${{ vars.BUSOLA_BRANCH }}" ;;
              "cli") VAR_BRANCH="${{ vars.CLI_BRANCH }}" ;;
              "registry-proxy") VAR_BRANCH="${{ vars.REGISTRY_PROXY_BRANCH }}" ;;
              *) VAR_BRANCH="" ;;
            esac
            
            if [ -n "$VAR_BRANCH" ]; then
              BRANCH="$VAR_BRANCH"
              echo "✅ Using branch '$BRANCH' from GitHub variable for $REPO"
            else
              echo "ℹ️  Using default branch 'main' for $REPO"
            fi
          fi
          
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "🎯 Final decision: Using branch '$BRANCH' for repository '$REPO'"

      - name: '🗂️ Checkout ${{matrix.repository}} (branch: ${{steps.get-branch.outputs.branch}})'
        uses: actions/checkout@v4
        with:
          repository: kyma-project/${{matrix.repository}}
          ref: ${{steps.get-branch.outputs.branch}}
          path: ${{matrix.repository}}

      - name: 🚢 Copy for main repo
        run: |
          SOURCE_PATH="${{matrix.repository}}/docs/user/"
          TARGET_PATH="./docs/external-content/${{matrix.repository}}/docs/"
          SOURCE_PATH_ASSETS="${{matrix.repository}}/docs/assets/"
          TARGET_PATH_ASSETS="./docs/external-content/${{matrix.repository}}/docs/"
          if [ -d "$SOURCE_PATH" ]; then
            echo "📁 found in ${{matrix.repository}}, copy to $TARGET_PATH"
            mkdir -p "$TARGET_PATH"
            cp -rf "$SOURCE_PATH/" "$TARGET_PATH/"
            if [ -d "$SOURCE_PATH_ASSETS" ]; then
              echo "↳📁 found in ${{matrix.repository}}, copy to $TARGET_PATH_ASSETS"
              mkdir -p "$TARGET_PATH_ASSETS"
              cp -rf "$SOURCE_PATH_ASSETS/" "$TARGET_PATH_ASSETS/"
            else
              echo "↳🚫 no folder  docs/assets in ${{matrix.repository}}"
            fi
          else
            echo "🚫 No folder docs/users in ${{matrix.repository}}"
          fi
      
      - name: 📦 Upload copied docs
        uses: actions/upload-artifact@v4
        with:
          name: external-docs-${{matrix.repository}}
          path: ./docs/external-content/${{matrix.repository}}

  build-and-deploy:
    name: 🛠️ Build and Deploy VitePress
    runs-on: ubuntu-latest
    needs: copy-docs
    steps:
      - name: 🗂️ Checkout repository
        uses: actions/checkout@v4
        
      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-btp-manager
          path: docs/external-content/btp-manager

      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-istio
          path: docs/external-content/istio

      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-serverless
          path: docs/external-content/serverless

      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-telemetry-manager
          path: docs/external-content/telemetry-manager

      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-eventing-manager
          path: docs/external-content/eventing-manager

      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-api-gateway
          path: docs/external-content/api-gateway

      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-nats-manager
          path: docs/external-content/nats-manager

      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-application-connector-manager
          path: docs/external-content/application-connector-manager

      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-keda-manager
          path: docs/external-content/keda-manager

      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-cloud-manager
          path: docs/external-content/cloud-manager

      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-docker-registry
          path: docs/external-content/docker-registry

      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-busola
          path: docs/external-content/busola

      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-cli
          path: docs/external-content/cli

      - name: 📥 Download copied docs
        uses: actions/download-artifact@v4
        with:
          name: external-docs-registry-proxy
          path: docs/external-content/registry-proxy

      - name: 🪢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 💾 Install dependencies
        run: npm ci

      - name: 🛠️ Build VitePress site
        run: npm run docs:build

      - name: ⚙️ Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: 🚀 Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .vitepress/dist

      - name: 🔝 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
