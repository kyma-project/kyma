name: Binding-pre-master
on: 
  pull_request:
    paths: 
      - 'components/binding/**'
      - '.github/workflows/pre-master-binding-k3s.yml' 
  repository_dispatch:
    types: [ok-to-test-command]   

defaults:
  run:
    working-directory: components/binding

jobs:
  pre-master-binding-k3s:
    env:
      PR_NUMBER: ${{ github.event.client_payload.pull_request.number }}
      PROJECT_ID: "sap-se-cx-gopher"
    runs-on: ubuntu-latest
    if: 
      github.event_name == 'repository_dispatch'
    steps:
    - name: Set up Go 1.14
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14


    # Check out merge commit
    - name: Fork based /ok-to-test checkout
      uses: actions/checkout@v2
      with:
        ref: "refs/pull/${{ env.PR_NUMBER }}/merge"

    - name: Go test, vet, fmt
      run:  |
        go test ./...
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Some files are not properly formatted"
          exit 1
        fi
        goVetResult=$(go vet ./...)
        if [ $(echo ${#goVetResult}) != 0 ]; then
            echo -e "go vet errors \n$goVetResult"
            exit 1
        fi

    - name: Setup gcloud
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GOPHER_GCR_SA }}
        project_id: sap-se-cx-gopher
        export_default_credentials: true

    - name: Build Image
      run: |
        docker build -t eu.gcr.io/$PROJECT_ID/binding:PR-$PR_NUMBER .

    - name: Push Image
      run: |
        gcloud auth configure-docker -q
        docker push eu.gcr.io/$PROJECT_ID/binding:PR-$PR_NUMBER

    - name: Prepare k3s and helm 3
      run: |
        ./scripts/create-cluster-k3s.sh
        echo "Installing helm"
        curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        while [[ $(kubectl get nodes -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "Waiting for cluster nodes to be ready"; sleep 2; done

    - name: Install Bindings component using Helm
      run: |
        helm install binding ./charts/binding --set images.bindingController.version="PR-${PR_NUMBER}" --wait

    - name: Apply test scenario and check if secrets are injected
      run: |
        ./scripts/create-scenario.sh
        while [[ $(kubectl get po -l app=sandbox -ojson | jq '.items | .[] | .spec.containers') != *"TEST_PASSWORD"* ]]; do echo "Waiting for the secrets to inject"; sleep 2; done
        kubectl get po -l app=sandbox -ojson | jq '.items | .[] | .spec.containers'


    # Update check run 
    - uses: actions/github-script@v1
      id: update-check-run
      if: ${{ always() }}
      env:
        number: ${{ github.event.client_payload.pull_request.number }}
        job: ${{ github.job }}
        # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
        conclusion: ${{ job.status }} 
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: pull } = await github.pulls.get({
            ...context.repo,
            pull_number: process.env.number
          });
          const ref = pull.head.sha;
          const { data: checks } = await github.checks.listForRef({
            ...context.repo,
            ref
          });
          const check = checks.check_runs.filter(c => c.name === process.env.job);
          const { data: result } = await github.checks.update({
            ...context.repo,
            check_run_id: check[0].id,
            status: 'completed',
            conclusion: process.env.conclusion
          });
          return result;
