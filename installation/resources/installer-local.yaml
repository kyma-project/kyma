---
apiVersion: v1
kind: Namespace
metadata:
  name: kyma-installer
  labels:
    istio-injection: disabled
    kyma-project.io/installation: ""
---
apiVersion: v1
kind: LimitRange
metadata:
  name: kyma-default
  namespace: kyma-installer
  labels:
    kyma-project.io/installation: ""
spec:
  limits:
  - max:
      memory: 1024Mi # Maximum memory that a container can request
    default:
      # If a container does not specify memory limit, this default value will be applied.
      # If a container tries to allocate more memory, container will be OOM killed.
      memory: 96Mi
    defaultRequest:
      # If a container does not specify memory request, this default value will be applied.
      # The scheduler considers this value when scheduling a container to a node.
      # If a node has not enough memory, such pod will not be created.
      memory: 32Mi
    type: Container
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
    name: installations.installer.kyma-project.io
    labels:
      kyma-project.io/installation: ""
spec:
  group: installer.kyma-project.io
  version: v1alpha1
  scope: Namespaced
  names:
    kind: Installation
    singular: installation
    plural: installations
    shortNames: ['installation']
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
    name: releases.release.kyma-project.io
    labels:
      kyma-project.io/installation: ""
spec:
  group: release.kyma-project.io
  version: v1alpha1
  scope: Namespaced
  names:
    kind: Release
    singular: release
    plural: releases
    shortNames: ['release']
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: helm-certs-job-sa
  namespace: kyma-installer
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: helm-certs-rolebinding
  namespace: kube-system
subjects:
- kind: ServiceAccount
  name: helm-certs-job-sa
  namespace: kyma-installer
roleRef:
  kind: Role
  name: helm-certs-getter
  apiGroup: rbac.authorization.k8s.io
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: helm-certs-rolebinding
  namespace: kyma-installer
subjects:
- kind: ServiceAccount
  name: helm-certs-job-sa
  namespace: kyma-installer
roleRef:
  kind: Role
  name: helm-certs-setter
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: helm-certs-getter
  namespace: kube-system
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: helm-certs-setter
  namespace: kyma-installer
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "patch"]
---
apiVersion: batch/v1
kind: Job
metadata:
  name: helm-certs-job
  namespace: kyma-installer
  labels:
    kyma-project.io/installation: ""
spec:
  template:
    metadata:
      name: helm-certs-job
      namespace: kyma-installer
      annotations:
        sidecar.istio.io/inject: “false”
    spec:
      serviceAccountName: helm-certs-job-sa
      restartPolicy: OnFailure
      containers:
      - name: certhelper
        image: eu.gcr.io/kyma-project/test-infra/alpine-kubectl:v20190325-ff66a3a
        command:
          - bash
          - -c
          - |
            WORKING_DIR="/tmp/certs"
            mkdir -p "${WORKING_DIR}"

            cat <<EOF > "${WORKING_DIR}/openssl.cnf"
            [ req ]
            #default_bits   = 2048
            #default_md   = sha256
            #default_keyfile  = privkey.pem
            distinguished_name  = req_distinguished_name
            attributes    = req_attributes

            [ req_distinguished_name ]
            countryName     = Country Name (2 letter code)
            countryName_min     = 2
            countryName_max     = 2
            stateOrProvinceName   = State or Province Name (full name)
            localityName      = Locality Name (eg, city)
            0.organizationName    = Organization Name (eg, company)
            organizationalUnitName    = Organizational Unit Name (eg, section)
            commonName      = Common Name (eg, fully qualified host name)
            commonName_max      = 64
            emailAddress      = Email Address
            emailAddress_max    = 64

            [ req_attributes ]
            challengePassword   = A challenge password
            challengePassword_min   = 4
            challengePassword_max   = 20
            [ v3_ca ]
            basicConstraints = critical,CA:TRUE
            subjectKeyIdentifier = hash
            authorityKeyIdentifier = keyid:always,issuer:always
            EOF

            echo "---> Get Tiller CA"
            if [[ $(kubectl get -n kube-system secret tiller-secret) ]] ; then
              kubectl get -n kube-system secret tiller-secret -o jsonpath="{.data['ca\.crt']}" | base64 --decode > "${WORKING_DIR}/ca.crt"
              kubectl get -n kube-system secret tiller-secret -o jsonpath="{.data['ca\.key']}" | base64 --decode > "${WORKING_DIR}/ca.key"
            else
              echo "Secret: tiller-secret does not exists!"
              exit 1
            fi

            echo "---> Generate Helm key"
            openssl genrsa -out "${WORKING_DIR}/helm.key.pem" 4096
            openssl req -key "${WORKING_DIR}/helm.key.pem" -new -sha256 -out "${WORKING_DIR}/helm.csr.pem" -subj "/C=PL/ST=Gliwice/L=Gliwice/O=Helm Client/CN=helm-client"
            openssl x509 -req -CA "${WORKING_DIR}/ca.crt" -CAkey "${WORKING_DIR}/ca.key" -CAcreateserial -in "${WORKING_DIR}/helm.csr.pem" -out "${WORKING_DIR}/helm.cert.pem" -days 365

            echo "---> Create secrets in k8s"
            COMBO_YAML=$(cat << EOF
            ---
            apiVersion: v1
            data:
              global.helm.ca.crt: "$(base64 "${WORKING_DIR}/ca.crt" | tr -d '\n')"
              global.helm.tls.crt: "$(base64 ${WORKING_DIR}/helm.cert.pem | tr -d '\n')"
              global.helm.tls.key: "$(base64 ${WORKING_DIR}/helm.key.pem | tr -d '\n')"
            kind: Secret
            metadata:
              creationTimestamp: null
              labels:
                installer: overrides
                kyma-project.io/installation: ""
              name: helm-secret
              namespace: kyma-installer
            type: Opaque
            EOF
            )

            echo "${COMBO_YAML}" | kubectl create -f -
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kyma-installer
  namespace: kyma-installer
  labels:
    kyma-project.io/installation: ""
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kyma-installer
  namespace: kyma-installer
  labels:
    kyma-project.io/installation: ""
spec:
  template:
    metadata:
      labels:
        name: kyma-installer
    spec:
      serviceAccountName: kyma-installer
      containers:
      - name: kyma-installer-container
        image: eu.gcr.io/kyma-project/kyma-installer:1.1.0-rc2
        args:
          - -tillerTLSInsecureSkipVerify=true
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - mountPath: /etc/certs
            name: helm-certs
            readOnly: true
      volumes:
      - name: helm-certs
        secret:
          secretName: helm-secret
          items:
            - key: global.helm.tls.crt
              path: tls.crt
            - key: global.helm.tls.key
              path: tls.key
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kyma-installer-reader
  labels:
    kyma-project.io/installation: ""
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kyma-installer
  labels:
    kyma-project.io/installation: ""
subjects:
- kind: ServiceAccount
  name: kyma-installer
  namespace: kyma-installer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kyma-installer-reader
