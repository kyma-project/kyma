apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
  labels:
    kyma-project.io/installation: ""
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: tiller-cluster-admin
  labels:
    kyma-project.io/installation: ""
subjects:
- kind: ServiceAccount
  name: tiller
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: helm
    name: tiller
    kyma-project.io/installation: ""
  name: tiller-deploy
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: helm
      name: tiller
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: helm
        name: tiller
    spec:
      serviceAccountName: tiller

      initContainers:
      - name: init-tiller
        image: eu.gcr.io/kyma-project/alpine-net:2fbe4fd3
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'until nc -zv kube-dns.kube-system.svc.cluster.local 53; do echo waiting for k8s readiness; sleep 2; done;']

      containers:
      - name: tiller
        image: gcr.io/kubernetes-helm/tiller:v2.16.1
        imagePullPolicy: IfNotPresent
        env:
        - name: TILLER_NAMESPACE
          value: kube-system
        - name: TILLER_TLS_VERIFY
          value: "1"
        - name: TILLER_TLS_ENABLE
          value: "1"
        - name: TILLER_TLS_CERTS
          value: /etc/certs
        - name: TILLER_HISTORY_MAX
          value: "10"
        ports:
        - containerPort: 44134
          name: tiller
        livenessProbe:
          httpGet:
            path: /liveness
            port: 44135
          initialDelaySeconds: 1
          timeoutSeconds: 1

        readinessProbe:
          httpGet:
            path: /readiness
            port: 44135
          initialDelaySeconds: 1
          timeoutSeconds: 1

        volumeMounts:
        - mountPath: /etc/certs
          name: tiller-certs
          readOnly: true
      volumes:
      - name: tiller-certs
        secret:
          secretName: tiller-secret
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: helm
    name: tiller
    kyma-project.io/installation: ""
  name: tiller-deploy
  namespace: kube-system
  annotations:
    auth.istio.io/44134: NONE
spec:
  selector:
    app: helm
    name: tiller
  ports:
  - name: tcp-tiller
    port: 44134
    targetPort: tiller
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller-certs-sa
  namespace: kube-system
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tiller-certs
  namespace: kube-system
subjects:
- kind: ServiceAccount
  name: tiller-certs-sa
  namespace: kube-system
roleRef:
  kind: Role
  name: tiller-certs-installer
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tiller-certs-installer
  namespace: kube-system
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "patch"]
---
apiVersion: batch/v1
kind: Job
metadata:
  name: tiller-certs-job
  namespace: kube-system
  labels:
    kyma-project.io/installation: ""
spec:
  template:
    metadata:
      name: tiller-certs-job
      namespace: kube-system
      annotations:
        sidecar.istio.io/inject: “false”
    spec:
      serviceAccountName: tiller-certs-sa
      restartPolicy: OnFailure
      containers:
      - name: certhelper
        image: eu.gcr.io/kyma-project/test-infra/alpine-kubectl:v20190325-ff66a3a
        command:
          - bash
          - -c
          - |
            WORKING_DIR="/tmp/certs"
            mkdir -p "${WORKING_DIR}"

            cat <<EOF > "${WORKING_DIR}/openssl.cnf"
            [ req ]
            #default_bits   = 2048
            #default_md   = sha256
            #default_keyfile  = privkey.pem
            distinguished_name  = req_distinguished_name
            attributes    = req_attributes

            [ req_distinguished_name ]
            countryName     = Country Name (2 letter code)
            countryName_min     = 2
            countryName_max     = 2
            stateOrProvinceName   = State or Province Name (full name)
            localityName      = Locality Name (eg, city)
            0.organizationName    = Organization Name (eg, company)
            organizationalUnitName    = Organizational Unit Name (eg, section)
            commonName      = Common Name (eg, fully qualified host name)
            commonName_max      = 64
            emailAddress      = Email Address
            emailAddress_max    = 64

            [ req_attributes ]
            challengePassword   = A challenge password
            challengePassword_min   = 4
            challengePassword_max   = 20
            [ v3_ca ]
            basicConstraints = critical,CA:TRUE
            subjectKeyIdentifier = hash
            authorityKeyIdentifier = keyid:always,issuer:always
            EOF

            echo "---> Generate CA"
            openssl genrsa -out "${WORKING_DIR}/ca.key.pem" 4096
            openssl req -key "${WORKING_DIR}/ca.key.pem" -new -x509 -days 365 -sha256 -out "${WORKING_DIR}/ca.cert.pem" -extensions v3_ca -config "${WORKING_DIR}/openssl.cnf" -subj "/C=PL/ST=Gliwice/L=Gliwice/O=tiller/CN=tiller"

            echo "---> Generate Tiller key"
            openssl genrsa -out "${WORKING_DIR}/tiller.key.pem" 4096
            openssl req -key "${WORKING_DIR}/tiller.key.pem" -new -sha256 -out "${WORKING_DIR}/tiller.csr.pem" -subj "/C=PL/ST=Gliwice/L=Gliwice/O=Tiller Server/CN=tiller-server"
            openssl x509 -req -CA "${WORKING_DIR}/ca.cert.pem" -CAkey "${WORKING_DIR}/ca.key.pem" -CAcreateserial -in "${WORKING_DIR}/tiller.csr.pem" -out "${WORKING_DIR}/tiller.cert.pem" -days 365

            echo "---> Create secrets in k8s"
            COMBO_YAML=$(cat << EOF
            ---
            apiVersion: v1
            data:
              ca.crt: "$(base64 ${WORKING_DIR}/ca.cert.pem | tr -d '\n')"
              ca.key: "$(base64 ${WORKING_DIR}/ca.key.pem | tr -d '\n')"
              tls.crt: "$(base64 ${WORKING_DIR}/tiller.cert.pem | tr -d '\n')"
              tls.key: "$(base64 ${WORKING_DIR}/tiller.key.pem | tr -d '\n')"
            kind: Secret
            metadata:
              creationTimestamp: null
              labels:
                app: helm
                name: tiller
              name: tiller-secret
              namespace: kube-system
            type: Opaque
            EOF
            )

            echo "${COMBO_YAML}" | kubectl create -f -
