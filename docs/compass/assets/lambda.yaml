apiVersion: kubeless.io/v1beta1
kind: Function
metadata:
  labels:
    app: call-order-service
  name: call-order-service
spec:
  deployment:
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            orderservice: "true"
        spec:
          containers:
          - name: call-order-service
  deps: |
          {
            "name": "test",
            "version": "0.1.0",
            "dependencies": {
                "axios":  "*"
            }
          }
  function: |
            const axios = require("axios");
            module.exports = {
              main: async (event, context) => {
              let gatewayUrl = ""
              try {
                  const gatewayUrlEnvKey =  Object.keys(process.env).find(val => val.endsWith('_GATEWAY_URL'))
                	if (gatewayUrlEnvKey === undefined) {
                		throw new Error("Environment variable with '_GATEWAY_URL' suffix is undefined")
                	}
                	console.log("Gateway URL Env Key:", gatewayUrlEnvKey);

                	gatewayUrl = process.env[gatewayUrlEnvKey]
                	console.log("Gateway URL:", gatewayUrl);
                    if (gatewayUrl === undefined) {
                		throw new Error("Environment variable with Gateway URL is empty");
                	}
                } catch (error) {
                    console.log(error)
                }
                const actions = {
                  add: async () => {
                    try {
                      console.log('Adding new order')
                      const response = await axios.post(gatewayUrl + '/orders', {
                        "orderId": `order-${Math.random()}`,
                        "namespace": "kyma-components",
                        "total": 1234.56
                      });
                      return {
                        status: response.status,
                        data: response.data
                      };
                    } catch (error) {
                      console.log(error);
                    }
                  },
                  list: async () => {
                    try {
                      console.log('Listing orders')
                      const response = await axios.get(gatewayUrl + '/orders');
                      return {
                        status: response.status,
                        data: response.data
                      };
                    } catch (error) {
                      console.log(error);
                    }
                  },
                  delete: async () => {
                    try {
                      console.log('Deleting all orders')
                      const response = await axios.delete(gatewayUrl + '/orders');
                      return {
                        status: response.status,
                        data: response.data
                      };
                    } catch (error) {
                      console.log(error);
                    }
                  }
                }
                let action = actions['list'];
                if (event.data.action && actions[event.data.action]) action = actions[event.data.action];

                return await action();
              }
            }

  function-content-type: text
  handler: handler.main
  runtime: nodejs8
  topic: http
