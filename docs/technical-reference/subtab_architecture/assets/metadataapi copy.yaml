openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Kyma Application Registry API'
  description: 'API for registering services in Kyma'
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
tags:
- name: 'Application Registry'
  description: 'API for registering services in Kyma.'
paths:
  /v1/health:
    get:
      deprecated: true
      summary: 'Returns health of a service'
      operationId: 'getHealth'
      tags:
      - 'health'
      responses:
        '200':
          description: 'The service is in a good health'
  /v1/metadata/services:
    post:
      deprecated: true
      tags:
      - 'services'
      summary: 'Registers a new service'
      operationId: 'registerService'
      requestBody:
        description: 'Service object to be registered'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceDetails'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceId'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
    get:
      deprecated: true
      tags:
      - 'services'
      summary: 'Gets all registered services'
      operationId: 'getServices'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Service'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
  /v1/metadata/services/{serviceId}:
    get:
      deprecated: true
      tags:
      - 'services'
      summary: 'Gets a service by service ID'
      operationId: 'getServiceByServiceId'
      parameters:
      - in: 'path'
        name: 'serviceId'
        description: 'ID of a service'
        required: true
        schema:
          type: 'string'
          format: 'uuid'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDetails'
        '404':
          description: 'Service not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
    put:
      deprecated: true
      tags:
      - 'services'
      summary: 'Updates a service by service ID'
      operationId: 'updateService'
      requestBody:
        description: 'Service object to be stored'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceUpdate'
      parameters:
      - in: 'path'
        name: 'serviceId'
        description: 'ID of a service'
        required: true
        schema:
          type: 'string'
          format: 'uuid'
      responses:
        '200':
          description: 'Successful operation'
        '404':
          description: 'Service not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
    delete:
      deprecated: true
      tags:
      - 'services'
      summary: 'Deletes a service by service ID'
      operationId: 'deleteServiceByServiceId'
      parameters:
      - in: 'path'
        name: 'serviceId'
        description: 'ID of a service'
        required: true
        schema:
          type: 'string'
          format: 'uuid'
      responses:
        '204':
          description: 'Successful operation'
        '404':
          description: 'Service not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataErrorResponse'
components:
  schemas:
    ServiceId:
      type: 'object'
      properties:
        id:
          type: 'string'
          format: 'uuid'
    ServiceDetails:
      type: 'object'
      properties:
        provider:
          type: 'string'
          description: 'API provider'
        name:
          type: 'string'
        description:
          type: 'string'
        shortDescription:
          type: 'string'
        identifier:
          type: 'string'
          description: 'Additional identifier unique in the Application scope'
        labels:
          type: 'object'
          additionalProperties:
            type: 'string'
        api:
          $ref: '#/components/schemas/Api'
        events:
          $ref: '#/components/schemas/Events'
        documentation:
          $ref: '#/components/schemas/Documentation'
      required:
      - provider
      - name
      - description
    ServiceUpdate:
      type: 'object'
      properties:
        provider:
          type: 'string'
          description: 'API provider'
        name:
          type: 'string'
        description:
          type: 'string'
        shortDescription:
          type: 'string'
        identifier:
          type: 'string'
          description: 'Additional identifier unique in the Application scope'
        labels:
          type: 'object'
          additionalProperties:
            type: 'string'
        api:
          $ref: '#/components/schemas/Api'
        events:
          $ref: '#/components/schemas/Events'
        documentation:
          $ref: '#/components/schemas/Documentation'
      required:
      - provider
      - name
      - description
    Service:
      type: 'object'
      properties:
        id:
          type: 'string'
          format: 'uuid'
        provider:
          type: 'string'
          description: 'API provider'
        name:
          type: 'string'
        description:
          type: 'string'
        identifier:
          type: 'string'
          description: 'Additional identifier unique in the Application scope'
        labels:
          type: 'object'
          additionalProperties:
            type: 'string'
    Api:
      type: 'object'
      properties:
        targetUrl:
          type: 'string'
          format: 'uri'
          description: 'URL that the API exposes and that the proxy calls'
        credentials:
          $ref: '#/components/schemas/ApiCredentials'
        spec:
          type: 'object'
          description: 'OData or OpenAPI'
        specificationUrl:
          type: 'string'
          format: 'uri'
          description: 'URL to fetch specification if not passed as a file in spec'
        apiType:
          type: 'string'
          description: 'API type, for example OData'
        requestParameters:
          $ref: '#/components/schemas/RequestParameters'
        specificationCredentials:
          $ref: '#/components/schemas/SpecificationCredentials'
        specificationRequestParameters:
          $ref: '#/components/schemas/RequestParameters'
      required:
      - targetUrl
    ApiUpdate:
      type: 'object'
      properties:
        targetUrl:
          type: 'string'
          format: 'uri'
          description: 'URL that the API exposes and that the proxy calls'
        credentials:
          $ref: '#/components/schemas/ApiCredentialsUpdate'
        spec:
          type: 'object'
          description: 'OData or OpenAPI'
        specificationUrl:
          type: 'string'
          format: 'uri'
          description: 'URL to fetch specification if not passed as a file in spec'
        ApiType:
          type: 'string'
          description: 'API type, for example OData'
      required:
      - targetUrl
    Events:
      type: 'object'
      properties:
        spec:
          description: 'AsyncApi'
          type: 'object'
    Documentation:
      type: 'object'
      properties:
        displayName:
          type: 'string'
        description:
          type: 'string'
        type:
          type: 'string'
          description: 'Document type, e.g. .md'
        tags:
          type: 'array'
          items:
            type: 'string'
        docs:
          type: 'array'
          items:
            $ref: '#/components/schemas/Document'
      required:
      - displayName
      - description
      - type
    Document:
      type: 'object'
      properties:
        title:
          type: 'string'
        type:
          type: 'string'
          description: 'Document type, e.g. .md'
        source:
          type: 'string'
      required:
      - title
      - type
      - source
    ApiCredentials:
      type: 'object'
      properties:
        oauth:
          $ref: '#/components/schemas/OAuth'
        basic:
          $ref: '#/components/schemas/Basic'
        certificateGen:
          $ref: '#/components/schemas/CertificateGen'
    SpecificationCredentials:
      type: 'object'
      properties:
        oauth:
          $ref: '#/components/schemas/OAuth'
        basic:
          $ref: '#/components/schemas/Basic'
    ApiCredentialsUpdate:
      type: 'object'
      properties:
        oauth:
          $ref: '#/components/schemas/OAuth'
        basic:
          $ref: '#/components/schemas/Basic'
        certificateGen:
          $ref: '#/components/schemas/CertificateGenUpdate'
    RequestParameters:
      type: 'object'
      properties:
        headers:
          type: 'object'
          description: 'Additional headers to be injected during requests'
          additionalProperties:
            type: 'array'
            items:
              type: 'string'
        queryParameters:
          type: 'object'
          description: 'Additional query parameters to be injected during requests'
          additionalProperties:
            type: 'array'
            items:
              type: 'string'
    OAuth:
      type: 'object'
      properties:
        url:
          type: 'string'
          format: 'uri'
          description: 'URL to fetch OAuth access token'
        clientId:
          type: 'string'
        clientSecret:
          type: 'string'
        requestParameters:
          $ref: '#/components/schemas/RequestParameters'
      required:
      - url
      - clientId
      - clientSecret
    Basic:
      type: 'object'
      properties:
        username:
          type: 'string'
        password:
          type: 'string'
    CertificateGen:
      type: 'object'
      properties:
        commonName:
          type: 'string'
          description: 'Common name from the certificate subject'
        certificate:
          type: 'string'
          description: 'Base64-encoded certificate'
    CertificateGenUpdate:
      type: 'object'
      properties:
        commonName:
          type: 'string'
          description: 'Common name from the certificate subject'
    MetadataErrorResponse:
      type: 'object'
      properties:
        code:
          type: 'integer'
        error:
          type: 'string'
