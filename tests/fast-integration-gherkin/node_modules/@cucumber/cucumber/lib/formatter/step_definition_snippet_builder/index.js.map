{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/formatter/step_definition_snippet_builder/index.ts"],"names":[],"mappings":";;AAAA,wCAAwC;AACxC,yDAAwD;AAExD,yEAGuC;AAEvC,uDAAmD;AAYnD,MAAqB,4BAA4B;IAI/C,YAAY,EACV,aAAa,EACb,qBAAqB,GACmB;QACxC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAA;QAClC,IAAI,CAAC,2BAA2B,GAAG,IAAI,kDAA2B,CAChE,GAAG,EAAE,CAAC,qBAAqB,CAAC,cAAc,CAC3C,CAAA;IACH,CAAC;IAED,KAAK,CAAC,EAAE,WAAW,EAAE,UAAU,EAAiB;QAC9C,MAAM,OAAO,GACX,mEAAmE,CAAA;QACrE,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAA;QACtD,MAAM,oBAAoB,GACxB,IAAI,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;QACvE,MAAM,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAA;QACjE,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC;YAC9B,OAAO;YACP,YAAY;YACZ,oBAAoB;YACpB,kBAAkB;SACnB,CAAC,CAAA;IACJ,CAAC;IAED,eAAe,CAAC,WAAwB;QACtC,QAAQ,WAAW,EAAE;YACnB,KAAK,qBAAW,CAAC,KAAK;gBACpB,OAAO,MAAM,CAAA;YACf,KAAK,qBAAW,CAAC,OAAO;gBACtB,OAAO,MAAM,CAAA;YACf,KAAK,qBAAW,CAAC,YAAY;gBAC3B,OAAO,OAAO,CAAA;SACjB;IACH,CAAC;IAED,qBAAqB,CAAC,IAAyB;QAC7C,IAAI,6BAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAChC,MAAM,YAAY,GAAG,kCAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACpD,SAAS,EAAE,GAAG,EAAE,CAAC,WAAW;gBAC5B,SAAS,EAAE,GAAG,EAAE,CAAC,WAAW;aAC7B,CAAC,CAAA;YACF,OAAO,CAAC,YAAY,CAAC,CAAA;SACtB;QACD,OAAO,EAAE,CAAA;IACX,CAAC;CACF;AAlDD,+CAkDC","sourcesContent":["import { KeywordType } from '../helpers'\nimport { parseStepArgument } from '../../step_arguments'\nimport { ISnippetSnytax } from './snippet_syntax'\nimport {\n  CucumberExpressionGenerator,\n  ParameterTypeRegistry,\n} from '@cucumber/cucumber-expressions'\nimport * as messages from '@cucumber/messages'\nimport { doesHaveValue } from '../../value_checker'\n\nexport interface INewStepDefinitionSnippetBuilderOptions {\n  snippetSyntax: ISnippetSnytax\n  parameterTypeRegistry: ParameterTypeRegistry\n}\n\nexport interface IBuildRequest {\n  keywordType: KeywordType\n  pickleStep: messages.PickleStep\n}\n\nexport default class StepDefinitionSnippetBuilder {\n  private readonly snippetSyntax: ISnippetSnytax\n  private readonly cucumberExpressionGenerator: CucumberExpressionGenerator\n\n  constructor({\n    snippetSyntax,\n    parameterTypeRegistry,\n  }: INewStepDefinitionSnippetBuilderOptions) {\n    this.snippetSyntax = snippetSyntax\n    this.cucumberExpressionGenerator = new CucumberExpressionGenerator(\n      () => parameterTypeRegistry.parameterTypes\n    )\n  }\n\n  build({ keywordType, pickleStep }: IBuildRequest): string {\n    const comment =\n      'Write code here that turns the phrase above into concrete actions'\n    const functionName = this.getFunctionName(keywordType)\n    const generatedExpressions =\n      this.cucumberExpressionGenerator.generateExpressions(pickleStep.text)\n    const stepParameterNames = this.getStepParameterNames(pickleStep)\n    return this.snippetSyntax.build({\n      comment,\n      functionName,\n      generatedExpressions,\n      stepParameterNames,\n    })\n  }\n\n  getFunctionName(keywordType: KeywordType): string {\n    switch (keywordType) {\n      case KeywordType.Event:\n        return 'When'\n      case KeywordType.Outcome:\n        return 'Then'\n      case KeywordType.Precondition:\n        return 'Given'\n    }\n  }\n\n  getStepParameterNames(step: messages.PickleStep): string[] {\n    if (doesHaveValue(step.argument)) {\n      const argumentName = parseStepArgument(step.argument, {\n        dataTable: () => 'dataTable',\n        docString: () => 'docString',\n      })\n      return [argumentName]\n    }\n    return []\n  }\n}\n"]}