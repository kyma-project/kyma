{"version":3,"file":"rerun_formatter.js","sourceRoot":"","sources":["../../src/formatter/rerun_formatter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,oDAAsB;AACtB,0CAAiD;AACjD,+EAAiF;AACjF,oDAIyB;AACzB,6DAA8C;AAE9C,MAAM,iBAAiB,GAAG,IAAI,CAAA;AAM9B,MAAqB,cAAe,SAAQ,UAAS;IAGnD,YAAY,OAA0B;QACpC,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,OAAO,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,QAA2B,EAAE,EAAE;YACtE,IAAI,6BAAa,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE;gBAC3C,IAAI,CAAC,kBAAkB,EAAE,CAAA;aAC1B;QACH,CAAC,CAAC,CAAA;QACF,MAAM,YAAY,GAAG,8BAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;QACxE,IAAI,CAAC,SAAS,GAAG,8BAAc,CAAC,YAAY,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAA;IAC5E,CAAC;IAED,kBAAkB;QAChB,MAAM,OAAO,GAAkB,EAAE,CAAA;QACjC,gBAAC,CAAC,IAAI,CACJ,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,EAAE,EAC7C,CAAC,EAAE,eAAe,EAAE,MAAM,EAAE,mBAAmB,EAAE,EAAE,EAAE;YACnD,IACE,mBAAmB,CAAC,MAAM,KAAK,QAAQ,CAAC,oBAAoB,CAAC,MAAM,EACnE;gBACA,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAA;gBAC9B,MAAM,IAAI,GACR,uDAA6B,CAAC,eAAe,CAAC,CAC5C,gBAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAC1B,CAAC,IAAI,CAAA;gBACR,IAAI,gCAAgB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE;oBAC1C,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAA;iBAC1B;gBACD,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;aAChC;QACH,CAAC,CACF,CAAA;QACD,MAAM,IAAI,GAAG,gBAAC,CAAC,KAAK,CAAC,OAAO,CAAC;aAC1B,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;aAChD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;aACpB,KAAK,EAAE,CAAA;QACV,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IAChB,CAAC;CACF;AAxCD,iCAwCC","sourcesContent":["import _ from 'lodash'\nimport Formatter, { IFormatterOptions } from './'\nimport { getGherkinScenarioLocationMap } from './helpers/gherkin_document_parser'\nimport {\n  doesHaveValue,\n  doesNotHaveValue,\n  valueOrDefault,\n} from '../value_checker'\nimport * as messages from '@cucumber/messages'\n\nconst DEFAULT_SEPARATOR = '\\n'\n\ninterface UriToLinesMap {\n  [uri: string]: number[]\n}\n\nexport default class RerunFormatter extends Formatter {\n  private readonly separator: string\n\n  constructor(options: IFormatterOptions) {\n    super(options)\n    options.eventBroadcaster.on('envelope', (envelope: messages.Envelope) => {\n      if (doesHaveValue(envelope.testRunFinished)) {\n        this.logFailedTestCases()\n      }\n    })\n    const rerunOptions = valueOrDefault(options.parsedArgvOptions.rerun, {})\n    this.separator = valueOrDefault(rerunOptions.separator, DEFAULT_SEPARATOR)\n  }\n\n  logFailedTestCases(): void {\n    const mapping: UriToLinesMap = {}\n    _.each(\n      this.eventDataCollector.getTestCaseAttempts(),\n      ({ gherkinDocument, pickle, worstTestStepResult }) => {\n        if (\n          worstTestStepResult.status !== messages.TestStepResultStatus.PASSED\n        ) {\n          const relativeUri = pickle.uri\n          const line =\n            getGherkinScenarioLocationMap(gherkinDocument)[\n              _.last(pickle.astNodeIds)\n            ].line\n          if (doesNotHaveValue(mapping[relativeUri])) {\n            mapping[relativeUri] = []\n          }\n          mapping[relativeUri].push(line)\n        }\n      }\n    )\n    const text = _.chain(mapping)\n      .map((lines, uri) => `${uri}:${lines.join(':')}`)\n      .join(this.separator)\n      .value()\n    this.log(text)\n  }\n}\n"]}