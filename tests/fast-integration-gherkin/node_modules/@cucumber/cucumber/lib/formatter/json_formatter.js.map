{"version":3,"file":"json_formatter.js","sourceRoot":"","sources":["../../src/formatter/json_formatter.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport Formatter, { IFormatterOptions } from './'\nimport { formatLocation, GherkinDocumentParser, PickleParser } from './helpers'\nimport * as messages from '@cucumber/messages'\nimport {\n  getGherkinExampleRuleMap,\n  getGherkinScenarioLocationMap,\n} from './helpers/gherkin_document_parser'\nimport { ITestCaseAttempt } from './helpers/event_data_collector'\nimport { doesHaveValue, doesNotHaveValue } from '../value_checker'\nimport { parseStepArgument } from '../step_arguments'\n\nconst { getGherkinStepMap, getGherkinScenarioMap } = GherkinDocumentParser\n\nconst { getScenarioDescription, getPickleStepMap, getStepKeyword } =\n  PickleParser\n\nexport interface IJsonFeature {\n  description: string\n  elements: IJsonScenario[]\n  id: string\n  keyword: string\n  line: number\n  name: string\n  tags: IJsonTag[]\n  uri: string\n}\n\nexport interface IJsonScenario {\n  description: string\n  id: string\n  keyword: string\n  line: number\n  name: string\n  steps: IJsonStep[]\n  tags: IJsonTag[]\n  type: string\n}\n\nexport interface IJsonStep {\n  arguments?: any // TODO\n  embeddings?: any // TODO\n  hidden?: boolean\n  keyword?: string // TODO, not optional\n  line?: number\n  match?: any // TODO\n  name?: string\n  result?: any // TODO\n}\n\nexport interface IJsonTag {\n  name: string\n  line: number\n}\n\ninterface IBuildJsonFeatureOptions {\n  feature: messages.Feature\n  elements: IJsonScenario[]\n  uri: string\n}\n\ninterface IBuildJsonScenarioOptions {\n  feature: messages.Feature\n  gherkinScenarioMap: Record<string, messages.Scenario>\n  gherkinExampleRuleMap: Record<string, messages.Rule>\n  gherkinScenarioLocationMap: Record<string, messages.Location>\n  pickle: messages.Pickle\n  steps: IJsonStep[]\n}\n\ninterface IBuildJsonStepOptions {\n  isBeforeHook: boolean\n  gherkinStepMap: Record<string, messages.Step>\n  pickleStepMap: Record<string, messages.PickleStep>\n  testStep: messages.TestStep\n  testStepAttachments: messages.Attachment[]\n  testStepResult: messages.TestStepResult\n}\n\ninterface UriToTestCaseAttemptsMap {\n  [uri: string]: ITestCaseAttempt[]\n}\n\nexport default class JsonFormatter extends Formatter {\n  constructor(options: IFormatterOptions) {\n    super(options)\n    options.eventBroadcaster.on('envelope', (envelope: messages.Envelope) => {\n      if (doesHaveValue(envelope.testRunFinished)) {\n        this.onTestRunFinished()\n      }\n    })\n  }\n\n  convertNameToId(obj: messages.Feature | messages.Pickle): string {\n    return obj.name.replace(/ /g, '-').toLowerCase()\n  }\n\n  formatDataTable(dataTable: messages.PickleTable): any {\n    return {\n      rows: dataTable.rows.map((row) => ({ cells: _.map(row.cells, 'value') })),\n    }\n  }\n\n  formatDocString(\n    docString: messages.PickleDocString,\n    gherkinStep: messages.Step\n  ): any {\n    return {\n      content: docString.content,\n      line: gherkinStep.docString.location.line,\n    }\n  }\n\n  formatStepArgument(\n    stepArgument: messages.PickleStepArgument,\n    gherkinStep: messages.Step\n  ): any {\n    if (doesNotHaveValue(stepArgument)) {\n      return []\n    }\n    return [\n      parseStepArgument<any>(stepArgument, {\n        dataTable: (dataTable) => this.formatDataTable(dataTable),\n        docString: (docString) => this.formatDocString(docString, gherkinStep),\n      }),\n    ]\n  }\n\n  onTestRunFinished(): void {\n    const groupedTestCaseAttempts: UriToTestCaseAttemptsMap = {}\n    _.each(\n      this.eventDataCollector.getTestCaseAttempts(),\n      (testCaseAttempt: ITestCaseAttempt) => {\n        if (!testCaseAttempt.worstTestStepResult.willBeRetried) {\n          const uri = testCaseAttempt.pickle.uri\n          if (doesNotHaveValue(groupedTestCaseAttempts[uri])) {\n            groupedTestCaseAttempts[uri] = []\n          }\n          groupedTestCaseAttempts[uri].push(testCaseAttempt)\n        }\n      }\n    )\n    const features = _.map(groupedTestCaseAttempts, (group, uri) => {\n      const { gherkinDocument } = group[0]\n      const gherkinStepMap = getGherkinStepMap(gherkinDocument)\n      const gherkinScenarioMap = getGherkinScenarioMap(gherkinDocument)\n      const gherkinExampleRuleMap = getGherkinExampleRuleMap(gherkinDocument)\n      const gherkinScenarioLocationMap =\n        getGherkinScenarioLocationMap(gherkinDocument)\n      const elements = group.map((testCaseAttempt: ITestCaseAttempt) => {\n        const { pickle } = testCaseAttempt\n        const pickleStepMap = getPickleStepMap(pickle)\n        let isBeforeHook = true\n        const steps = testCaseAttempt.testCase.testSteps.map((testStep) => {\n          isBeforeHook = isBeforeHook && !doesHaveValue(testStep.pickleStepId)\n          return this.getStepData({\n            isBeforeHook,\n            gherkinStepMap,\n            pickleStepMap,\n            testStep,\n            testStepAttachments: testCaseAttempt.stepAttachments[testStep.id],\n            testStepResult: testCaseAttempt.stepResults[testStep.id],\n          })\n        })\n        return this.getScenarioData({\n          feature: gherkinDocument.feature,\n          gherkinScenarioLocationMap,\n          gherkinExampleRuleMap,\n          gherkinScenarioMap,\n          pickle,\n          steps,\n        })\n      })\n      return this.getFeatureData({\n        feature: gherkinDocument.feature,\n        elements,\n        uri,\n      })\n    })\n    this.log(JSON.stringify(features, null, 2))\n  }\n\n  getFeatureData({\n    feature,\n    elements,\n    uri,\n  }: IBuildJsonFeatureOptions): IJsonFeature {\n    return {\n      description: feature.description,\n      elements,\n      id: this.convertNameToId(feature),\n      line: feature.location.line,\n      keyword: feature.keyword,\n      name: feature.name,\n      tags: this.getFeatureTags(feature),\n      uri,\n    }\n  }\n\n  getScenarioData({\n    feature,\n    gherkinScenarioLocationMap,\n    gherkinExampleRuleMap,\n    gherkinScenarioMap,\n    pickle,\n    steps,\n  }: IBuildJsonScenarioOptions): IJsonScenario {\n    const description = getScenarioDescription({\n      pickle,\n      gherkinScenarioMap,\n    })\n    return {\n      description,\n      id: this.formatScenarioId({ feature, pickle, gherkinExampleRuleMap }),\n      keyword: gherkinScenarioMap[pickle.astNodeIds[0]].keyword,\n      line: gherkinScenarioLocationMap[pickle.astNodeIds[0]].line,\n      name: pickle.name,\n      steps,\n      tags: this.getScenarioTags({ feature, pickle, gherkinScenarioMap }),\n      type: 'scenario',\n    }\n  }\n\n  private formatScenarioId({\n    feature,\n    pickle,\n    gherkinExampleRuleMap,\n  }: {\n    feature: messages.Feature\n    pickle: messages.Pickle\n    gherkinExampleRuleMap: Record<string, messages.Rule>\n  }): string {\n    let parts: any[]\n    const rule = gherkinExampleRuleMap[pickle.astNodeIds[0]]\n    if (doesHaveValue(rule)) {\n      parts = [feature, rule, pickle]\n    } else {\n      parts = [feature, pickle]\n    }\n    return parts.map((part) => this.convertNameToId(part)).join(';')\n  }\n\n  getStepData({\n    isBeforeHook,\n    gherkinStepMap,\n    pickleStepMap,\n    testStep,\n    testStepAttachments,\n    testStepResult,\n  }: IBuildJsonStepOptions): IJsonStep {\n    const data: IJsonStep = {}\n    if (doesHaveValue(testStep.pickleStepId)) {\n      const pickleStep = pickleStepMap[testStep.pickleStepId]\n      data.arguments = this.formatStepArgument(\n        pickleStep.argument,\n        gherkinStepMap[pickleStep.astNodeIds[0]]\n      )\n      data.keyword = getStepKeyword({ pickleStep, gherkinStepMap })\n      data.line = gherkinStepMap[pickleStep.astNodeIds[0]].location.line\n      data.name = pickleStep.text\n    } else {\n      data.keyword = isBeforeHook ? 'Before' : 'After'\n      data.hidden = true\n    }\n    if (\n      doesHaveValue(testStep.stepDefinitionIds) &&\n      testStep.stepDefinitionIds.length === 1\n    ) {\n      const stepDefinition = this.supportCodeLibrary.stepDefinitions.find(\n        (s) => s.id === testStep.stepDefinitionIds[0]\n      )\n      data.match = { location: formatLocation(stepDefinition) }\n    }\n    const { message, status } = testStepResult\n    data.result = {\n      status: messages.TestStepResultStatus[status].toLowerCase(),\n    }\n    if (doesHaveValue(testStepResult.duration)) {\n      data.result.duration =\n        messages.TimeConversion.durationToMilliseconds(\n          testStepResult.duration\n        ) * 1000000\n    }\n    if (\n      status === messages.TestStepResultStatus.FAILED &&\n      doesHaveValue(message)\n    ) {\n      data.result.error_message = message\n    }\n    if (_.size(testStepAttachments) > 0) {\n      data.embeddings = testStepAttachments.map((attachment) => ({\n        data: attachment.body,\n        mime_type: attachment.mediaType,\n      }))\n    }\n    return data\n  }\n\n  getFeatureTags(feature: messages.Feature): IJsonTag[] {\n    return _.map(feature.tags, (tagData) => ({\n      name: tagData.name,\n      line: tagData.location.line,\n    }))\n  }\n\n  getScenarioTags({\n    feature,\n    pickle,\n    gherkinScenarioMap,\n  }: {\n    feature: messages.Feature\n    pickle: messages.Pickle\n    gherkinScenarioMap: Record<string, messages.Scenario>\n  }): IJsonTag[] {\n    const scenario = gherkinScenarioMap[pickle.astNodeIds[0]]\n\n    return pickle.tags.map(\n      (tagData: messages.PickleTag): IJsonTag =>\n        this.getScenarioTag(tagData, feature, scenario)\n    )\n  }\n\n  private getScenarioTag(\n    tagData: messages.PickleTag,\n    feature: messages.Feature,\n    scenario: messages.Scenario\n  ): IJsonTag {\n    const byAstNodeId = (tag: messages.Tag): Boolean =>\n      tag.id === tagData.astNodeId\n    const flatten = (\n      acc: messages.Tag[],\n      val: messages.Tag[]\n    ): messages.Tag[] => acc.concat(val)\n\n    const tag =\n      feature.tags.find(byAstNodeId) ||\n      scenario.tags.find(byAstNodeId) ||\n      scenario.examples\n        .map((e) => e.tags)\n        .reduce(flatten, [])\n        .find(byAstNodeId)\n\n    return {\n      name: tagData.name,\n      line: tag?.location?.line,\n    }\n  }\n}\n"]}