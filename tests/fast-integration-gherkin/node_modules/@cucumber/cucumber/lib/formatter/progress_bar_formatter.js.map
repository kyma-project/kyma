{"version":3,"file":"progress_bar_formatter.js","sourceRoot":"","sources":["../../src/formatter/progress_bar_formatter.ts"],"names":[],"mappings":"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","sourcesContent":["import { formatIssue, formatSummary, isIssue } from './helpers'\nimport Formatter, { IFormatterOptions } from './'\nimport ProgressBar from 'progress'\nimport { WriteStream as TtyWriteStream } from 'tty'\nimport * as messages from '@cucumber/messages'\nimport { doesHaveValue, valueOrDefault } from '../value_checker'\nimport { formatUndefinedParameterType } from './helpers/issue_helpers'\nimport { durationBetweenTimestamps } from '../time'\n\n// Inspired by https://github.com/thekompanee/fuubar and https://github.com/martinciu/fuubar-cucumber\nexport default class ProgressBarFormatter extends Formatter {\n  private numberOfSteps: number\n  private testRunStarted: messages.TestRunStarted\n  private issueCount: number\n  public progressBar: ProgressBar\n\n  constructor(options: IFormatterOptions) {\n    super(options)\n    options.eventBroadcaster.on('envelope', this.parseEnvelope.bind(this))\n    this.numberOfSteps = 0\n    this.issueCount = 0\n  }\n\n  incrementStepCount(pickleId: string): void {\n    const pickle = this.eventDataCollector.getPickle(pickleId)\n    this.numberOfSteps += pickle.steps.length\n  }\n\n  initializeProgressBar(): void {\n    if (doesHaveValue(this.progressBar)) {\n      return\n    }\n    this.progressBar = new ProgressBar(':current/:total steps [:bar] ', {\n      clear: true,\n      incomplete: ' ',\n      stream: this.stream,\n      total: this.numberOfSteps,\n      width: valueOrDefault((this.stream as TtyWriteStream).columns, 80),\n    })\n  }\n\n  logProgress({\n    testStepId,\n    testCaseStartedId,\n  }: messages.TestStepFinished): void {\n    const { testCase } =\n      this.eventDataCollector.getTestCaseAttempt(testCaseStartedId)\n    const testStep = testCase.testSteps.find((s) => s.id === testStepId)\n    if (doesHaveValue(testStep.pickleStepId)) {\n      this.progressBar.tick()\n    }\n  }\n\n  logUndefinedParametertype(\n    parameterType: messages.UndefinedParameterType\n  ): void {\n    this.log(\n      `Undefined parameter type: ${formatUndefinedParameterType(\n        parameterType\n      )}\\n`\n    )\n  }\n\n  logErrorIfNeeded(testCaseFinished: messages.TestCaseFinished): void {\n    const { worstTestStepResult } = this.eventDataCollector.getTestCaseAttempt(\n      testCaseFinished.testCaseStartedId\n    )\n    if (isIssue(worstTestStepResult)) {\n      this.issueCount += 1\n      const testCaseAttempt = this.eventDataCollector.getTestCaseAttempt(\n        testCaseFinished.testCaseStartedId\n      )\n      this.progressBar.interrupt(\n        formatIssue({\n          colorFns: this.colorFns,\n          cwd: this.cwd,\n          number: this.issueCount,\n          snippetBuilder: this.snippetBuilder,\n          supportCodeLibrary: this.supportCodeLibrary,\n          testCaseAttempt,\n        })\n      )\n      if (worstTestStepResult.willBeRetried) {\n        const stepsToRetry = testCaseAttempt.pickle.steps.length\n        this.progressBar.tick(-stepsToRetry)\n      }\n    }\n  }\n\n  logSummary(testRunFinished: messages.TestRunFinished): void {\n    const testRunDuration = durationBetweenTimestamps(\n      this.testRunStarted.timestamp,\n      testRunFinished.timestamp\n    )\n    this.log(\n      formatSummary({\n        colorFns: this.colorFns,\n        testCaseAttempts: this.eventDataCollector.getTestCaseAttempts(),\n        testRunDuration,\n      })\n    )\n  }\n\n  parseEnvelope(envelope: messages.Envelope): void {\n    if (doesHaveValue(envelope.undefinedParameterType)) {\n      this.logUndefinedParametertype(envelope.undefinedParameterType)\n    } else if (doesHaveValue(envelope.testCase)) {\n      this.incrementStepCount(envelope.testCase.pickleId)\n    } else if (doesHaveValue(envelope.testStepStarted)) {\n      this.initializeProgressBar()\n    } else if (doesHaveValue(envelope.testStepFinished)) {\n      this.logProgress(envelope.testStepFinished)\n    } else if (doesHaveValue(envelope.testCaseFinished)) {\n      this.logErrorIfNeeded(envelope.testCaseFinished)\n    } else if (doesHaveValue(envelope.testRunStarted)) {\n      this.testRunStarted = envelope.testRunStarted\n    } else if (doesHaveValue(envelope.testRunFinished)) {\n      this.logSummary(envelope.testRunFinished)\n    }\n  }\n}\n"]}