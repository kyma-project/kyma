{"version":3,"file":"event_data_collector.js","sourceRoot":"","sources":["../../../src/formatter/helpers/event_data_collector.ts"],"names":[],"mappings":"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","sourcesContent":["import _, { values } from 'lodash'\nimport * as messages from '@cucumber/messages'\nimport { doesHaveValue, doesNotHaveValue } from '../../value_checker'\nimport { EventEmitter } from 'events'\n\ninterface ITestCaseAttemptData {\n  attempt: number\n  testCaseId: string\n  stepAttachments: Record<string, messages.Attachment[]>\n  stepResults: Record<string, messages.TestStepResult>\n  worstTestStepResult: messages.TestStepResult\n}\n\nexport interface ITestCaseAttempt {\n  attempt: number\n  gherkinDocument: messages.GherkinDocument\n  pickle: messages.Pickle\n  stepAttachments: Record<string, messages.Attachment[]>\n  stepResults: Record<string, messages.TestStepResult>\n  testCase: messages.TestCase\n  worstTestStepResult: messages.TestStepResult\n}\n\nexport default class EventDataCollector {\n  private gherkinDocumentMap: Record<string, messages.GherkinDocument> = {}\n  private pickleMap: Record<string, messages.Pickle> = {}\n  private testCaseMap: Record<string, messages.TestCase> = {}\n  private testCaseAttemptDataMap: Record<string, ITestCaseAttemptData> = {}\n  readonly undefinedParameterTypes: messages.UndefinedParameterType[] = []\n\n  constructor(eventBroadcaster: EventEmitter) {\n    eventBroadcaster.on('envelope', this.parseEnvelope.bind(this))\n  }\n\n  getGherkinDocument(uri: string): messages.GherkinDocument {\n    return this.gherkinDocumentMap[uri]\n  }\n\n  getPickle(pickleId: string): messages.Pickle {\n    return this.pickleMap[pickleId]\n  }\n\n  getTestCaseAttempts(): ITestCaseAttempt[] {\n    return _.keys(this.testCaseAttemptDataMap).map((testCaseStartedId) => {\n      return this.getTestCaseAttempt(testCaseStartedId)\n    })\n  }\n\n  getTestCaseAttempt(testCaseStartedId: string): ITestCaseAttempt {\n    const testCaseAttemptData = this.testCaseAttemptDataMap[testCaseStartedId]\n    const testCase = this.testCaseMap[testCaseAttemptData.testCaseId]\n    const pickle = this.pickleMap[testCase.pickleId]\n    return {\n      gherkinDocument: this.gherkinDocumentMap[pickle.uri],\n      pickle,\n      testCase,\n      attempt: testCaseAttemptData.attempt,\n      stepAttachments: testCaseAttemptData.stepAttachments,\n      stepResults: testCaseAttemptData.stepResults,\n      worstTestStepResult: testCaseAttemptData.worstTestStepResult,\n    }\n  }\n\n  parseEnvelope(envelope: messages.Envelope): void {\n    if (doesHaveValue(envelope.gherkinDocument)) {\n      this.gherkinDocumentMap[envelope.gherkinDocument.uri] =\n        envelope.gherkinDocument\n    } else if (doesHaveValue(envelope.pickle)) {\n      this.pickleMap[envelope.pickle.id] = envelope.pickle\n    } else if (doesHaveValue(envelope.undefinedParameterType)) {\n      this.undefinedParameterTypes.push(envelope.undefinedParameterType)\n    } else if (doesHaveValue(envelope.testCase)) {\n      this.testCaseMap[envelope.testCase.id] = envelope.testCase\n    } else if (doesHaveValue(envelope.testCaseStarted)) {\n      this.initTestCaseAttempt(envelope.testCaseStarted)\n    } else if (doesHaveValue(envelope.attachment)) {\n      this.storeAttachment(envelope.attachment)\n    } else if (doesHaveValue(envelope.testStepFinished)) {\n      this.storeTestStepResult(envelope.testStepFinished)\n    } else if (doesHaveValue(envelope.testCaseFinished)) {\n      this.storeTestCaseResult(envelope.testCaseFinished)\n    }\n  }\n\n  private initTestCaseAttempt(testCaseStarted: messages.TestCaseStarted): void {\n    this.testCaseAttemptDataMap[testCaseStarted.id] = {\n      attempt: testCaseStarted.attempt,\n      testCaseId: testCaseStarted.testCaseId,\n      stepAttachments: {},\n      stepResults: {},\n      worstTestStepResult: {\n        willBeRetried: false,\n        duration: { seconds: 0, nanos: 0 },\n        status: messages.TestStepResultStatus.UNKNOWN,\n      },\n    }\n  }\n\n  storeAttachment(attachment: messages.Attachment): void {\n    const { testCaseStartedId, testStepId } = attachment\n    // TODO: we shouldn't have to check if these properties have values - they are non-nullable\n    if (doesHaveValue(testCaseStartedId) && doesHaveValue(testStepId)) {\n      const { stepAttachments } = this.testCaseAttemptDataMap[testCaseStartedId]\n      if (doesNotHaveValue(stepAttachments[testStepId])) {\n        stepAttachments[testStepId] = []\n      }\n      stepAttachments[testStepId].push(attachment)\n    }\n  }\n\n  storeTestStepResult({\n    testCaseStartedId,\n    testStepId,\n    testStepResult,\n  }: messages.TestStepFinished): void {\n    this.testCaseAttemptDataMap[testCaseStartedId].stepResults[testStepId] =\n      testStepResult\n  }\n\n  storeTestCaseResult({ testCaseStartedId }: messages.TestCaseFinished): void {\n    const stepResults = values(\n      this.testCaseAttemptDataMap[testCaseStartedId].stepResults\n    )\n    this.testCaseAttemptDataMap[testCaseStartedId].worstTestStepResult =\n      messages.getWorstTestStepResult(stepResults)\n  }\n}\n"]}