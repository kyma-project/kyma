{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../src/formatter/builder.ts"],"names":[],"mappings":"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","sourcesContent":["import getColorFns from './get_color_fns'\nimport JavascriptSnippetSyntax from './step_definition_snippet_builder/javascript_snippet_syntax'\nimport JsonFormatter from './json_formatter'\nimport MessageFormatter from './message_formatter'\nimport path from 'path'\nimport ProgressBarFormatter from './progress_bar_formatter'\nimport ProgressFormatter from './progress_formatter'\nimport RerunFormatter from './rerun_formatter'\nimport SnippetsFormatter from './snippets_formatter'\nimport StepDefinitionSnippetBuilder from './step_definition_snippet_builder'\nimport SummaryFormatter from './summary_formatter'\nimport UsageFormatter from './usage_formatter'\nimport UsageJsonFormatter from './usage_json_formatter'\nimport { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport Formatter, { IFormatterCleanupFn, IFormatterLogFn } from '.'\nimport { doesHaveValue, doesNotHaveValue } from '../value_checker'\nimport { EventEmitter } from 'events'\nimport EventDataCollector from './helpers/event_data_collector'\nimport { Writable as WritableStream } from 'stream'\nimport { IParsedArgvFormatOptions } from '../cli/argv_parser'\nimport { SnippetInterface } from './step_definition_snippet_builder/snippet_syntax'\nimport HtmlFormatter from './html_formatter'\nimport createRequire from 'create-require'\n\ninterface IGetStepDefinitionSnippetBuilderOptions {\n  cwd: string\n  snippetInterface?: SnippetInterface\n  snippetSyntax?: string\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\nexport interface IBuildOptions {\n  cwd: string\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  log: IFormatterLogFn\n  parsedArgvOptions: IParsedArgvFormatOptions\n  stream: WritableStream\n  cleanup: IFormatterCleanupFn\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\nconst FormatterBuilder = {\n  build(type: string, options: IBuildOptions): Formatter {\n    const FormatterConstructor = FormatterBuilder.getConstructorByType(\n      type,\n      options.cwd\n    )\n    const colorFns = getColorFns(options.parsedArgvOptions.colorsEnabled)\n    const snippetBuilder = FormatterBuilder.getStepDefinitionSnippetBuilder({\n      cwd: options.cwd,\n      snippetInterface: options.parsedArgvOptions.snippetInterface,\n      snippetSyntax: options.parsedArgvOptions.snippetSyntax,\n      supportCodeLibrary: options.supportCodeLibrary,\n    })\n    return new FormatterConstructor({\n      colorFns,\n      snippetBuilder,\n      ...options,\n    })\n  },\n\n  getConstructorByType(type: string, cwd: string): typeof Formatter {\n    switch (type) {\n      case 'json':\n        return JsonFormatter\n      case 'message':\n        return MessageFormatter\n      case 'html':\n        return HtmlFormatter\n      case 'progress':\n        return ProgressFormatter\n      case 'progress-bar':\n        return ProgressBarFormatter\n      case 'rerun':\n        return RerunFormatter\n      case 'snippets':\n        return SnippetsFormatter\n      case 'summary':\n        return SummaryFormatter\n      case 'usage':\n        return UsageFormatter\n      case 'usage-json':\n        return UsageJsonFormatter\n      default:\n        return FormatterBuilder.loadCustomFormatter(type, cwd)\n    }\n  },\n\n  getStepDefinitionSnippetBuilder({\n    cwd,\n    snippetInterface,\n    snippetSyntax,\n    supportCodeLibrary,\n  }: IGetStepDefinitionSnippetBuilderOptions) {\n    if (doesNotHaveValue(snippetInterface)) {\n      snippetInterface = SnippetInterface.Synchronous\n    }\n    let Syntax = JavascriptSnippetSyntax\n    if (doesHaveValue(snippetSyntax)) {\n      const fullSyntaxPath = path.resolve(cwd, snippetSyntax)\n      Syntax = require(fullSyntaxPath) // eslint-disable-line @typescript-eslint/no-var-requires\n    }\n    return new StepDefinitionSnippetBuilder({\n      snippetSyntax: new Syntax(snippetInterface),\n      parameterTypeRegistry: supportCodeLibrary.parameterTypeRegistry,\n    })\n  },\n\n  loadCustomFormatter(customFormatterPath: string, cwd: string) {\n    const CustomFormatter = createRequire(cwd)(customFormatterPath)\n\n    if (typeof CustomFormatter === 'function') {\n      return CustomFormatter\n    } else if (\n      doesHaveValue(CustomFormatter) &&\n      typeof CustomFormatter.default === 'function'\n    ) {\n      return CustomFormatter.default\n    }\n    throw new Error(\n      `Custom formatter (${customFormatterPath}) does not export a function`\n    )\n  },\n}\n\nexport default FormatterBuilder\n"]}