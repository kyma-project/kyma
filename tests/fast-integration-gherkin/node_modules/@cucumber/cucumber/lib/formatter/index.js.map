{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/formatter/index.ts"],"names":[],"mappings":";;AAgCA,MAAqB,SAAS;IAU5B,YAAY,OAA0B;QACpC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAA;QAChC,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAA;QACtB,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAA;QACpD,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAA;QACtB,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAA;QAC5C,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA;QAC5B,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAA;QACpD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAA;IAChC,CAAC;IAED,KAAK,CAAC,QAAQ;QACZ,MAAM,IAAI,CAAC,OAAO,EAAE,CAAA;IACtB,CAAC;CACF;AAxBD,4BAwBC","sourcesContent":["import { IColorFns } from './get_color_fns'\nimport { EventDataCollector } from './helpers'\nimport StepDefinitionSnippetBuilder from './step_definition_snippet_builder'\nimport { PassThrough, Writable as WritableStream } from 'stream'\nimport { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport { WriteStream as FsWriteStream } from 'fs'\nimport { WriteStream as TtyWriteStream } from 'tty'\nimport { EventEmitter } from 'events'\nimport { IParsedArgvFormatOptions } from '../cli/argv_parser'\nimport HttpStream from './http_stream'\n\nexport type IFormatterStream =\n  | FsWriteStream\n  | TtyWriteStream\n  | PassThrough\n  | HttpStream\nexport type IFormatterLogFn = (buffer: string | Uint8Array) => void\nexport type IFormatterCleanupFn = () => Promise<any>\n\nexport interface IFormatterOptions {\n  colorFns: IColorFns\n  cwd: string\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  log: IFormatterLogFn\n  parsedArgvOptions: IParsedArgvFormatOptions\n  snippetBuilder: StepDefinitionSnippetBuilder\n  stream: WritableStream\n  cleanup: IFormatterCleanupFn\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\nexport default class Formatter {\n  protected colorFns: IColorFns\n  protected cwd: string\n  protected eventDataCollector: EventDataCollector\n  protected log: IFormatterLogFn\n  protected snippetBuilder: StepDefinitionSnippetBuilder\n  protected stream: WritableStream\n  protected supportCodeLibrary: ISupportCodeLibrary\n  private readonly cleanup: IFormatterCleanupFn\n\n  constructor(options: IFormatterOptions) {\n    this.colorFns = options.colorFns\n    this.cwd = options.cwd\n    this.eventDataCollector = options.eventDataCollector\n    this.log = options.log\n    this.snippetBuilder = options.snippetBuilder\n    this.stream = options.stream\n    this.supportCodeLibrary = options.supportCodeLibrary\n    this.cleanup = options.cleanup\n  }\n\n  async finished(): Promise<void> {\n    await this.cleanup()\n  }\n}\n"]}