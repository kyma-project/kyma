{"version":3,"file":"definition.js","sourceRoot":"","sources":["../../src/models/definition.ts"],"names":[],"mappings":";;AAqDA,MAA8B,UAAU;IAQtC,YAAY,EACV,IAAI,EACJ,EAAE,EACF,IAAI,EACJ,OAAO,EACP,aAAa,EACb,GAAG,GACuC;QAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAA;QACZ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAA;QAClC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;IAChB,CAAC;IAED,6BAA6B,CAC3B,mBAAoC,EACpC,cAA+B;QAE/B,OAAO,CACL,gBAAgB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY;YACvD,iBAAiB,mBAAmB,CAAC,QAAQ,EAAE,0CAA0C;YACzF,OAAO,cAAc,CAAC,QAAQ,EAAE,4BAA4B,CAC7D,CAAA;IACH,CAAC;IAED,+BAA+B,CAAC,UAAiB;QAC/C,OAAO,IAAI,CAAC,6BAA6B,CACvC,UAAU,CAAC,MAAM,EACjB,UAAU,CAAC,MAAM,GAAG,CAAC,CACtB,CAAA;IACH,CAAC;CACF;AAzCD,6BAyCC","sourcesContent":["import * as messages from '@cucumber/messages'\nimport { ITestCaseHookParameter } from '../support_code_library_builder/types'\nimport { Expression } from '@cucumber/cucumber-expressions'\n\nexport interface IGetInvocationDataRequest {\n  hookParameter: ITestCaseHookParameter\n  step: messages.PickleStep\n  world: any\n}\n\nexport interface IGetInvocationDataResponse {\n  getInvalidCodeLengthMessage: () => string\n  parameters: any[]\n  validCodeLengths: number[]\n}\n\nexport interface IDefinitionOptions {\n  timeout?: number\n  wrapperOptions?: any\n}\n\nexport interface IHookDefinitionOptions extends IDefinitionOptions {\n  tags?: string\n}\n\nexport interface IDefinitionParameters<T extends IDefinitionOptions> {\n  code: Function\n  id: string\n  line: number\n  options: T\n  unwrappedCode?: Function\n  uri: string\n}\n\nexport interface IStepDefinitionParameters\n  extends IDefinitionParameters<IDefinitionOptions> {\n  pattern: string | RegExp\n  expression: Expression\n}\n\nexport interface IDefinition {\n  readonly code: Function\n  readonly id: string\n  readonly line: number\n  readonly options: IDefinitionOptions\n  readonly unwrappedCode: Function\n  readonly uri: string\n\n  getInvocationParameters: (\n    options: IGetInvocationDataRequest\n  ) => Promise<IGetInvocationDataResponse>\n}\n\nexport default abstract class Definition {\n  public readonly code: Function\n  public readonly id: string\n  public readonly line: number\n  public readonly options: IDefinitionOptions\n  public readonly unwrappedCode: Function\n  public readonly uri: string\n\n  constructor({\n    code,\n    id,\n    line,\n    options,\n    unwrappedCode,\n    uri,\n  }: IDefinitionParameters<IDefinitionOptions>) {\n    this.code = code\n    this.id = id\n    this.line = line\n    this.options = options\n    this.unwrappedCode = unwrappedCode\n    this.uri = uri\n  }\n\n  buildInvalidCodeLengthMessage(\n    syncOrPromiseLength: number | string,\n    callbackLength: number | string\n  ): string {\n    return (\n      `function has ${this.code.length.toString()} arguments` +\n      `, should have ${syncOrPromiseLength.toString()} (if synchronous or returning a promise)` +\n      ` or ${callbackLength.toString()} (if accepting a callback)`\n    )\n  }\n\n  baseGetInvalidCodeLengthMessage(parameters: any[]): string {\n    return this.buildInvalidCodeLengthMessage(\n      parameters.length,\n      parameters.length + 1\n    )\n  }\n}\n"]}