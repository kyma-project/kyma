{"version":3,"file":"finalize_helpers.js","sourceRoot":"","sources":["../../src/support_code_library_builder/finalize_helpers.ts"],"names":[],"mappings":";;;;;;AAAA,gEAAsC;AACtC,gDAAuB;AAavB,SAAgB,4BAA4B,CAAC,EAC3C,GAAG,EACH,iBAAiB,GACoB;IACrC,MAAM,0BAA0B,GAAG,iBAAiB,CAAC,MAAM,CACzD,CAAC,gBAAgB,EAAE,EAAE,CAAC,sBAAW,CAAC,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAC5D,CAAA;IACD,IAAI,0BAA0B,CAAC,MAAM,GAAG,CAAC,EAAE;QACzC,MAAM,UAAU,GAAG,0BAA0B;aAC1C,GAAG,CACF,CAAC,gBAAgB,EAAE,EAAE,CACnB,GAAG,cAAI,CAAC,QAAQ,CACd,GAAG,EACH,gBAAgB,CAAC,GAAG,CACrB,IAAI,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAC1C;aACA,IAAI,CAAC,MAAM,CAAC,CAAA;QACf,MAAM,OAAO,GAAG;;;UAGV,UAAU;;;OAGb,CAAA;QACH,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAA;KACzB;AACH,CAAC;AA1BD,oEA0BC","sourcesContent":["import isGenerator from 'is-generator'\nimport path from 'path'\n\nexport interface IDefinitionConfig {\n  code: any\n  line: number\n  uri: string\n}\n\nexport interface IValidateNoGeneratorFunctionsRequest {\n  cwd: string\n  definitionConfigs: IDefinitionConfig[]\n}\n\nexport function validateNoGeneratorFunctions({\n  cwd,\n  definitionConfigs,\n}: IValidateNoGeneratorFunctionsRequest): void {\n  const generatorDefinitionConfigs = definitionConfigs.filter(\n    (definitionConfig) => isGenerator.fn(definitionConfig.code)\n  )\n  if (generatorDefinitionConfigs.length > 0) {\n    const references = generatorDefinitionConfigs\n      .map(\n        (definitionConfig) =>\n          `${path.relative(\n            cwd,\n            definitionConfig.uri\n          )}:${definitionConfig.line.toString()}`\n      )\n      .join('\\n  ')\n    const message = `\n      The following hook/step definitions use generator functions:\n\n        ${references}\n\n      Use 'this.setDefinitionFunctionWrapper(fn)' to wrap them in a function that returns a promise.\n      `\n    throw new Error(message)\n  }\n}\n"]}