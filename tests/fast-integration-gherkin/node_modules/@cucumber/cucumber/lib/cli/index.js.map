{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/cli/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventDataCollector } from '../formatter/helpers'\nimport {\n  emitMetaMessage,\n  emitSupportCodeMessages,\n  getExpandedArgv,\n  parseGherkinMessageStream,\n} from './helpers'\nimport { validateInstall } from './install_validator'\nimport * as I18n from './i18n'\nimport ConfigurationBuilder, {\n  IConfiguration,\n  IConfigurationFormat,\n} from './configuration_builder'\nimport { EventEmitter } from 'events'\nimport FormatterBuilder from '../formatter/builder'\nimport fs from 'mz/fs'\nimport path from 'path'\nimport PickleFilter from '../pickle_filter'\nimport bluebird from 'bluebird'\nimport ParallelRuntimeCoordinator from '../runtime/parallel/coordinator'\nimport Runtime from '../runtime'\nimport supportCodeLibraryBuilder from '../support_code_library_builder'\nimport { IdGenerator } from '@cucumber/messages'\nimport { IFormatterStream } from '../formatter'\nimport { WriteStream as TtyWriteStream } from 'tty'\nimport { doesNotHaveValue } from '../value_checker'\nimport { GherkinStreams } from '@cucumber/gherkin-streams'\nimport { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport { IParsedArgvFormatOptions } from './argv_parser'\nimport HttpStream from '../formatter/http_stream'\nimport { Writable } from 'stream'\n\nconst { incrementing, uuid } = IdGenerator\n\nexport interface ICliRunResult {\n  shouldExitImmediately: boolean\n  success: boolean\n}\n\ninterface IInitializeFormattersRequest {\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  formatOptions: IParsedArgvFormatOptions\n  formats: IConfigurationFormat[]\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\ninterface IGetSupportCodeLibraryRequest {\n  newId: IdGenerator.NewId\n  supportCodeRequiredModules: string[]\n  supportCodePaths: string[]\n}\n\nexport default class Cli {\n  private readonly argv: string[]\n  private readonly cwd: string\n  private readonly stdout: IFormatterStream\n\n  constructor({\n    argv,\n    cwd,\n    stdout,\n  }: {\n    argv: string[]\n    cwd: string\n    stdout: IFormatterStream\n  }) {\n    this.argv = argv\n    this.cwd = cwd\n    this.stdout = stdout\n  }\n\n  async getConfiguration(): Promise<IConfiguration> {\n    const fullArgv = await getExpandedArgv({\n      argv: this.argv,\n      cwd: this.cwd,\n    })\n    return await ConfigurationBuilder.build({\n      argv: fullArgv,\n      cwd: this.cwd,\n    })\n  }\n\n  async initializeFormatters({\n    eventBroadcaster,\n    eventDataCollector,\n    formatOptions,\n    formats,\n    supportCodeLibrary,\n  }: IInitializeFormattersRequest): Promise<() => Promise<void>> {\n    const formatters = await bluebird.map(\n      formats,\n      async ({ type, outputTo }) => {\n        let stream: IFormatterStream = this.stdout\n        if (outputTo !== '') {\n          if (outputTo.match(/^https?:\\/\\//) !== null) {\n            const headers: { [key: string]: string } = {}\n            if (process.env.CUCUMBER_PUBLISH_TOKEN !== undefined) {\n              headers.Authorization = `Bearer ${process.env.CUCUMBER_PUBLISH_TOKEN}`\n            }\n\n            stream = new HttpStream(outputTo, 'GET', headers)\n            const readerStream = new Writable({\n              objectMode: true,\n              write: function (responseBody: string, encoding, writeCallback) {\n                console.error(responseBody)\n                writeCallback()\n              },\n            })\n            stream.pipe(readerStream)\n          } else {\n            const fd = await fs.open(path.resolve(this.cwd, outputTo), 'w')\n            stream = fs.createWriteStream(null, { fd })\n          }\n        }\n\n        stream.on('error', (error) => {\n          console.error(error.message)\n          process.exit(1)\n        })\n\n        const typeOptions = {\n          cwd: this.cwd,\n          eventBroadcaster,\n          eventDataCollector,\n          log: stream.write.bind(stream),\n          parsedArgvOptions: formatOptions,\n          stream,\n          cleanup:\n            stream === this.stdout\n              ? async () => await Promise.resolve()\n              : bluebird.promisify(stream.end.bind(stream)),\n          supportCodeLibrary,\n        }\n        if (doesNotHaveValue(formatOptions.colorsEnabled)) {\n          typeOptions.parsedArgvOptions.colorsEnabled = (\n            stream as TtyWriteStream\n          ).isTTY\n        }\n        if (type === 'progress-bar' && !(stream as TtyWriteStream).isTTY) {\n          const outputToName = outputTo === '' ? 'stdout' : outputTo\n          console.warn(\n            `Cannot use 'progress-bar' formatter for output to '${outputToName}' as not a TTY. Switching to 'progress' formatter.`\n          )\n          type = 'progress'\n        }\n        return FormatterBuilder.build(type, typeOptions)\n      }\n    )\n    return async function () {\n      await bluebird.each(formatters, async (formatter) => {\n        await formatter.finished()\n      })\n    }\n  }\n\n  getSupportCodeLibrary({\n    newId,\n    supportCodeRequiredModules,\n    supportCodePaths,\n  }: IGetSupportCodeLibraryRequest): ISupportCodeLibrary {\n    supportCodeRequiredModules.map((module) => require(module))\n    supportCodeLibraryBuilder.reset(this.cwd, newId)\n    supportCodePaths.forEach((codePath) => {\n      try {\n        require(codePath)\n      } catch (e) {\n        console.error(e.stack)\n        console.error('codepath: ' + codePath)\n      }\n    })\n    return supportCodeLibraryBuilder.finalize()\n  }\n\n  async run(): Promise<ICliRunResult> {\n    await validateInstall(this.cwd)\n    const configuration = await this.getConfiguration()\n    if (configuration.listI18nLanguages) {\n      this.stdout.write(I18n.getLanguages())\n      return { shouldExitImmediately: true, success: true }\n    }\n    if (configuration.listI18nKeywordsFor !== '') {\n      this.stdout.write(I18n.getKeywords(configuration.listI18nKeywordsFor))\n      return { shouldExitImmediately: true, success: true }\n    }\n    const newId =\n      configuration.predictableIds && configuration.parallel <= 1\n        ? incrementing()\n        : uuid()\n    const supportCodeLibrary = this.getSupportCodeLibrary({\n      newId,\n      supportCodePaths: configuration.supportCodePaths,\n      supportCodeRequiredModules: configuration.supportCodeRequiredModules,\n    })\n    const eventBroadcaster = new EventEmitter()\n    const eventDataCollector = new EventDataCollector(eventBroadcaster)\n    const cleanup = await this.initializeFormatters({\n      eventBroadcaster,\n      eventDataCollector,\n      formatOptions: configuration.formatOptions,\n      formats: configuration.formats,\n      supportCodeLibrary,\n    })\n    await emitMetaMessage(eventBroadcaster)\n    const gherkinMessageStream = GherkinStreams.fromPaths(\n      configuration.featurePaths,\n      {\n        defaultDialect: configuration.featureDefaultLanguage,\n        newId,\n        relativeTo: this.cwd,\n      }\n    )\n    let pickleIds: string[] = []\n\n    if (configuration.featurePaths.length > 0) {\n      pickleIds = await parseGherkinMessageStream({\n        cwd: this.cwd,\n        eventBroadcaster,\n        eventDataCollector,\n        gherkinMessageStream,\n        order: configuration.order,\n        pickleFilter: new PickleFilter(configuration.pickleFilterOptions),\n      })\n    }\n    emitSupportCodeMessages({\n      eventBroadcaster,\n      supportCodeLibrary,\n      newId,\n    })\n    let success\n    if (configuration.parallel > 1) {\n      const parallelRuntimeCoordinator = new ParallelRuntimeCoordinator({\n        cwd: this.cwd,\n        eventBroadcaster,\n        eventDataCollector,\n        options: configuration.runtimeOptions,\n        newId,\n        pickleIds,\n        supportCodeLibrary,\n        supportCodePaths: configuration.supportCodePaths,\n        supportCodeRequiredModules: configuration.supportCodeRequiredModules,\n      })\n      success = await parallelRuntimeCoordinator.run(configuration.parallel)\n    } else {\n      const runtime = new Runtime({\n        eventBroadcaster,\n        eventDataCollector,\n        options: configuration.runtimeOptions,\n        newId,\n        pickleIds,\n        supportCodeLibrary,\n      })\n      success = await runtime.start()\n    }\n    await cleanup()\n    return {\n      shouldExitImmediately: configuration.shouldExitImmediately,\n      success,\n    }\n  }\n}\n"]}