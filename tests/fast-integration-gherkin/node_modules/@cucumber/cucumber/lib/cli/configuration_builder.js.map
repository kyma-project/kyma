{"version":3,"file":"configuration_builder.js","sourceRoot":"","sources":["../../src/cli/configuration_builder.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport ArgvParser, {\n  IParsedArgvFormatOptions,\n  IParsedArgvOptions,\n} from './argv_parser'\nimport fs from 'mz/fs'\nimport path from 'path'\nimport OptionSplitter from './option_splitter'\nimport bluebird from 'bluebird'\nimport glob from 'glob'\nimport { promisify } from 'util'\nimport { IPickleFilterOptions } from '../pickle_filter'\nimport { IRuntimeOptions } from '../runtime'\nimport { valueOrDefault } from '../value_checker'\n\nexport interface IConfigurationFormat {\n  outputTo: string\n  type: string\n}\n\nexport interface IConfiguration {\n  featureDefaultLanguage: string\n  featurePaths: string[]\n  formats: IConfigurationFormat[]\n  formatOptions: IParsedArgvFormatOptions\n  publishing: boolean\n  listI18nKeywordsFor: string\n  listI18nLanguages: boolean\n  order: string\n  parallel: number\n  pickleFilterOptions: IPickleFilterOptions\n  predictableIds: boolean\n  profiles: string[]\n  runtimeOptions: IRuntimeOptions\n  shouldExitImmediately: boolean\n  supportCodePaths: string[]\n  supportCodeRequiredModules: string[]\n  suppressPublishAdvertisement: boolean\n}\n\nexport interface INewConfigurationBuilderOptions {\n  argv: string[]\n  cwd: string\n}\n\nconst DEFAULT_CUCUMBER_PUBLISH_URL = 'https://messages.cucumber.io/api/reports'\n\nexport default class ConfigurationBuilder {\n  static async build(\n    options: INewConfigurationBuilderOptions\n  ): Promise<IConfiguration> {\n    const builder = new ConfigurationBuilder(options)\n    return await builder.build()\n  }\n\n  private readonly cwd: string\n  private readonly args: string[]\n  private readonly options: IParsedArgvOptions\n\n  constructor({ argv, cwd }: INewConfigurationBuilderOptions) {\n    this.cwd = cwd\n\n    ArgvParser.lint(argv)\n    const parsedArgv = ArgvParser.parse(argv)\n    this.args = parsedArgv.args\n    this.options = parsedArgv.options\n  }\n\n  async build(): Promise<IConfiguration> {\n    const listI18nKeywordsFor = this.options.i18nKeywords\n    const listI18nLanguages = this.options.i18nLanguages\n    const unexpandedFeaturePaths = await this.getUnexpandedFeaturePaths()\n    let featurePaths: string[] = []\n    let supportCodePaths: string[] = []\n    if (listI18nKeywordsFor === '' && !listI18nLanguages) {\n      featurePaths = await this.expandFeaturePaths(unexpandedFeaturePaths)\n      let unexpandedSupportCodePaths = this.options.require\n      if (unexpandedSupportCodePaths.length === 0) {\n        unexpandedSupportCodePaths = this.getFeatureDirectoryPaths(featurePaths)\n      }\n      supportCodePaths = await this.expandPaths(\n        unexpandedSupportCodePaths,\n        '.js'\n      )\n    }\n    return {\n      featureDefaultLanguage: this.options.language,\n      featurePaths,\n      formats: this.getFormats(),\n      formatOptions: this.options.formatOptions,\n      publishing: this.isPublishing(),\n      listI18nKeywordsFor,\n      listI18nLanguages,\n      order: this.options.order,\n      parallel: this.options.parallel,\n      pickleFilterOptions: {\n        cwd: this.cwd,\n        featurePaths: unexpandedFeaturePaths,\n        names: this.options.name,\n        tagExpression: this.options.tags,\n      },\n      predictableIds: this.options.predictableIds,\n      profiles: this.options.profile,\n      runtimeOptions: {\n        dryRun: this.options.dryRun,\n        predictableIds: this.options.predictableIds,\n        failFast: this.options.failFast,\n        filterStacktraces: !this.options.backtrace,\n        retry: this.options.retry,\n        retryTagFilter: this.options.retryTagFilter,\n        strict: this.options.strict,\n        worldParameters: this.options.worldParameters,\n      },\n      shouldExitImmediately: this.options.exit,\n      supportCodePaths,\n      supportCodeRequiredModules: this.options.requireModule,\n      suppressPublishAdvertisement: this.isPublishAdvertisementSuppressed(),\n    }\n  }\n\n  async expandPaths(\n    unexpandedPaths: string[],\n    defaultExtension: string\n  ): Promise<string[]> {\n    const expandedPaths = await bluebird.map(\n      unexpandedPaths,\n      async (unexpandedPath) => {\n        const matches = await promisify(glob)(unexpandedPath, {\n          absolute: true,\n          cwd: this.cwd,\n        })\n        const expanded = await bluebird.map(matches, async (match) => {\n          if (path.extname(match) === '') {\n            return await promisify(glob)(`${match}/**/*${defaultExtension}`)\n          }\n          return [match]\n        })\n        return _.flatten(expanded)\n      }\n    )\n    return _.flatten(expandedPaths).map((x) => path.normalize(x))\n  }\n\n  async expandFeaturePaths(featurePaths: string[]): Promise<string[]> {\n    featurePaths = featurePaths.map((p) => p.replace(/(:\\d+)*$/g, '')) // Strip line numbers\n    featurePaths = [...new Set(featurePaths)] // Deduplicate the feature files\n    return this.expandPaths(featurePaths, '.feature')\n  }\n\n  getFeatureDirectoryPaths(featurePaths: string[]): string[] {\n    const featureDirs = featurePaths.map((featurePath) => {\n      let featureDir = path.dirname(featurePath)\n      let childDir: string\n      let parentDir = featureDir\n      while (childDir !== parentDir) {\n        childDir = parentDir\n        parentDir = path.dirname(childDir)\n        if (path.basename(parentDir) === 'features') {\n          featureDir = parentDir\n          break\n        }\n      }\n      return path.relative(this.cwd, featureDir)\n    })\n    return _.uniq(featureDirs)\n  }\n\n  isPublishing(): boolean {\n    return (\n      this.options.publish ||\n      this.isTruthyString(process.env.CUCUMBER_PUBLISH_ENABLED) ||\n      process.env.CUCUMBER_PUBLISH_TOKEN !== undefined\n    )\n  }\n\n  isPublishAdvertisementSuppressed(): boolean {\n    return (\n      this.options.publishQuiet ||\n      this.isTruthyString(process.env.CUCUMBER_PUBLISH_QUIET)\n    )\n  }\n\n  getFormats(): IConfigurationFormat[] {\n    const mapping: { [key: string]: string } = { '': 'progress' }\n    this.options.format.forEach((format) => {\n      const [type, outputTo] = OptionSplitter.split(format)\n      mapping[outputTo] = type\n    })\n    if (this.isPublishing()) {\n      const publishUrl = valueOrDefault(\n        process.env.CUCUMBER_PUBLISH_URL,\n        DEFAULT_CUCUMBER_PUBLISH_URL\n      )\n\n      mapping[publishUrl] = 'message'\n    }\n    return _.map(mapping, (type, outputTo) => ({ outputTo, type }))\n  }\n\n  isTruthyString(s: string | undefined): boolean {\n    if (s === undefined) {\n      return false\n    }\n    return s.match(/^(false|no|0)$/i) === null\n  }\n\n  async getUnexpandedFeaturePaths(): Promise<string[]> {\n    if (this.args.length > 0) {\n      const nestedFeaturePaths = await bluebird.map(this.args, async (arg) => {\n        const filename = path.basename(arg)\n        if (filename[0] === '@') {\n          const filePath = path.join(this.cwd, arg)\n          const content = await fs.readFile(filePath, 'utf8')\n          return _.chain(content).split('\\n').map(_.trim).value()\n        }\n        return [arg]\n      })\n      const featurePaths = _.flatten(nestedFeaturePaths)\n      if (featurePaths.length > 0) {\n        return _.compact(featurePaths)\n      }\n    }\n    return ['features/**/*.{feature,feature.md}']\n  }\n}\n"]}