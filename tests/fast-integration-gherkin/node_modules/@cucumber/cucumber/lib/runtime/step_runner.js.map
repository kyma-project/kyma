{"version":3,"file":"step_runner.js","sourceRoot":"","sources":["../../src/runtime/step_runner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oDAAsB;AACtB,mDAA0B;AAC1B,2EAAgD;AAChD,6DAA8C;AAC9C,yEAAkD;AAGlD,oDAIyB;AAEzB,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG,cAAI,CAAA;AAUhC,KAAK,UAAU,GAAG,CAAC,EACxB,cAAc,EACd,aAAa,EACb,IAAI,EACJ,cAAc,EACd,KAAK,GACO;IACZ,WAAW,EAAE,CAAA;IACb,IAAI,KAAU,EAAE,MAAW,EAAE,cAA0C,CAAA;IAEvE,IAAI;QACF,cAAc,GAAG,MAAM,cAAc,CAAC,uBAAuB,CAAC;YAC5D,aAAa;YACb,IAAI;YACJ,KAAK;SACN,CAAC,CAAA;KACH;IAAC,OAAO,GAAG,EAAE;QACZ,KAAK,GAAG,GAAG,CAAA;KACZ;IAED,IAAI,gCAAgB,CAAC,KAAK,CAAC,EAAE;QAC3B,MAAM,qBAAqB,GAAG,8BAAc,CAC1C,cAAc,CAAC,OAAO,CAAC,OAAO,EAC9B,cAAc,CACf,CAAA;QAED,IACE,gBAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,gBAAgB,EAAE,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,EACvE;YACA,MAAM,IAAI,GAAG,MAAM,0BAAc,CAAC,GAAG,CAAC;gBACpC,SAAS,EAAE,cAAc,CAAC,UAAU;gBACpC,EAAE,EAAE,cAAc,CAAC,IAAI;gBACvB,OAAO,EAAE,KAAK;gBACd,qBAAqB;aACtB,CAAC,CAAA;YACF,KAAK,GAAG,IAAI,CAAC,KAAK,CAAA;YAClB,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;SACrB;aAAM;YACL,KAAK,GAAG,cAAc,CAAC,2BAA2B,EAAE,CAAA;SACrD;KACF;IAED,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,sBAAsB,CAAC,SAAS,EAAE,CAAC,CAAA;IAC5E,IAAI,MAAqC,CAAA;IACzC,IAAI,OAAe,CAAA;IACnB,IAAI,MAAM,KAAK,SAAS,EAAE;QACxB,MAAM,GAAG,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAA;KAC/C;SAAM,IAAI,MAAM,KAAK,SAAS,EAAE;QAC/B,MAAM,GAAG,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAA;KAC/C;SAAM,IAAI,6BAAa,CAAC,KAAK,CAAC,EAAE;QAC/B,OAAO,GAAG,kCAAM,CAAC,KAAK,CAAC,CAAA;QACvB,MAAM,GAAG,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAA;KAC9C;SAAM;QACL,MAAM,GAAG,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAA;KAC9C;IAED,OAAO;QACL,QAAQ;QACR,MAAM;QACN,OAAO;QACP,aAAa,EAAE,KAAK;KACrB,CAAA;AACH,CAAC;AA9DD,kBA8DC;AAED,kBAAe,EAAE,GAAG,EAAE,CAAA","sourcesContent":["import _ from 'lodash'\nimport Time from '../time'\nimport UserCodeRunner from '../user_code_runner'\nimport * as messages from '@cucumber/messages'\nimport { format } from 'assertion-error-formatter'\nimport { ITestCaseHookParameter } from '../support_code_library_builder/types'\nimport { IDefinition, IGetInvocationDataResponse } from '../models/definition'\nimport {\n  doesHaveValue,\n  doesNotHaveValue,\n  valueOrDefault,\n} from '../value_checker'\n\nconst { beginTiming, endTiming } = Time\n\nexport interface IRunOptions {\n  defaultTimeout: number\n  hookParameter: ITestCaseHookParameter\n  step: messages.PickleStep\n  stepDefinition: IDefinition\n  world: any\n}\n\nexport async function run({\n  defaultTimeout,\n  hookParameter,\n  step,\n  stepDefinition,\n  world,\n}: IRunOptions): Promise<messages.TestStepResult> {\n  beginTiming()\n  let error: any, result: any, invocationData: IGetInvocationDataResponse\n\n  try {\n    invocationData = await stepDefinition.getInvocationParameters({\n      hookParameter,\n      step,\n      world,\n    })\n  } catch (err) {\n    error = err\n  }\n\n  if (doesNotHaveValue(error)) {\n    const timeoutInMilliseconds = valueOrDefault(\n      stepDefinition.options.timeout,\n      defaultTimeout\n    )\n\n    if (\n      _.includes(invocationData.validCodeLengths, stepDefinition.code.length)\n    ) {\n      const data = await UserCodeRunner.run({\n        argsArray: invocationData.parameters,\n        fn: stepDefinition.code,\n        thisArg: world,\n        timeoutInMilliseconds,\n      })\n      error = data.error\n      result = data.result\n    } else {\n      error = invocationData.getInvalidCodeLengthMessage()\n    }\n  }\n\n  const duration = messages.TimeConversion.millisecondsToDuration(endTiming())\n  let status: messages.TestStepResultStatus\n  let message: string\n  if (result === 'skipped') {\n    status = messages.TestStepResultStatus.SKIPPED\n  } else if (result === 'pending') {\n    status = messages.TestStepResultStatus.PENDING\n  } else if (doesHaveValue(error)) {\n    message = format(error)\n    status = messages.TestStepResultStatus.FAILED\n  } else {\n    status = messages.TestStepResultStatus.PASSED\n  }\n\n  return {\n    duration,\n    status,\n    message,\n    willBeRetried: false,\n  }\n}\n\nexport default { run }\n"]}