{"version":3,"file":"stopwatch.js","sourceRoot":"","sources":["../../src/runtime/stopwatch.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,6DAA8C;AAC9C,yCAAoE;AAUpE,MAAa,oBAAoB;IAAjC;QACmB,cAAS,GAAc,qBAAS,EAAE,CAAA;QAC3C,SAAI,GAAa,IAAI,CAAA;IA4B/B,CAAC;IA1BC,IAAI,CAAC,QAAkB;QACrB,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAA;QACpB,OAAO,IAAI,CAAA;IACb,CAAC;IAED,KAAK;QACH,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;QACtB,OAAO,IAAI,CAAA;IACb,CAAC;IAED,IAAI;QACF,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAA;QACrB,OAAO,IAAI,CAAA;IACb,CAAC;IAED,QAAQ;QACN,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAA;QACzC,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;YACtB,OAAO,oBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC,CAAA;SACrD;QACD,OAAO,OAAO,CAAA;IAChB,CAAC;IAED,SAAS;QACP,OAAO,QAAQ,CAAC,cAAc,CAAC,iCAAiC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAA;IAC9E,CAAC;CACF;AA9BD,oDA8BC;AAED,MAAa,2BAA2B;IAAxC;QACU,UAAK,GAAG,CAAC,CAAA;QACT,SAAI,GAAa,IAAI,CAAA;IAsC/B,CAAC;IApCC,IAAI,CAAC,QAAkB;QACrB,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAA;QACpB,OAAO,IAAI,CAAA;IACb,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAA;IACb,CAAC;IAED,IAAI;QACF,OAAO,IAAI,CAAA;IACb,CAAC;IAED,QAAQ;QACN,MAAM,OAAO,GAAG,oBAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,CAAA;QAC9C,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;YACtB,OAAO,oBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC,CAAA;SACrD;QACD,OAAO,OAAO,CAAA;IAChB,CAAC;IAED,SAAS;QACP,MAAM,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;QAC9D,IAAI,CAAC,KAAK,EAAE,CAAA;QACZ,OAAO,aAAa,CAAA;IACtB,CAAC;IAED,kFAAkF;IAC1E,kBAAkB,CAAC,QAAkB;QAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAA;QAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,OAAO,CAAC,GAAG,UAAU,CAAC,CAAA;QACrE,OAAO;YACL,OAAO;YACP,KAAK;SACN,CAAA;IACH,CAAC;CACF;AAxCD,kEAwCC","sourcesContent":["import * as messages from '@cucumber/messages'\nimport { stopwatch, Stopwatch, duration, Duration } from 'durations'\n\nexport interface ITestRunStopwatch {\n  from: (duration: Duration) => ITestRunStopwatch\n  start: () => ITestRunStopwatch\n  stop: () => ITestRunStopwatch\n  duration: () => Duration\n  timestamp: () => messages.Timestamp\n}\n\nexport class RealTestRunStopwatch implements ITestRunStopwatch {\n  private readonly stopwatch: Stopwatch = stopwatch()\n  private base: Duration = null\n\n  from(duration: Duration): ITestRunStopwatch {\n    this.base = duration\n    return this\n  }\n\n  start(): ITestRunStopwatch {\n    this.stopwatch.start()\n    return this\n  }\n\n  stop(): ITestRunStopwatch {\n    this.stopwatch.stop()\n    return this\n  }\n\n  duration(): Duration {\n    const current = this.stopwatch.duration()\n    if (this.base !== null) {\n      return duration(this.base.nanos() + current.nanos())\n    }\n    return current\n  }\n\n  timestamp(): messages.Timestamp {\n    return messages.TimeConversion.millisecondsSinceEpochToTimestamp(Date.now())\n  }\n}\n\nexport class PredictableTestRunStopwatch implements ITestRunStopwatch {\n  private count = 0\n  private base: Duration = null\n\n  from(duration: Duration): ITestRunStopwatch {\n    this.base = duration\n    return this\n  }\n\n  start(): ITestRunStopwatch {\n    return this\n  }\n\n  stop(): ITestRunStopwatch {\n    return this\n  }\n\n  duration(): Duration {\n    const current = duration(this.count * 1000000)\n    if (this.base !== null) {\n      return duration(this.base.nanos() + current.nanos())\n    }\n    return current\n  }\n\n  timestamp(): messages.Timestamp {\n    const fakeTimestamp = this.convertToTimestamp(this.duration())\n    this.count++\n    return fakeTimestamp\n  }\n\n  // TODO: Remove. It's impossible to convert timestamps to durations and vice-versa\n  private convertToTimestamp(duration: Duration): messages.Timestamp {\n    const seconds = Math.floor(duration.seconds())\n    const nanos = Math.floor((duration.seconds() - seconds) * 1000000000)\n    return {\n      seconds,\n      nanos,\n    }\n  }\n}\n"]}