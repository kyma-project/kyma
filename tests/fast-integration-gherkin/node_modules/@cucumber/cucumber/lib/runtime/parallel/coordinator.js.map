{"version":3,"file":"coordinator.js","sourceRoot":"","sources":["../../../src/runtime/parallel/coordinator.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport { ChildProcess, fork } from 'child_process'\nimport path from 'path'\nimport { retriesForPickle } from '../helpers'\nimport * as messages from '@cucumber/messages'\nimport { EventEmitter } from 'events'\nimport { EventDataCollector } from '../../formatter/helpers'\nimport { IRuntimeOptions } from '..'\nimport { ISupportCodeLibrary } from '../../support_code_library_builder/types'\nimport { ICoordinatorReport, IWorkerCommand } from './command_types'\nimport { doesHaveValue } from '../../value_checker'\nimport {\n  ITestRunStopwatch,\n  PredictableTestRunStopwatch,\n  RealTestRunStopwatch,\n} from '../stopwatch'\nimport { assembleTestCases, IAssembledTestCases } from '../assemble_test_cases'\nimport { IdGenerator } from '@cucumber/messages'\n\nconst runWorkerPath = path.resolve(__dirname, 'run_worker.js')\n\nexport interface INewCoordinatorOptions {\n  cwd: string\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  options: IRuntimeOptions\n  newId: IdGenerator.NewId\n  pickleIds: string[]\n  supportCodeLibrary: ISupportCodeLibrary\n  supportCodePaths: string[]\n  supportCodeRequiredModules: string[]\n}\n\ninterface IWorker {\n  closed: boolean\n  process: ChildProcess\n}\n\nexport default class Coordinator {\n  private readonly cwd: string\n  private readonly eventBroadcaster: EventEmitter\n  private readonly eventDataCollector: EventDataCollector\n  private readonly stopwatch: ITestRunStopwatch\n  private onFinish: (success: boolean) => void\n  private nextPickleIdIndex: number\n  private readonly options: IRuntimeOptions\n  private readonly newId: IdGenerator.NewId\n  private readonly pickleIds: string[]\n  private assembledTestCases: IAssembledTestCases\n  private workers: Record<string, IWorker>\n  private readonly supportCodeLibrary: ISupportCodeLibrary\n  private readonly supportCodePaths: string[]\n  private readonly supportCodeRequiredModules: string[]\n  private success: boolean\n\n  constructor({\n    cwd,\n    eventBroadcaster,\n    eventDataCollector,\n    pickleIds,\n    options,\n    newId,\n    supportCodeLibrary,\n    supportCodePaths,\n    supportCodeRequiredModules,\n  }: INewCoordinatorOptions) {\n    this.cwd = cwd\n    this.eventBroadcaster = eventBroadcaster\n    this.eventDataCollector = eventDataCollector\n    this.stopwatch = options.predictableIds\n      ? new PredictableTestRunStopwatch()\n      : new RealTestRunStopwatch()\n    this.options = options\n    this.newId = newId\n    this.supportCodeLibrary = supportCodeLibrary\n    this.supportCodePaths = supportCodePaths\n    this.supportCodeRequiredModules = supportCodeRequiredModules\n    this.pickleIds = pickleIds\n    this.nextPickleIdIndex = 0\n    this.success = true\n    this.workers = {}\n  }\n\n  parseWorkerMessage(worker: IWorker, message: ICoordinatorReport): void {\n    if (message.ready) {\n      this.giveWork(worker)\n    } else if (doesHaveValue(message.jsonEnvelope)) {\n      const envelope = messages.parseEnvelope(message.jsonEnvelope)\n      this.eventBroadcaster.emit('envelope', envelope)\n      if (doesHaveValue(envelope.testCaseFinished)) {\n        this.parseTestCaseResult(envelope.testCaseFinished)\n      }\n    } else {\n      throw new Error(\n        `Unexpected message from worker: ${JSON.stringify(message)}`\n      )\n    }\n  }\n\n  startWorker(id: string, total: number): void {\n    const workerProcess = fork(runWorkerPath, [], {\n      cwd: this.cwd,\n      env: _.assign({}, process.env, {\n        CUCUMBER_PARALLEL: 'true',\n        CUCUMBER_TOTAL_WORKERS: total,\n        CUCUMBER_WORKER_ID: id,\n      }),\n      stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n    })\n    const worker = { closed: false, process: workerProcess }\n    this.workers[id] = worker\n    worker.process.on('message', (message: ICoordinatorReport) => {\n      this.parseWorkerMessage(worker, message)\n    })\n    worker.process.on('close', (exitCode) => {\n      worker.closed = true\n      this.onWorkerProcessClose(exitCode)\n    })\n    const initializeCommand: IWorkerCommand = {\n      initialize: {\n        filterStacktraces: this.options.filterStacktraces,\n        supportCodePaths: this.supportCodePaths,\n        supportCodeRequiredModules: this.supportCodeRequiredModules,\n        supportCodeIds: {\n          stepDefinitionIds: this.supportCodeLibrary.stepDefinitions.map(\n            (s) => s.id\n          ),\n          beforeTestCaseHookDefinitionIds:\n            this.supportCodeLibrary.beforeTestCaseHookDefinitions.map(\n              (h) => h.id\n            ),\n          afterTestCaseHookDefinitionIds:\n            this.supportCodeLibrary.afterTestCaseHookDefinitions.map(\n              (h) => h.id\n            ),\n        },\n        options: this.options,\n      },\n    }\n    worker.process.send(initializeCommand)\n  }\n\n  onWorkerProcessClose(exitCode: number): void {\n    const success = exitCode === 0\n    if (!success) {\n      this.success = false\n    }\n    if (_.every(this.workers, 'closed')) {\n      const envelope: messages.Envelope = {\n        testRunFinished: {\n          timestamp: this.stopwatch.timestamp(),\n          success,\n        },\n      }\n      this.eventBroadcaster.emit('envelope', envelope)\n      this.onFinish(this.success)\n    }\n  }\n\n  parseTestCaseResult(testCaseFinished: messages.TestCaseFinished): void {\n    const { worstTestStepResult } = this.eventDataCollector.getTestCaseAttempt(\n      testCaseFinished.testCaseStartedId\n    )\n    if (\n      !worstTestStepResult.willBeRetried &&\n      this.shouldCauseFailure(worstTestStepResult.status)\n    ) {\n      this.success = false\n    }\n  }\n\n  async run(numberOfWorkers: number): Promise<boolean> {\n    const envelope: messages.Envelope = {\n      testRunStarted: {\n        timestamp: this.stopwatch.timestamp(),\n      },\n    }\n    this.eventBroadcaster.emit('envelope', envelope)\n    this.stopwatch.start()\n    this.assembledTestCases = await assembleTestCases({\n      eventBroadcaster: this.eventBroadcaster,\n      newId: this.newId,\n      pickles: this.pickleIds.map((pickleId) =>\n        this.eventDataCollector.getPickle(pickleId)\n      ),\n      supportCodeLibrary: this.supportCodeLibrary,\n    })\n    return await new Promise<boolean>((resolve) => {\n      _.times(numberOfWorkers, (id) =>\n        this.startWorker(id.toString(), numberOfWorkers)\n      )\n      this.onFinish = resolve\n    })\n  }\n\n  giveWork(worker: IWorker): void {\n    if (this.nextPickleIdIndex === this.pickleIds.length) {\n      const finalizeCommand: IWorkerCommand = { finalize: true }\n      worker.process.send(finalizeCommand)\n      return\n    }\n    const pickleId = this.pickleIds[this.nextPickleIdIndex]\n    this.nextPickleIdIndex += 1\n    const pickle = this.eventDataCollector.getPickle(pickleId)\n    const testCase = this.assembledTestCases[pickleId]\n    const gherkinDocument = this.eventDataCollector.getGherkinDocument(\n      pickle.uri\n    )\n    const retries = retriesForPickle(pickle, this.options)\n    const skip = this.options.dryRun || (this.options.failFast && !this.success)\n    const runCommand: IWorkerCommand = {\n      run: {\n        retries,\n        skip,\n        elapsed: this.stopwatch.duration().nanos(),\n        pickle,\n        testCase,\n        gherkinDocument,\n      },\n    }\n    worker.process.send(runCommand)\n  }\n\n  shouldCauseFailure(status: messages.TestStepResultStatus): boolean {\n    return (\n      _.includes(['AMBIGUOUS', 'FAILED', 'UNDEFINED'], status) ||\n      (status === 'PENDING' && this.options.strict)\n    )\n  }\n}\n"]}