{"version":3,"file":"worker.js","sourceRoot":"","sources":["../../../src/runtime/parallel/worker.ts"],"names":[],"mappings":"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","sourcesContent":["import { formatLocation } from '../../formatter/helpers'\nimport {\n  ICoordinatorReport,\n  IWorkerCommand,\n  IWorkerCommandInitialize,\n  IWorkerCommandRun,\n} from './command_types'\nimport { EventEmitter } from 'events'\nimport bluebird from 'bluebird'\nimport StackTraceFilter from '../../stack_trace_filter'\nimport supportCodeLibraryBuilder from '../../support_code_library_builder'\nimport TestCaseRunner from '../test_case_runner'\nimport UserCodeRunner from '../../user_code_runner'\nimport { IdGenerator } from '@cucumber/messages'\nimport * as messages from '@cucumber/messages'\nimport TestRunHookDefinition from '../../models/test_run_hook_definition'\nimport { ISupportCodeLibrary } from '../../support_code_library_builder/types'\nimport { doesHaveValue, valueOrDefault } from '../../value_checker'\nimport { IRuntimeOptions } from '../index'\nimport { PredictableTestRunStopwatch, RealTestRunStopwatch } from '../stopwatch'\nimport { duration } from 'durations'\n\nconst { uuid } = IdGenerator\n\ntype IExitFunction = (exitCode: number, error?: Error, message?: string) => void\ntype IMessageSender = (command: ICoordinatorReport) => void\n\nexport default class Worker {\n  private readonly cwd: string\n  private readonly exit: IExitFunction\n\n  private readonly id: string\n  private readonly eventBroadcaster: EventEmitter\n  private filterStacktraces: boolean\n  private readonly newId: IdGenerator.NewId\n  private readonly sendMessage: IMessageSender\n  private readonly stackTraceFilter: StackTraceFilter\n  private supportCodeLibrary: ISupportCodeLibrary\n  private worldParameters: any\n  private options: IRuntimeOptions\n\n  constructor({\n    cwd,\n    exit,\n    id,\n    sendMessage,\n  }: {\n    cwd: string\n    exit: IExitFunction\n    id: string\n    sendMessage: IMessageSender\n  }) {\n    this.id = id\n    this.newId = uuid()\n    this.cwd = cwd\n    this.exit = exit\n    this.sendMessage = sendMessage\n    this.eventBroadcaster = new EventEmitter()\n    this.stackTraceFilter = new StackTraceFilter()\n    this.eventBroadcaster.on('envelope', (envelope: messages.Envelope) => {\n      this.sendMessage({\n        jsonEnvelope: JSON.stringify(envelope),\n      })\n    })\n  }\n\n  async initialize({\n    filterStacktraces,\n    supportCodeRequiredModules,\n    supportCodePaths,\n    supportCodeIds,\n    options,\n  }: IWorkerCommandInitialize): Promise<void> {\n    supportCodeRequiredModules.map((module) => require(module))\n    supportCodeLibraryBuilder.reset(this.cwd, this.newId)\n    supportCodePaths.forEach((codePath) => require(codePath))\n    this.supportCodeLibrary = supportCodeLibraryBuilder.finalize(supportCodeIds)\n\n    this.worldParameters = options.worldParameters\n    this.options = options\n    this.filterStacktraces = filterStacktraces\n    if (this.filterStacktraces) {\n      this.stackTraceFilter.filter()\n    }\n    await this.runTestRunHooks(\n      this.supportCodeLibrary.beforeTestRunHookDefinitions,\n      'a BeforeAll'\n    )\n    this.sendMessage({ ready: true })\n  }\n\n  async finalize(): Promise<void> {\n    await this.runTestRunHooks(\n      this.supportCodeLibrary.afterTestRunHookDefinitions,\n      'an AfterAll'\n    )\n    if (this.filterStacktraces) {\n      this.stackTraceFilter.unfilter()\n    }\n    this.exit(0)\n  }\n\n  async receiveMessage(message: IWorkerCommand): Promise<void> {\n    if (doesHaveValue(message.initialize)) {\n      await this.initialize(message.initialize)\n    } else if (message.finalize) {\n      await this.finalize()\n    } else if (doesHaveValue(message.run)) {\n      await this.runTestCase(message.run)\n    }\n  }\n\n  async runTestCase({\n    gherkinDocument,\n    pickle,\n    testCase,\n    elapsed,\n    retries,\n    skip,\n  }: IWorkerCommandRun): Promise<void> {\n    const stopwatch = this.options.predictableIds\n      ? new PredictableTestRunStopwatch()\n      : new RealTestRunStopwatch()\n    stopwatch.from(duration(elapsed))\n    const testCaseRunner = new TestCaseRunner({\n      eventBroadcaster: this.eventBroadcaster,\n      stopwatch,\n      gherkinDocument,\n      newId: this.newId,\n      pickle,\n      testCase,\n      retries,\n      skip,\n      supportCodeLibrary: this.supportCodeLibrary,\n      worldParameters: this.worldParameters,\n    })\n    await testCaseRunner.run()\n    this.sendMessage({ ready: true })\n  }\n\n  async runTestRunHooks(\n    testRunHookDefinitions: TestRunHookDefinition[],\n    name: string\n  ): Promise<void> {\n    if (this.options.dryRun) {\n      return\n    }\n    await bluebird.each(testRunHookDefinitions, async (hookDefinition) => {\n      const { error } = await UserCodeRunner.run({\n        argsArray: [],\n        fn: hookDefinition.code,\n        thisArg: null,\n        timeoutInMilliseconds: valueOrDefault(\n          hookDefinition.options.timeout,\n          this.supportCodeLibrary.defaultTimeout\n        ),\n      })\n      if (doesHaveValue(error)) {\n        const location = formatLocation(hookDefinition)\n        this.exit(\n          1,\n          error,\n          `${name} hook errored on worker ${this.id}, process exiting: ${location}`\n        )\n      }\n    })\n  }\n}\n"]}