{"version":3,"file":"test_case_runner.js","sourceRoot":"","sources":["../../src/runtime/test_case_runner.ts"],"names":[],"mappings":"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","sourcesContent":["import { clone } from 'lodash'\nimport { getAmbiguousStepException } from './helpers'\nimport AttachmentManager from './attachment_manager'\nimport StepRunner from './step_runner'\nimport { IdGenerator, getWorstTestStepResult } from '@cucumber/messages'\nimport * as messages from '@cucumber/messages'\nimport { EventEmitter } from 'events'\nimport {\n  ISupportCodeLibrary,\n  ITestCaseHookParameter,\n  ITestStepHookParameter,\n} from '../support_code_library_builder/types'\nimport TestCaseHookDefinition from '../models/test_case_hook_definition'\nimport TestStepHookDefinition from '../models/test_step_hook_definition'\nimport { IDefinition } from '../models/definition'\nimport { doesHaveValue, doesNotHaveValue } from '../value_checker'\nimport { ITestRunStopwatch } from './stopwatch'\nimport StepDefinition from '../models/step_definition'\n\nexport interface INewTestCaseRunnerOptions {\n  eventBroadcaster: EventEmitter\n  stopwatch: ITestRunStopwatch\n  gherkinDocument: messages.GherkinDocument\n  newId: IdGenerator.NewId\n  pickle: messages.Pickle\n  testCase: messages.TestCase\n  retries: number\n  skip: boolean\n  supportCodeLibrary: ISupportCodeLibrary\n  worldParameters: any\n}\n\nexport default class TestCaseRunner {\n  private readonly attachmentManager: AttachmentManager\n  private currentTestCaseStartedId: string\n  private currentTestStepId: string\n  private readonly eventBroadcaster: EventEmitter\n  private readonly stopwatch: ITestRunStopwatch\n  private readonly gherkinDocument: messages.GherkinDocument\n  private readonly newId: IdGenerator.NewId\n  private readonly pickle: messages.Pickle\n  private readonly testCase: messages.TestCase\n  private readonly maxAttempts: number\n  private readonly skip: boolean\n  private readonly supportCodeLibrary: ISupportCodeLibrary\n  private testStepResults: messages.TestStepResult[]\n  private world: any\n  private readonly worldParameters: any\n\n  constructor({\n    eventBroadcaster,\n    stopwatch,\n    gherkinDocument,\n    newId,\n    pickle,\n    testCase,\n    retries = 0,\n    skip,\n    supportCodeLibrary,\n    worldParameters,\n  }: INewTestCaseRunnerOptions) {\n    this.attachmentManager = new AttachmentManager(({ data, media }) => {\n      if (doesNotHaveValue(this.currentTestStepId)) {\n        throw new Error(\n          'Cannot attach when a step/hook is not running. Ensure your step/hook waits for the attach to finish.'\n        )\n      }\n      const attachment: messages.Envelope = {\n        attachment: {\n          body: data,\n          contentEncoding: media.encoding,\n          mediaType: media.contentType,\n          testCaseStartedId: this.currentTestCaseStartedId,\n          testStepId: this.currentTestStepId,\n        },\n      }\n      this.eventBroadcaster.emit('envelope', attachment)\n    })\n    this.eventBroadcaster = eventBroadcaster\n    this.stopwatch = stopwatch\n    this.gherkinDocument = gherkinDocument\n    this.maxAttempts = 1 + (skip ? 0 : retries)\n    this.newId = newId\n    this.pickle = pickle\n    this.testCase = testCase\n    this.skip = skip\n    this.supportCodeLibrary = supportCodeLibrary\n    this.worldParameters = worldParameters\n    this.resetTestProgressData()\n  }\n\n  resetTestProgressData(): void {\n    this.world = new this.supportCodeLibrary.World({\n      attach: this.attachmentManager.create.bind(this.attachmentManager),\n      log: this.attachmentManager.log.bind(this.attachmentManager),\n      parameters: this.worldParameters,\n    })\n    this.testStepResults = []\n  }\n\n  getBeforeStepHookDefinitions(): TestStepHookDefinition[] {\n    return this.supportCodeLibrary.beforeTestStepHookDefinitions.filter(\n      (hookDefinition) => hookDefinition.appliesToTestCase(this.pickle)\n    )\n  }\n\n  getAfterStepHookDefinitions(): TestStepHookDefinition[] {\n    return clone(this.supportCodeLibrary.afterTestStepHookDefinitions)\n      .reverse()\n      .filter((hookDefinition) => hookDefinition.appliesToTestCase(this.pickle))\n  }\n\n  getWorstStepResult(): messages.TestStepResult {\n    if (this.testStepResults.length === 0) {\n      return {\n        status: this.skip\n          ? messages.TestStepResultStatus.SKIPPED\n          : messages.TestStepResultStatus.PASSED,\n        willBeRetried: false,\n        duration: messages.TimeConversion.millisecondsToDuration(0),\n      }\n    }\n    return getWorstTestStepResult(this.testStepResults)\n  }\n\n  async invokeStep(\n    step: messages.PickleStep,\n    stepDefinition: IDefinition,\n    hookParameter?: any\n  ): Promise<messages.TestStepResult> {\n    return await StepRunner.run({\n      defaultTimeout: this.supportCodeLibrary.defaultTimeout,\n      hookParameter,\n      step,\n      stepDefinition,\n      world: this.world,\n    })\n  }\n\n  isSkippingSteps(): boolean {\n    return (\n      this.getWorstStepResult().status !== messages.TestStepResultStatus.PASSED\n    )\n  }\n\n  shouldSkipHook(isBeforeHook: boolean): boolean {\n    return this.skip || (this.isSkippingSteps() && isBeforeHook)\n  }\n\n  async aroundTestStep(\n    testStepId: string,\n    attempt: number,\n    runStepFn: () => Promise<messages.TestStepResult>\n  ): Promise<void> {\n    const testStepStarted: messages.Envelope = {\n      testStepStarted: {\n        testCaseStartedId: this.currentTestCaseStartedId,\n        testStepId,\n        timestamp: this.stopwatch.timestamp(),\n      },\n    }\n    this.eventBroadcaster.emit('envelope', testStepStarted)\n    this.currentTestStepId = testStepId\n    const testStepResult = await runStepFn()\n    this.currentTestStepId = null\n    this.testStepResults.push(testStepResult)\n    if (\n      testStepResult.status === messages.TestStepResultStatus.FAILED &&\n      attempt + 1 < this.maxAttempts\n    ) {\n      /*\n      TODO dont rely on `testStepResult.willBeRetried`, it will be moved or removed\n      see https://github.com/cucumber/cucumber/issues/902\n       */\n      testStepResult.willBeRetried = true\n    }\n    const testStepFinished: messages.Envelope = {\n      testStepFinished: {\n        testCaseStartedId: this.currentTestCaseStartedId,\n        testStepId,\n        testStepResult,\n        timestamp: this.stopwatch.timestamp(),\n      },\n    }\n    this.eventBroadcaster.emit('envelope', testStepFinished)\n  }\n\n  async run(): Promise<messages.TestStepResultStatus> {\n    for (let attempt = 0; attempt < this.maxAttempts; attempt++) {\n      this.currentTestCaseStartedId = this.newId()\n      const testCaseStarted: messages.Envelope = {\n        testCaseStarted: {\n          attempt,\n          testCaseId: this.testCase.id,\n          id: this.currentTestCaseStartedId,\n          timestamp: this.stopwatch.timestamp(),\n        },\n      }\n      this.eventBroadcaster.emit('envelope', testCaseStarted)\n      // used to determine whether a hook is a Before or After\n      let didWeRunStepsYet = false\n      for (const testStep of this.testCase.testSteps) {\n        await this.aroundTestStep(testStep.id, attempt, async () => {\n          if (doesHaveValue(testStep.hookId)) {\n            const hookParameter: ITestCaseHookParameter = {\n              gherkinDocument: this.gherkinDocument,\n              pickle: this.pickle,\n              testCaseStartedId: this.currentTestCaseStartedId,\n            }\n            if (didWeRunStepsYet) {\n              hookParameter.result = this.getWorstStepResult()\n            }\n            return await this.runHook(\n              findHookDefinition(testStep.hookId, this.supportCodeLibrary),\n              hookParameter,\n              !didWeRunStepsYet\n            )\n          } else {\n            const pickleStep = this.pickle.steps.find(\n              (pickleStep) => pickleStep.id === testStep.pickleStepId\n            )\n            const testStepResult = await this.runStep(pickleStep, testStep)\n            didWeRunStepsYet = true\n            return testStepResult\n          }\n        })\n      }\n      const testCaseFinished: messages.Envelope = {\n        testCaseFinished: {\n          testCaseStartedId: this.currentTestCaseStartedId,\n          timestamp: this.stopwatch.timestamp(),\n        },\n      }\n      this.eventBroadcaster.emit('envelope', testCaseFinished)\n      if (!this.getWorstStepResult().willBeRetried) {\n        break\n      }\n      this.resetTestProgressData()\n    }\n    return this.getWorstStepResult().status\n  }\n\n  async runHook(\n    hookDefinition: TestCaseHookDefinition,\n    hookParameter: ITestCaseHookParameter,\n    isBeforeHook: boolean\n  ): Promise<messages.TestStepResult> {\n    if (this.shouldSkipHook(isBeforeHook)) {\n      return {\n        status: messages.TestStepResultStatus.SKIPPED,\n        duration: messages.TimeConversion.millisecondsToDuration(0),\n        willBeRetried: false,\n      }\n    }\n    return await this.invokeStep(null, hookDefinition, hookParameter)\n  }\n\n  async runStepHooks(\n    stepHooks: TestStepHookDefinition[],\n    stepResult?: messages.TestStepResult\n  ): Promise<messages.TestStepResult[]> {\n    const stepHooksResult = []\n    const hookParameter: ITestStepHookParameter = {\n      gherkinDocument: this.gherkinDocument,\n      pickle: this.pickle,\n      testCaseStartedId: this.currentTestCaseStartedId,\n      testStepId: this.currentTestStepId,\n      result: stepResult,\n    }\n    for (const stepHookDefinition of stepHooks) {\n      stepHooksResult.push(\n        await this.invokeStep(null, stepHookDefinition, hookParameter)\n      )\n    }\n    return stepHooksResult\n  }\n\n  async runStep(\n    pickleStep: messages.PickleStep,\n    testStep: messages.TestStep\n  ): Promise<messages.TestStepResult> {\n    const stepDefinitions = testStep.stepDefinitionIds.map(\n      (stepDefinitionId) => {\n        return findStepDefinition(stepDefinitionId, this.supportCodeLibrary)\n      }\n    )\n    if (stepDefinitions.length === 0) {\n      return {\n        status: messages.TestStepResultStatus.UNDEFINED,\n        duration: messages.TimeConversion.millisecondsToDuration(0),\n        willBeRetried: false,\n      }\n    } else if (stepDefinitions.length > 1) {\n      return {\n        message: getAmbiguousStepException(stepDefinitions),\n        status: messages.TestStepResultStatus.AMBIGUOUS,\n        duration: messages.TimeConversion.millisecondsToDuration(0),\n        willBeRetried: false,\n      }\n    } else if (this.isSkippingSteps()) {\n      return {\n        status: messages.TestStepResultStatus.SKIPPED,\n        duration: messages.TimeConversion.millisecondsToDuration(0),\n        willBeRetried: false,\n      }\n    }\n\n    let stepResult\n    let stepResults = await this.runStepHooks(\n      this.getBeforeStepHookDefinitions()\n    )\n    if (\n      getWorstTestStepResult(stepResults).status !==\n      messages.TestStepResultStatus.FAILED\n    ) {\n      stepResult = await this.invokeStep(pickleStep, stepDefinitions[0])\n      stepResults.push(stepResult)\n    }\n    const afterStepHookResults = await this.runStepHooks(\n      this.getAfterStepHookDefinitions(),\n      stepResult\n    )\n    stepResults = stepResults.concat(afterStepHookResults)\n\n    const finalStepResult = getWorstTestStepResult(stepResults)\n    let finalDuration = messages.TimeConversion.millisecondsToDuration(0)\n    for (const result of stepResults) {\n      finalDuration = messages.TimeConversion.addDurations(\n        finalDuration,\n        result.duration\n      )\n    }\n    finalStepResult.duration = finalDuration\n    return finalStepResult\n  }\n}\n\nfunction findHookDefinition(\n  id: string,\n  supportCodeLibrary: ISupportCodeLibrary\n): TestCaseHookDefinition {\n  return [\n    ...supportCodeLibrary.beforeTestCaseHookDefinitions,\n    ...supportCodeLibrary.afterTestCaseHookDefinitions,\n  ].find((definition) => definition.id === id)\n}\n\nfunction findStepDefinition(\n  id: string,\n  supportCodeLibrary: ISupportCodeLibrary\n): StepDefinition {\n  return supportCodeLibrary.stepDefinitions.find(\n    (definition) => definition.id === id\n  )\n}\n"]}