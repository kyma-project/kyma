{"version":3,"file":"polyfill.js","sourceRoot":"","sources":["polyfill.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;EAcE;AAEF;;;;;;GAMG;AAEH,uCAAwC;AACxC,mDAAoD;AAGpD,SAAS,WAAW;IAChB,MAAM,EAAE,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;IAC3B,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,CAAE,CAAC;IACxC,IAAI,KAAK,CAAC,OAAO,EAAE;QACf,OAAO,UAAU,CAAC;KACrB;IACD,OAAO,cAAc,CAAC;AAC1B,CAAC;AAED,iBAAS,WAAW,CAAC","sourcesContent":["/*!\r\nCopyright 2019 Ron Buckton\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\n/*\r\n require('foo').getPolyfill or require('foo/polyfill') is a function that when invoked, will return\r\n the most compliant and performant function that it can - if a native version is available, and does\r\n not violate the spec, then the native function will be returned - otherwise, either the implementation,\r\n or a custom, wrapped version of the native function, will be returned. This is also the result that\r\n will be used as the default export.\r\n */\r\n\r\nimport nativeExec = require(\"./native\");\r\nimport implementation = require(\"./implementation\");\r\nimport * as types from \"./types\";\r\n\r\nfunction getPolyfill(): (this: RegExp, string: string) => types.RegExpExecArray | null {\r\n    const re = new RegExp(\"a\");\r\n    const match = nativeExec.call(re, \"a\")!;\r\n    if (match.indices) {\r\n        return nativeExec;\r\n    }\r\n    return implementation;\r\n}\r\n\r\nexport = getPolyfill;"]}