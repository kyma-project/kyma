package utils

import (
	"fmt"
	"log"

	"k8s.io/apimachinery/pkg/util/intstr"
	"k8s.io/client-go/kubernetes"

	kubelessV1 "github.com/kubeless/kubeless/pkg/apis/kubeless/v1beta1"
	kubeless "github.com/kubeless/kubeless/pkg/client/clientset/versioned"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/tools/clientcmd"
)

type E2EClient interface {
	CreateFunction(namespace, functionName string) (*kubelessV1.Function, error)
	GetFunctionPod(namespace, functionName string) (v1.Pod, error)
	// CreateMapping(appName string) (*acV1.ApplicationMapping, error)
	// DeleteMapping(appName string, options *metav1.DeleteOptions) error
	// CreateEventActivation(appName string) (*acV1.EventActivation, error)
	// DeleteEventActivation(appName string, options *metav1.DeleteOptions) error
	// CreateSubscription(appName string) (*subscriptionV1.Subscription, error)
	// DeleteSubscription(appName string, options *metav1.DeleteOptions) error
}

type e2eClient struct {
	
// }

// func (c *eventingClient) CreateEventActivation(appName string) (*acV1.EventActivation, error) {
// 	eaSpec := acV1.EventActivationSpec{
// 		DisplayName: "Commerce-events",
// 		SourceID:    appName,
// 	}

// 	ea := &acV1.EventActivation{
// 		TypeMeta:   metav1.TypeMeta{Kind: "EventActivation", APIVersion: acV1.SchemeGroupVersion.String()},
// 		ObjectMeta: metav1.ObjectMeta{Name: appName, Namespace: c.namespace},

// 		Spec: eaSpec,
// 	}

// 	return c.appConnClientSet.ApplicationconnectorV1alpha1().EventActivations(c.namespace).Create(ea)
// }

// func (c *eventingClient) DeleteEventActivation(appName string, options *metav1.DeleteOptions) error {
// 	return c.appConnClientSet.ApplicationconnectorV1alpha1().EventActivations(c.namespace).Delete(appName, options)
// }

// func (c *eventingClient) CreateSubscription(appName string) (*subscriptionV1.Subscription, error) {
// 	subSpec := subscriptionV1.SubscriptionSpec{
// 		Endpoint:                      "http://e2e-lambda.production:8080",
// 		IncludeSubscriptionNameHeader: true,
// 		MaxInflight:                   400,
// 		PushRequestTimeoutMS:          2000,
// 		EventType:                     "order.created",
// 		EventTypeVersion:              "v1",
// 		SourceID:                      appName,
// 	}

// 	sub := &subscriptionV1.Subscription{
// 		TypeMeta:   metav1.TypeMeta{Kind: "Subscription", APIVersion: subscriptionV1.SchemeGroupVersion.String()},
// 		ObjectMeta: metav1.ObjectMeta{Name: appName, Namespace: c.namespace, Labels: map[string]string{"Function": appName}},

// 		SubscriptionSpec: subSpec,
// 	}

// 	return c.subscriptionClientSet.EventingV1alpha1().Subscriptions(c.namespace).Create(sub)
// }

// func (c *eventingClient) DeleteSubscription(appName string, options *metav1.DeleteOptions) error {
// 	return c.subscriptionClientSet.EventingV1alpha1().Subscriptions(c.namespace).Delete(appName, options)
// }
