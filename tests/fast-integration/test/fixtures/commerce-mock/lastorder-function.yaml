apiVersion: serverless.kyma-project.io/v1alpha1
kind: Function
metadata:
  labels:
    serverless.kyma-project.io/build-resources-preset: local-dev
    serverless.kyma-project.io/function-resources-preset: S
    serverless.kyma-project.io/replicas-preset: S
  name: lastorder
spec:
  deps: '{ "name": "orders", "version": "1.0.0", "dependencies": {"axios": "^0.19.2"}}'
  maxReplicas: 1
  minReplicas: 1
  source: |
    let lastOrder = {};
    let lastEvent = {};
    let inAppEvent = {};
    const axios = require('axios');
    function sendEvent(type, data, encoding) {
        const event = getEventPayloadAndHeaders(type, data, encoding)
        console.log("Headers:", event.headers)
        console.log("Payload:", event.payload)
        return axios.post("http://eventing-event-publisher-proxy.kyma-system/publish",event.payload,{headers:event.headers})
    }
    function getEventPayloadAndHeaders(type, data, encoding) {
      if(encoding==='binary') {
        return {
          payload: data,
          headers: {
            "ce-source": "/default/sap.kyma/tunas-prow",
            "ce-specversion": "1.0",
            "ce-eventtypeversion": "v1",
            "ce-id": (data.id || "dummyId"),
            "ce-type": type,
            "Content-Type": "application/json"
          }
        }
      }
      // structured encoding
      return {
        payload: {
          source: "/default/sap.kyma/tunas-prow",
          specversion: "1.0",
          eventtypeversion: "v1",
          datacontenttype: "application/json",
          id: (data.id || "dummyId"),
          type,
          data
        },
        headers: {
          "Content-Type": "application/cloudevents+json"
        }
      }
    }
    async function getOrder(code) {
      let url = %%URL%%;
      console.log("URL: %s", url);
      let response = await axios.get(url, { headers: { "X-B3-Sampled": 1 } }).catch((e)=>{
        return e.response.data;
      })
      return response.data;
    }
    function cloudEventHeaders(event) {
      return Object.keys(event).reduce((accumulator, current) => {
        if (current.startsWith('ce-')) {
          accumulator[current] = event[current]
        }
        return accumulator;
      }, {});
    }
    function findEnv(keyPart) {
      for(let key in process.env) {
        if(key.indexOf(keyPart) !== -1) {
          return process.env[key];
        }
      }
      return;
    }
    function dump(obj) {
      console.dir(obj, {depth: null});
    }
    module.exports = {
      main: async function (event, context) {
        if (event.extensions.request.query.send) {
          try {
            const encoding = event.extensions.request.query.encoding
            const response = await sendEvent("sap.kyma.custom.inapp.order.received.v1", event.data, encoding);
            console.log("In-app message sent");
          } catch (e) {
            console.dir(e)
          }
        } else if (event.extensions.request.query.inappevent) {
          return inAppEvent[event.extensions.request.query.inappevent];  
        } else if (event["ce-type"] && event["ce-type"].includes("order.received")){
          console.log("Got in-app event:", event.data);
          inAppEvent[event.data.id] = { ...cloudEventHeaders(event), shipped:true, ...event.data };
        } else if (event["ce-type"] && event["ce-type"].includes("order.created")) {
          console.log("Order created event:", event.data)
          lastEvent = { ...cloudEventHeaders(event), data: event.data };
        }
        if (event.data && event.data.orderCode) {
            lastOrder = await getOrder(event.data.orderCode);
        }
        return {order:lastOrder, event:lastEvent};
      }
    }
---
apiVersion: hydra.ory.sh/v1alpha1
kind: OAuth2Client
metadata:
  name: lastorder
spec:
  grantTypes:
    - "client_credentials"
  scope: "read write"
  secretName: lastorder-oauth
---
apiVersion: gateway.kyma-project.io/v1alpha1
kind: APIRule
metadata:
  name: lastorder
spec:
  gateway: kyma-gateway.kyma-system.svc.cluster.local
  rules:
    - path: /function
      methods: ["GET", "POST"]
      accessStrategies:
        - handler: oauth2_introspection
          config:
            required_scope: ["read"]
    - path: /.*
      methods: ["GET", "POST"]
      accessStrategies:
        - handler: allow
          config: {}
  service:
    host: lastorder
    name: lastorder
    port: 80
