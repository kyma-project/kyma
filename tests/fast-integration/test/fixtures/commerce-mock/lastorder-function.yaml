apiVersion: serverless.kyma-project.io/v1alpha1
kind: Function
metadata:
  labels:
    serverless.kyma-project.io/build-resources-preset: local-dev
    serverless.kyma-project.io/function-resources-preset: S
    serverless.kyma-project.io/replicas-preset: S
  name: lastorder
spec:
  deps: '{ "name": "orders", "version": "1.0.0", "dependencies": {"axios": "^0.19.2"}}'
  runtime: nodejs16
  source: |
    let lastOrder = {};
    let lastEvent = {};
    let inAppEvent = {};
    const axios = require('axios');
    function sendEvent(type, data, encoding, isLegacyEvent) {
        const event = getEventPayloadAndHeaders(type, data, encoding, isLegacyEvent)
        console.log("Headers:", event.headers)
        console.log("Payload:", event.payload)
        let eppUrl = "http://eventing-event-publisher-proxy.kyma-system/publish"
        if (isLegacyEvent) {
          eppUrl = "http://eventing-event-publisher-proxy.kyma-system/inapp/v1/events"
        }
        console.log("forwarding event to EPP: " + eppUrl)
        return axios.post(eppUrl, event.payload, {headers:event.headers})
    }
    function getEventPayloadAndHeaders(type, data, encoding, isLegacyEvent) {
      //// Legacy events
      if(isLegacyEvent) {
        return {
          payload: {
             "event-type": "order.received",
             "event-type-version": "v1",
             "event-time": "2020-09-28T14:47:16.491Z",
             data
           },
          headers: {
            "Content-Type": "application/json"
          }
        }
      }
      //// Cloud events
      // binary encoding
      if(encoding==='binary') {
        return {
          payload: data,
          headers: {
            "ce-source": "%%BEB_NAMESPACE%%",
            "ce-specversion": "1.0",
            "ce-eventtypeversion": "v1",
            "ce-id": (data.id || "dummyId"),
            "ce-type": type,
            "Content-Type": "application/json"
          }
        }
      }
      // structured encoding
      return {
        payload: {
          source: "%%BEB_NAMESPACE%%",
          specversion: "1.0",
          eventtypeversion: "v1",
          datacontenttype: "application/json",
          id: (data.id || "dummyId"),
          type,
          data
        },
        headers: {
          "Content-Type": "application/cloudevents+json"
        }
      }
    }
    async function getOrder(code) {
      let url = %%URL%%;
      console.log("URL: %s", url);
      let response = await axios.get(url, { headers: { "X-B3-Sampled": 1 } }).catch((e)=>{
        return e.response.data;
      })
      return response.data;
    }
    function cloudEventHeaders(event) {
      return Object.keys(event).reduce((accumulator, current) => {
        if (current.startsWith('ce-')) {
          accumulator[current] = event[current]
        }
        return accumulator;
      }, {});
    }
    function findEnv(keyPart) {
      for(let key in process.env) {
        if(key.indexOf(keyPart) !== -1) {
          return process.env[key];
        }
      }
      return;
    }
    function dump(obj) {
      console.dir(obj, {depth: null});
    }
    module.exports = {
      main: async function (event, context) {
        if (event.extensions.request.query.send) {
          try {
            const encoding = event.extensions.request.query.encoding
            const isLegacyEvent = event.extensions.request.query.isLegacyEvent
            let eventType = "sap.kyma.custom.inapp.order.received.v1"
            if (event.data.type) {
              eventType = event.data.type
            }
            const response = await sendEvent(eventType, event.data, encoding, isLegacyEvent);
            console.log(`In-app event (${eventType}) sent. Publisher proxy response: ${response.status}`);
          } catch (e) {
            console.dir(e);
            return { eventPublishError: true, statusText: e.message }
          }
        } else if (event.extensions.request.query.inappevent) {
          return {event:inAppEvent[event.extensions.request.query.inappevent], podName: process.env.HOSTNAME};
        } else if (event["ce-type"] && event["ce-type"].includes("order.received")){
          console.log("Got in-app event:", event.data);
          inAppEvent[event.data.id] = { ...cloudEventHeaders(event), shipped:true, ...event.data, headers:event.extensions.request.headers };
        } else if (event["ce-type"] && (event["ce-type"].includes("order.created") || event.data.save)) {
          console.log("Order created event:", event.data)
          lastEvent = { ...cloudEventHeaders(event), data: event.data, headers:event.extensions.request.headers };
        }
        if (event.data && event.data.orderCode) {
          lastOrder = await getOrder(event.data.orderCode);
        }
        return {order:lastOrder, event:lastEvent, podName: process.env.HOSTNAME};
      }
    }
---
apiVersion: hydra.ory.sh/v1alpha1
kind: OAuth2Client
metadata:
  name: lastorder
spec:
  grantTypes:
    - "client_credentials"
  scope: "read write"
  secretName: lastorder-oauth
---
apiVersion: gateway.kyma-project.io/v1alpha1
kind: APIRule
metadata:
  name: lastorder
spec:
  gateway: kyma-gateway.kyma-system.svc.cluster.local
  rules:
    - path: /function
      methods: ["GET", "POST"]
      accessStrategies:
        - handler: oauth2_introspection
          config:
            required_scope: ["read"]
    - path: /.*
      methods: ["GET", "POST"]
      accessStrategies:
        - handler: allow
          config: {}
  service:
    host: lastorder
    name: lastorder
    port: 80
