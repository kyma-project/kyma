apiVersion: serverless.kyma-project.io/v1alpha1
kind: Function
metadata:
  labels:
    serverless.kyma-project.io/build-resources-preset: local-dev
    serverless.kyma-project.io/function-resources-preset: S
    serverless.kyma-project.io/replicas-preset: S
  name: lastorder
spec:
  deps: '{ "name": "orders", "version": "1.0.0", "dependencies": {"axios": "^0.19.2"}}'
  maxReplicas: 1
  minReplicas: 1
  source: |
    let lastOrder = {};
    let lastEvent = {};
    const axios = require('axios');
    async function getOrder(code) {
      let url = process.env.GATEWAY_URL + "/site/orders/" + code;
      console.log("URL: %s", url);
      let response = await axios.get(url, { headers: { "X-B3-Sampled": 1 } }).catch((e)=>{
        return e.response.data;
      })
      console.log(response.data);
      return response.data;
    }
    function cloudEventHeaders(event) {
      return Object.keys(event).reduce((accumulator, current) => {
        if (current.startsWith('ce-')) {
          accumulator[current] = event[current]
        }
        return accumulator;
      }, {});
    }
    module.exports = {
      main: async function (event, context) {
        if (event.data && event.data.orderCode) {
          lastEvent = { ...cloudEventHeaders(event), data: event.data };
          lastOrder = await getOrder(event.data.orderCode);
        }
        return {order:lastOrder, event:lastEvent};
      }
    }
---
apiVersion: gateway.kyma-project.io/v1alpha1
kind: APIRule
metadata:
  name: lastorder
spec:
  gateway: kyma-gateway.kyma-system.svc.cluster.local
  rules:
    - accessStrategies:
        - config: {}
          handler: allow
      methods: ["*"]
      path: /.*
  service:
    host: lastorder
    name: lastorder
    port: 80
---
apiVersion: applicationconnector.kyma-project.io/v1alpha1
kind: ApplicationMapping
metadata:
  name: commerce
---
apiVersion: eventing.knative.dev/v1alpha1
kind: Trigger
metadata:
  labels:
    function: lastorder
  name: function-lastorder
spec:
  broker: default
  filter:
    attributes:
      eventtypeversion: v1
      source: commerce
      type: order.created
  subscriber:
    ref:
      apiVersion: v1
      kind: Service
      name: lastorder
---
apiVersion: eventing.kyma-project.io/v1alpha1
kind: Subscription
metadata:
  name: function-lastorder
spec:
  filter:
    dialect: beb,
    filters:
    - eventSource:
        property: source
        type: exact
        value: ""
      eventType:
        property: type
        type: exact
        value: sap.kyma.custom.commerce.order.created.v1
  protocol: BEB
  protocolsettings:
    exemptHandshake: true
    qos: AT-LEAST-ONCE
  sink: http://lastorder.test.svc.cluster.local
