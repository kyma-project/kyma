Create with `diff -Naur vendor/k8s.io/kubernetes/test/e2e/framework/create.go{.orig,} > hack/k8s_framework_create.patch`

--- vendor/k8s.io/kubernetes/test/e2e/framework/create.go	2019-12-11 12:51:57.900649774 +0100
+++ vendor/k8s.io/kubernetes/test/e2e/framework/create.go.orig	2019-12-11 12:52:42.080616309 +0100
@@ -286,6 +286,7 @@
 	{"ServiceAccount"}:     &serviceAccountFactory{},
 	{"StatefulSet"}:        &statefulSetFactory{},
 	{"StorageClass"}:       &storageClassFactory{},
+	{"ConfigMap"}:          &configMapFactory{},
 }
 
 // PatchName makes the name of some item unique by appending the
@@ -357,6 +358,8 @@
 		f.PatchNamespace(&item.ObjectMeta.Namespace)
 	case *apps.DaemonSet:
 		f.PatchNamespace(&item.ObjectMeta.Namespace)
+	case *v1.ConfigMap:
+		f.PatchNamespace(&item.ObjectMeta.Namespace)
 	default:
 		return errors.Errorf("missing support for patching item of type %T", item)
 	}
@@ -575,6 +578,27 @@
 	}
 	return func() error {
 		return client.Delete(item.GetName(), &metav1.DeleteOptions{})
+	}, nil
+}
+
+type configMapFactory struct{}
+
+func (f *configMapFactory) New() runtime.Object {
+	return &v1.ConfigMap{}
+}
+
+func (*configMapFactory) Create(f *Framework, i interface{}) (func() error, error) {
+	item, ok := i.(*v1.ConfigMap)
+	if !ok {
+		return nil, errorItemNotSupported
+	}
+
+	client := f.ClientSet.CoreV1().ConfigMaps(f.Namespace.GetName())
+	if _, err := client.Create(item); err != nil {
+		return nil, errors.Wrap(err, "create ConfigMap")
+	}
+	return func() error {
+		return client.Delete(item.GetName(), &metav1.DeleteOptions{})
 	}, nil
 }
 
