// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	compass_runtime_agent "github.com/kyma-project/kyma/tests/components/application-connector/test/compass-runtime-agent"
	mock "github.com/stretchr/testify/mock"
)

// SecretClient is an autogenerated mock type for the SecretClient type
type SecretClient struct {
	mock.Mock
}

// Compare provides a mock function with given fields: actual, expected
func (_m *SecretClient) Compare(actual string, expected string) bool {
	ret := _m.Called(actual, expected)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(actual, expected)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetSecretData provides a mock function with given fields:
func (_m *SecretClient) GetSecretData() (compass_runtime_agent.secretData, error) {
	ret := _m.Called()

	var r0 compass_runtime_agent.secretData
	if rf, ok := ret.Get(0).(func() compass_runtime_agent.secretData); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(compass_runtime_agent.secretData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSecretClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSecretClient creates a new instance of SecretClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSecretClient(t mockConstructorTestingTNewSecretClient) *SecretClient {
	mock := &SecretClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
