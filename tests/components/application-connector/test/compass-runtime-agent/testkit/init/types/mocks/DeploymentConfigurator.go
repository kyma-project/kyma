// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	types "github.com/kyma-project/kyma/tests/components/application-connector/test/compass-runtime-agent/testkit/init/types"
	mock "github.com/stretchr/testify/mock"
)

// DeploymentConfigurator is an autogenerated mock type for the DeploymentConfigurator type
type DeploymentConfigurator struct {
	mock.Mock
}

// Do provides a mock function with given fields: caSecretName, clusterCertSecretName, runtimeAgentConfigSecretName
func (_m *DeploymentConfigurator) Do(caSecretName string, clusterCertSecretName string, runtimeAgentConfigSecretName string) (types.RollbackFunc, error) {
	ret := _m.Called(caSecretName, clusterCertSecretName, runtimeAgentConfigSecretName)

	var r0 types.RollbackFunc
	if rf, ok := ret.Get(0).(func(string, string, string) types.RollbackFunc); ok {
		r0 = rf(caSecretName, clusterCertSecretName, runtimeAgentConfigSecretName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.RollbackFunc)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(caSecretName, clusterCertSecretName, runtimeAgentConfigSecretName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDeploymentConfigurator interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeploymentConfigurator creates a new instance of DeploymentConfigurator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeploymentConfigurator(t mockConstructorTestingTNewDeploymentConfigurator) *DeploymentConfigurator {
	mock := &DeploymentConfigurator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
