// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	types "github.com/kyma-project/kyma/tests/components/application-connector/test/compass-runtime-agent/testkit/init/types"
	mock "github.com/stretchr/testify/mock"
)

// CompassConfigurator is an autogenerated mock type for the CompassConfigurator type
type CompassConfigurator struct {
	mock.Mock
}

// Do provides a mock function with given fields: runtimeName, formationName
func (_m *CompassConfigurator) Do(runtimeName string, formationName string) (types.CompassRuntimeAgentConfig, types.RollbackFunc, error) {
	ret := _m.Called(runtimeName, formationName)

	var r0 types.CompassRuntimeAgentConfig
	if rf, ok := ret.Get(0).(func(string, string) types.CompassRuntimeAgentConfig); ok {
		r0 = rf(runtimeName, formationName)
	} else {
		r0 = ret.Get(0).(types.CompassRuntimeAgentConfig)
	}

	var r1 types.RollbackFunc
	if rf, ok := ret.Get(1).(func(string, string) types.RollbackFunc); ok {
		r1 = rf(runtimeName, formationName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.RollbackFunc)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(runtimeName, formationName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewCompassConfigurator interface {
	mock.TestingT
	Cleanup(func())
}

// NewCompassConfigurator creates a new instance of CompassConfigurator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompassConfigurator(t mockConstructorTestingTNewCompassConfigurator) *CompassConfigurator {
	mock := &CompassConfigurator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
