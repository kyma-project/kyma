apiVersion: applicationconnector.kyma-project.io/v1alpha1
kind: Application
metadata:
  name: positive-authorisation
  namespace: {{ .Values.global.namespace }}
spec:
  description: Authorisation
  skipVerify: true
  labels:
    app: positive-authorisation
  services:
    - displayName: unsecure-always-ok
      name: unsecure-always-ok
      providerDisplayName: AlwaysOK
      description: Should return 200 when calling unprotected endpoint
      id: "{{ uuidv4 }}"
      entries:
        - type: API
          targetUrl: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/unsecure/ok"
          centralGatewayUrl: "http://central-application-gateway.kyma-system:8080/positive-authorisation/unsecure-always-ok"
    - displayName: basic-auth-ok
      name: basic-auth-ok
      providerDisplayName: Basic
      description: Should return 200 when calling endpoint protected with Basic Auth
      id: "{{ uuidv4 }}"
      entries:
        - type: API
          targetUrl: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/basic/ok"
          centralGatewayUrl: "http://central-application-gateway.kyma-system:8080/positive-authorisation/basic-auth-ok"
          credentials:
            secretName: basic-test
            type: Basic
    - displayName: oauth
      name: oauth
      providerDisplayName: OAuth
      description: Should return 200 when calling endpoint protected with OAuth
      id: "{{ uuidv4 }}"
      entries:
        - type: API
          targetUrl: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/oauth/ok"
          centralGatewayUrl: "http://central-application-gateway.kyma-system:8080/positive-authorisation/oauth"
          credentials:
            secretName: oauth-test
            authenticationUrl: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/oauth/token"
            type: OAuth
    - displayName: mtls-oauth
      name: mtls-oauth
      providerDisplayName: mTLS-OAuth
      description: Should return 200 when calling endpoint protected with mTLS OAuth
      id: "{{ uuidv4 }}"
      entries:
        - type: API
          targetUrl: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/oauth/ok"
          centralGatewayUrl: "http://central-application-gateway.kyma-system:8080/positive-authorisation/mtls-oauth"
          credentials:
            secretName: mtls-oauth-positive
            authenticationUrl: "https://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8090/v1/api/mtls-oauth/token"
            type: OAuthWithCert
    - displayName: mtls
      name: mtls
      providerDisplayName: mTLS
      description: Should return 200 when calling endpoint protected with mTLS
      id: "{{ uuidv4 }}"
      entries:
        - type: API
          targetUrl: "https://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8090/v1/api/mtls/ok"
          centralGatewayUrl: "http://central-application-gateway.kyma-system:8080/positive-authorisation/mtls"
          credentials:
            secretName: mtls-positive
            type: CertificateGen
    - displayName: csrf basic
      name: csrf-basic
      providerDisplayName: Basic with CSRF
      description: Should return 200 for Basic Auth with CSRF optimistic scenario
      id: "{{ uuidv4 }}"
      entries:
        - type: API
          targetUrl: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/csrf-basic/ok"
          centralGatewayUrl: "http://central-application-gateway.kyma-system:8080/positive-authorisation/csrf-basic"
          credentials:
            secretName: basic-test
            type: Basic
            csrfInfo:
              tokenEndpointURL: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/csrf/token"
    - displayName: csrf-oauth
      name: csrf-oauth
      providerDisplayName: OAuth with CSRF
      description: Should return 200 when calling endpoint protected with OAuth with CSRF
      id: "{{ uuidv4 }}"
      entries:
        - type: API
          targetUrl: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/csrf-oauth/ok"
          centralGatewayUrl: "http://central-application-gateway.kyma-system:8080/positive-authorisation/csrf-oauth"
          credentials:
            secretName: oauth-test
            authenticationUrl: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/oauth/token"
            type: OAuth
            csrfInfo:
              tokenEndpointURL: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/csrf/token"
    - displayName: csrf-mtls-oauth
      name: csrf-mtls-oauth
      providerDisplayName: mTLS-OAuth with CSRF
      description: Should return 200 when calling endpoint protected with mTLS OAuth with CSRF
      id: "{{ uuidv4 }}"
      entries:
        - type: API
          targetUrl: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/csrf-oauth/ok"
          centralGatewayUrl: "http://central-application-gateway.kyma-system:8080/positive-authorisation/csrf-mtls-oauth"
          credentials:
            secretName: mtls-oauth-positive
            authenticationUrl: "https://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8090/v1/api/mtls-oauth/token"
            type: OAuthWithCert
            csrfInfo:
              tokenEndpointURL: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/csrf/token"
    - displayName: csrf-mtls
      name: csrf-mtls
      providerDisplayName: mTLS with CSRF
      description: Should return 200 when calling endpoint protected with mTLS with CSRF
      id: "{{ uuidv4 }}"
      entries:
        - type: API
          targetUrl: "https://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8090/v1/api/csrf-mtls/ok"
          centralGatewayUrl: "http://central-application-gateway.kyma-system:8080/positive-authorisation/csrf-mtls"
          credentials:
            secretName: mtls-positive
            type: CertificateGen
            csrfInfo:
              tokenEndpointURL: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/csrf/token"
    - displayName: basic-auth-with-request-parameters
      name: basic-auth-with-request-parameters
      providerDisplayName: Basic
      description: Should return 200 when calling endpoint protected with Basic Auth with additional request parameters
      id: "{{ uuidv4 }}"
      entries:
        - type: API
          targetUrl: "http://{{ .Values.global.mockServiceName }}.{{ .Values.global.namespace  }}.svc.cluster.local:8080/v1/api/request-parameters-basic/ok"
          centralGatewayUrl: "http://central-application-gateway.kyma-system:8080/positive-authorisation/basic-auth-with-request-parameters"
          requestParametersSecretName: request-parameters-test
          credentials:
            secretName: basic-test
            type: Basic
