---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Release.Name }}-pre-upgrade
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: '-6'
    helm.sh/hook-delete-policy: before-hook-creation
  labels:
    job: {{ .Release.Name }}-pre-upgrade
rules:
- apiGroups: ['']
  resources: ['secrets']
  verbs: ['delete']
- apiGroups: ['apps','extensions']
  resources: ['deployments']
  verbs: ['delete']
- apiGroups: ['eventing.knative.dev']
  resources:
    - subscriptions
    - channels
    - clusterchannelprovisioners
  verbs: ['list', 'delete']
- apiGroups: ['apiextensions.k8s.io']
  resources: ['customresourcedefinitions']
  verbs: ['get', 'delete']
- apiGroups: ['admissionregistration.k8s.io']
  resources: ['mutatingwebhookconfigurations']
  verbs: ['delete']
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-pre-upgrade
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: '-5'
  labels:
      job: {{ .Release.Name }}-pre-upgrade
---
apiVersion: v1
data:
  pre-upgrade.sh: |
    #!/usr/bin/env bash
    set -eu

    echo "*** Pre upgrade job starts ***"

    if kubectl get crd subscriptions.eventing.knative.dev 2>/dev/null; then
      echo "deleting subscriptions"
      kubectl delete subscriptions.eventing.knative.dev --all -n kyma-system --ignore-not-found
    fi
    if kubectl get crd channels.eventing.knative.dev 2>/dev/null; then
      echo "deleting channels"
      kubectl delete channels.eventing.knative.dev --all -n kyma-system --ignore-not-found
    fi
    if kubectl get crd clusterchannelprovisioners.eventing.knative.dev 2>/dev/null; then
      echo "deleting clusterchannelprovisioners"
      kubectl delete clusterchannelprovisioners.eventing.knative.dev --all --ignore-not-found
    fi

    #### Remove CRDs
    # pre 0.10 CRDs, deprecated
    kubectl delete --ignore-not-found crd \
      subscriptions.eventing.knative.dev \
      clusterchannelprovisioners.eventing.knative.dev \
      channels.eventing.knative.dev
    # CRDs previously created by the pre-upgrade hook, now part of the eventing deployment manifests
    kubectl delete --ignore-not-found crd \
      parallels.messaging.knative.dev \
      subscriptions.messaging.knative.dev

    # MutatingWebhookConfiguration previously created by the pre-upgrade hook, now part of the eventing deployment manifests
    kubectl delete --ignore-not-found mutatingwebhookconfiguration \
      webhook.eventing.knative.dev

    # Remove auto-generated Secret.
    # Avoids update conflict: "Secret with the name "eventing-webhook-certs" already exists in the cluster and wasn't defined in the previous release."
    kubectl -n knative-eventing delete --ignore-not-found \
      secret/eventing-webhook-certs

    #### deploy/event-bus-subscription-controller adds/removes a finalizer to knative subscriptions hence it needs to be deleted after knative subscriptions are deleted
    kubectl -n kyma-system delete --ignore-not-found \
      deploy/event-bus-subscription-controller

    echo "*** Pre upgrade job completed ***"
kind: ConfigMap
metadata:
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
  labels:
    job: {{ .Release.Name }}-pre-upgrade
  name: {{ .Release.Name }}-pre-upgrade
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-pre-upgrade
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-4"
  labels:
    job: {{ .Release.Name }}-pre-upgrade
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Release.Name }}-pre-upgrade
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-pre-upgrade
    namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
  labels:
    job: {{ .Release.Name }}-pre-upgrade
  name: {{ .Release.Name }}-pre-upgrade
spec:
  completions: 1
  parallelism: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        job: {{ .Release.Name }}-pre-upgrade
    spec:
        restartPolicy: OnFailure
        containers:
          - command: ["sh", "/scripts/pre-upgrade.sh"]
            image: docker.io/istio/kubectl:1.1.6
            imagePullPolicy: IfNotPresent
            name: {{ .Release.Name }}-pre-upgrade
            volumeMounts:
              - mountPath: /scripts
                name: scripts
                readOnly: true
        serviceAccountName: {{ .Release.Name }}-pre-upgrade
        volumes:
          - configMap:
              defaultMode: 420
              name: {{ .Release.Name }}-pre-upgrade
            name: scripts
