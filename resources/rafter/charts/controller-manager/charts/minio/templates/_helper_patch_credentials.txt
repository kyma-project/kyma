#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

readonly PRE_UPGRADE="PRE_UPGRADE"
readonly POST_UPGRADE="POST_UPGRADE"

# preUpgrade runs before upgrade process of minio release and creates secret with old credentials 
#
preUpgrade() {
  local -r secret=$(kubectl get secret -n ${NAMESPACE} ${MINIO_SECRET_NAME} -ojson)
  local -r accesskeyold="$(echo ${secret} | jq -r '.data.accesskey')"
  local -r secretkeyold="$(echo ${secret} | jq -r '.data.secretkey')"

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: ${PATCH_CREDENTIALS_SECRET_NAME}
  namespace: ${NAMESPACE}
data:
  MINIO_ACCESS_KEY_OLD: ${accesskeyold}
  MINIO_SECRET_KEY_OLD: ${secretkeyold}
EOF
}

# postUpgrade runs after upgrade process of minio release and removes from minio's deployment injected secret with old credentials and secret itself
#
postUpgrade() {
  kubectl patch deployment -n "${NAMESPACE}" "${DEPLOYMENT_NAME}" \
    --patch "[{\"op\": \"remove\", \"path\": \"/spec/template/spec/containers/0/envFrom\"}]" \
    --type=json

  kubectl delete secret -n "${NAMESPACE}" "${PATCH_CREDENTIALS_SECRET_NAME}"
}

main() {
  if [ "$HELM_STEP" == "$PRE_UPGRADE" ]; then
    preUpgrade
  fi

  if [ "$HELM_STEP" == "$POST_UPGRADE" ]; then
    postUpgrade
  fi
}
main
