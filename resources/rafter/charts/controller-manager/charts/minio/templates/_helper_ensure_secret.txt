#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

set +o errexit
kubectl get secret -n "${NAMESPACE}" "${SECRET_NAME}"
EXIT_CODE=$?
set -o errexit

if [[ $EXIT_CODE -eq "0" ]]; then
  # if the secret with the given name is found in the given namespace,
  # annotate it with helm.sh/resource-policy: keep annotation;
  kubectl annotate secret -n "${NAMESPACE}" "${SECRET_NAME}" helm.sh/resource-policy=keep --overwrite

  GCS_KEY_JSON=${GCS_KEY_JSON:-""}
  if [[ -n "$GCS_KEY_JSON" ]]; then
    GCS_KEY_JSON_ENCODED=$(echo -n "$GCS_KEY_JSON" | base64 --wrap 0 )
    PATCH_VALUE='{"data": {"gcs_key.json":"'"${GCS_KEY_JSON_ENCODED}"'"}}'
    kubectl patch secret -n "${NAMESPACE}" "${SECRET_NAME}" \
    --type merge --patch "${PATCH_VALUE}"
  fi

else
  kubectl create secret generic -n "${NAMESPACE}" "${SECRET_NAME}" \
  --from-literal=accesskey="${MINIO_ACCESS_KEY}" \
  --from-literal=secretkey="${MINIO_SECRET_KEY}" \
  ${GCS_KEY_JSON:+--from-literal=gcs_key.json="${GCS_KEY_JSON}"}
fi
