{{- if not .Values.existingSecret -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "minio.fullname" . }}-ensure-secret-job
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: "pre-install, pre-upgrade"
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: "before-hook-creation, hook-succeeded"
data:
  ensure-secret: |-
{{ include (print $.Template.BasePath "/_helper_ensure_secret.txt") . | indent 4 }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "minio.fullname" . }}-ensure-secret-job
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: "pre-install, pre-upgrade"
    helm.sh/hook-delete-policy: "before-hook-creation, hook-succeeded"
    helm.sh/hook-weight: "0"
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ template "minio.fullname" . }}-ensure-secret-job
  annotations:
    helm.sh/hook: "pre-install, pre-upgrade"
    helm.sh/hook-delete-policy: "before-hook-creation, hook-succeeded"
    helm.sh/hook-weight: "0"
rules:
  - apiGroups: ["*"]
    resources: ["secrets"]
    verbs: ["create", "get", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ template "minio.fullname" . }}-ensure-secret-job
  annotations:
    helm.sh/hook: "pre-install, pre-upgrade"
    helm.sh/hook-delete-policy: "before-hook-creation, hook-succeeded"
    helm.sh/hook-weight: "0"
subjects:
- kind: ServiceAccount
  name: {{ template "minio.fullname" . }}-ensure-secret-job
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ template "minio.fullname" . }}-ensure-secret-job
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "minio.fullname" . }}-ensure-secret-job
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: "before-hook-creation, hook-succeeded"
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      {{- if .Values.pod.extraProperties }}
      {{ include "rafter.tplValue" ( dict "value" .Values.pod.extraProperties "context" . ) | nindent 6 }}
      {{- end }}
      serviceAccountName: {{ template "minio.fullname" . }}-ensure-secret-job
      restartPolicy: OnFailure
      volumes:
        - name: ensure-secret
          projected:
            sources:
            - configMap:
                name: {{ template "minio.fullname" . }}-ensure-secret-job
      containers:
      - name: ensure-secret-job
        image: "{{ .Values.ensureSecret.image.repository }}:{{ .Values.ensureSecret.image.tag }}"
        imagePullPolicy: "{{ .Values.ensureSecret.image.pullPolicy }}"
        {{- if .Values.pod.extraContainerProperties }}
        {{ include "rafter.tplValue" ( dict "value" .Values.pod.extraContainerProperties "context" . ) | nindent 8 }}
        {{- end }}
        env:
        - name: NAMESPACE
          value: {{ .Release.Namespace | quote }}
        - name: SECRET_NAME
          value: {{ include "minio.fullname" . | quote }}
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "minio.fullname" . }}-credentials
              key: accesskey
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "minio.fullname" . }}-credentials
              key: secretkey
{{- if .Values.gcsgateway.enabled }}
        - name: GCS_KEY_JSON
          valueFrom:
            secretKeyRef:
              name: {{ template "minio.fullname" . }}-credentials
              key: gcs_key.json
{{- end }}
        command:
          - "/bin/bash"
          - "/config/ensure-secret"
        volumeMounts:
          - name: ensure-secret
            mountPath: /config
    {{- if .Values.global.priorityClassName }}
      priorityClassName: {{ .Values.global.priorityClassName }}
    {{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    helm.sh/hook: "pre-install, pre-upgrade"
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: "before-hook-creation, hook-succeeded"
  name: {{ template "minio.fullname" . }}-credentials
  labels:
    app: {{ template "minio.name" . }}
    chart: {{ template "minio.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
type: Opaque
data:
  accesskey: {{ if .Values.accessKey }}{{ .Values.accessKey | b64enc | quote }}{{ else }}{{ randAlphaNum 20 | b64enc | quote }}{{ end }}
  secretkey: {{ if .Values.secretKey }}{{ .Values.secretKey | b64enc | quote }}{{ else }}{{ randAlphaNum 40 | b64enc | quote }}{{ end }}
{{- if .Values.gcsgateway.enabled }}
  gcs_key.json: {{ .Values.gcsgateway.gcsKeyJson | b64enc }}
{{- end -}}
{{- end -}}