apiVersion: v1
kind: ServiceAccount
metadata:
  name: migration-job-1-13
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: migration-job-1-13
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: migration-job-1-13
subjects:
  - kind: ServiceAccount
    name: migration-job-1-13
    namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: migration-job-1-13
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
rules:
  - apiGroups: [""]
    resources: [secrets]
    verbs: [create, get]
  - apiGroups: [""]
    resources: [configmaps]
    verbs: [get]
---
apiVersion: batch/v1
kind: Job
metadata:
  name: migration-job-1-13
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "2"
    sidecar.istio.io/inject: "false"
spec:
  template:
    metadata:
      name: migration-job-1-13
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: migration-job-1-13
      restartPolicy: Never
      containers:
        - name: migration-job-1-13
          image: "eu.gcr.io/kyma-project/test-infra/alpine-kubectl:v20200310-5f52f407"
          command:
            - bash
            - -c
            - |
              set -e

              echo "Creating Secret from Config Map..."

              kubectl -n {{ .Values.compassRuntimeAgent.config.configMap.namespace }} \
                get --export -o json cm {{ .Values.compassRuntimeAgent.config.configMap.name }} \
                | jq 'with_entries(if .key == "data" then .value=(.value | to_entries | map( { (.key): (.value|@base64) } ) | add ) elif .key == "kind" then .value="Secret" else . end)' \
                > secret.json; kubectl create -f secret.json

              echo "Secret created successfully"
