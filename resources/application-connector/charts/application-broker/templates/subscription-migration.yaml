apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Chart.Name }}-migration
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    release: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/name: {{ template "name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Chart.Name }}-migration
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    release: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/name: {{ template "name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
rules:
  - apiGroups: ["messaging.knative.dev"]
    resources: ["subscriptions"]
    verbs: ["get", "list", "patch"]
  - apiGroups: ["applicationconnector.kyma-project.io"]
    resources: ["applications"]
    verbs: ["get"]
  - apiGroups: ["servicecatalog.k8s.io"]
    resources: ["serviceinstances"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Chart.Name }}-migration
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    release: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/name: {{ template "name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
subjects:
  - kind: ServiceAccount
    name: {{ .Chart.Name }}-migration
    namespace: kyma-system
roleRef:
  kind: ClusterRole
  name: {{ .Chart.Name }}-migration
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Chart.Name }}-migration
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "10"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    release: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/name: {{ template "name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  backoffLimit: 1
  template:
    metadata:
      name: {{ .Chart.Name }}-migration
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: {{ .Chart.Name }}-migration
      restartPolicy: Never
      containers:
        - name: job
          image: eu.gcr.io/kyma-project/incubator/k8s-tools:20210208-080d17ad
          env:
            - name: API_PACKAGES_SUPPORT
              value: {{ .Values.global.disableLegacyConnectivity | quote }}
          command:
            - /bin/bash
            - -c
            - |
              IS_LABELLED=false
              LABELED_IDS=()

              for SUB_NAME in $(kubectl get subscriptions.messaging.knative.dev -n kyma-integration -l application-name!= -ojsonpath="{.items[*].metadata.name}"); do
                if [[ "$SUB_NAME" == *"brokersub"* ]]; then
                  SI_NAMESPACE=$(kubectl get subscriptions.messaging.knative.dev -n kyma-integration "$SUB_NAME" -ojsonpath="{.metadata.labels['broker-namespace']}")
                  APP_NAME=$(kubectl get subscriptions.messaging.knative.dev -n kyma-integration "$SUB_NAME" -ojsonpath="{.metadata.labels['application-name']}")

                  APP_SVC_IDS=$(kubectl get application "$APP_NAME" -o=jsonpath="{.spec.services[*].id}")
                  if [[ $? -ne 0 ]]; then
                    continue
                  fi

                  IS_LABELLED=false

                  if [[ "$API_PACKAGES_SUPPORT" == false ]]; then
                    for SI_CLASS in $(kubectl get serviceinstances.servicecatalog.k8s.io -n "$SI_NAMESPACE" -ojsonpath="{.items[*].spec.serviceClassRef['name']}"); do
                      for SVC_ID in $APP_SVC_IDS; do
                        if [[ "$SVC_ID" == "$SI_CLASS" ]]; then
                          for LABELED_ID in $LABELED_IDS; do
                            if [[ "$LABELED_ID" == "$SI_CLASS" ]]; then
                              echo "Subscrption for this class is already labelled"
                              IS_LABELLED=true
                              break
                            fi
                          done
                          if [[ $IS_LABELLED == true ]]; then
                            break
                          fi
                          kubectl label subscriptions.messaging.knative.dev -n kyma-integration "$SUB_NAME" application-service-id="$SI_CLASS"
                          LABELED_IDS+=("$SI_CLASS")
                          IS_LABELLED=true
                          break
                        fi

                        if [[ $IS_LABELLED == true ]]; then
                          break
                        fi
                      done
                      if [[ $IS_LABELLED == true ]]; then
                        break
                      fi
                    done
                    continue
                  fi

                  for SI_PLAN in $(kubectl get serviceinstances.servicecatalog.k8s.io -n "$SI_NAMESPACE" -ojsonpath="{.items[*].spec.servicePlanRef['name']}"); do
                    for SVC_ID in $APP_SVC_IDS; do
                      if [[ "$SVC_ID" == "$SI_PLAN" ]]; then
                        for LABELED_ID in $LABELED_IDS; do
                          if [[ "$LABELED_ID" == "$SI_PLAN" ]]; then
                            echo "Subscrption for this class is already labelled"
                            IS_LABELLED=true
                            break
                          fi
                        done
                        if [[ $IS_LABELLED == true ]]; then
                          break
                        fi
                        kubectl label subscriptions.messaging.knative.dev -n kyma-integration "$SUB_NAME" application-service-id="$SI_PLAN"
                        LABELED_IDS+=("$SI_PLAN")
                        IS_LABELLED=true
                        break
                      fi
                      if [[ $IS_LABELLED == true ]]; then
                        break
                      fi
                    done
                    if [[ $IS_LABELLED == true ]]; then
                      break
                    fi
                  done
                fi
              done
