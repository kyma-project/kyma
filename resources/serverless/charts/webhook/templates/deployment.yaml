apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "webhook.fullname" . }}-svc
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tplValue" ( dict "value" .Values.commonLabels "context" . ) | nindent 4 }}
    {{- if .Values.deployment.labels }}
      {{ include "tplValue" ( dict "value" .Values.deployment.labels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.deployment.annotations }}
  annotations:
    {{ include "tplValue" ( dict "value" .Values.deployment.annotations "context" . ) | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      app: {{ template "webhook.fullname" . }}
      app.kubernetes.io/name: {{ template "webhook.fullname" . }}
      app.kubernetes.io/instance: "{{ .Release.Name }}"
      role: webhook
  replicas: {{ .Values.deployment.replicas }}
  {{- if .Values.deployment.extraProperties }}
    {{ include "tplValue" ( dict "value" .Values.deployment.extraProperties "context" . ) | nindent 2 }}
  {{- end }}
  template:
    metadata:
      {{- if .Values.pod.annotations }}
      annotations:
        {{ include "tplValue" ( dict "value" .Values.pod.annotations "context" . ) | nindent 8 }}
      {{- end }}
      labels:
        {{- include "tplValue" ( dict "value" .Values.commonLabels "context" . ) | nindent 8 }}
    spec:
      serviceAccountName: {{ template "webhook.fullname" . }}
      # Our webhook should gracefully terminate by lame ducking first, set this to a sufficiently
      # high value that we respect whatever value it has configured for the lame duck grace period.
      terminationGracePeriodSeconds: 300   
      containers:
        - name: webhook
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          readinessProbe: # https://github.com/knative/serving/releases/download/v0.18.3/serving-core.yaml, line 2557 and below 
            periodSeconds: 5
            httpGet:
              scheme: HTTPS
              port: 8443
              httpHeaders:
                - name: k-kubelet-probe
                  value: "webhook"
          livenessProbe:
            periodSeconds: 5
            httpGet:
              scheme: HTTPS
              port: 8443
              httpHeaders:
                - name: k-kubelet-probe
                  value: "webhook"
            failureThreshold: 6
            initialDelaySeconds: 20
          resources:
            requests:
              cpu: {{ .Values.deployment.resources.requests.cpu }}
              memory: {{ .Values.deployment.resources.requests.memory }}
            limits:
              cpu: {{ .Values.deployment.resources.limits.cpu }}
              memory: {{ .Values.deployment.resources.limits.memory }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.container.allowPrivilegeEscalation }}
          ports:
            - name: {{ .Values.service.ports.httpMetrics.name }}
              containerPort: {{ .Values.service.ports.httpMetrics.targetPort }}
            - name: {{ .Values.service.ports.httpProfiling.name }}
              containerPort: {{ .Values.service.ports.httpProfiling.targetPort }}
            - name: {{ .Values.service.ports.httpsWebhook.name }}
              containerPort: {{ .Values.service.ports.httpsWebhook.targetPort }}
          envFrom:
            - configMapRef:
                name: {{ template "webhook.fullname" . }}-envs
          env:
            # Because of the serverless webhook is based on the knative webhook we have to set the following configuration envs:
            # SYSTEM_NAMESPACE, METRICS_DOMAIN, CONFIG_OBSERVABILITY_NAME
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: METRICS_DOMAIN
              {{ include "tplValue" ( dict "value" .Values.container.envs.metricsDomain "context" . ) | nindent 14 }}
            - name: CONFIG_OBSERVABILITY_NAME
              {{ include "tplValue" ( dict "value" .Values.container.envs.configObservabilityName "context" . ) | nindent 14 }}

            