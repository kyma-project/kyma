apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "webhook.fullname" . }}-svc
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tplValue" ( dict "value" .Values.commonLabels "context" . ) | nindent 4 }}
    {{- if .Values.deployment.labels }}
      {{ include "tplValue" ( dict "value" .Values.deployment.labels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.deployment.annotations }}
  annotations:
    {{ include "tplValue" ( dict "value" .Values.deployment.annotations "context" . ) | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      app: {{ template "webhook.fullname" . }}
      app.kubernetes.io/name: {{ template "webhook.fullname" . }}
      app.kubernetes.io/instance: "{{ .Release.Name }}"
      role: webhook
  replicas: {{ .Values.deployment.replicas }}
  {{- if .Values.deployment.extraProperties }}
    {{ include "tplValue" ( dict "value" .Values.deployment.extraProperties "context" . ) | nindent 2 }}
  {{- end }}
  template:
    metadata:
      {{- if .Values.pod.annotations }}
      annotations:
        {{ include "tplValue" ( dict "value" .Values.pod.annotations "context" . ) | nindent 8 }}
      {{- end }}
      labels:
        {{- include "tplValue" ( dict "value" .Values.commonLabels "context" . ) | nindent 8 }}
    spec:
      serviceAccountName: {{ template "webhook.fullname" . }}
      volumes:
        - name: configuration
          configMap:
            name: "{{ .Values.global.configuration.configmapName }}"
        - name: serverless-webhook
          secret:
            secretName: {{ .Values.container.envs.webhookSecretName.value }}
      {{- if .Values.pod.extraProperties }}
      {{ include "tplValue" ( dict "value" .Values.pod.extraProperties  "context" . ) | nindent 6 }}
      {{- end }}
      initContainers:
        - name: remove-old-mutating-secret
          image: "{{ include "imageurl" (dict "reg" .Values.global.containerRegistry "img" .Values.global.images.k8s_tools) }}"
          command:
            - "sh"
            - "-c"
            - "kubectl delete mutatingwebhookconfigurations mutating.secrets --ignore-not-found=true"
           {{- if .Values.initContainer.securityContext }}
          securityContext:
            {{- include "tplValue" ( dict "value" .Values.initContainer.securityContext "context" . ) | nindent 12 }}
          {{- end }}
      containers:
        - name: webhook
          volumeMounts:
            - name: configuration
              mountPath: {{ .Values.global.configuration.targetDir }}
            - name: serverless-webhook
              mountPath: /tmp/k8s-webhook-server/serving-certs
          image: "{{ include "imageurl" (dict "reg" .Values.global.containerRegistry "img" .Values.global.images.function_webhook) }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          livenessProbe:
            httpGet:
              port: {{ .Values.service.ports.httpMetrics.targetPort }}
              path: "/metrics"
            initialDelaySeconds: {{ .Values.deployment.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.deployment.livenessProbe.timeoutSeconds }}
            periodSeconds: {{.Values.deployment.livenessProbe.periodSeconds }}
          readinessProbe:
            httpGet:
              port: {{ .Values.service.ports.httpMetrics.targetPort }}
              path: "/metrics"
            initialDelaySeconds: {{ .Values.deployment.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.deployment.readinessProbe.timeoutSeconds }}
            periodSeconds: {{.Values.deployment.readinessProbe.periodSeconds }}
          resources:
            requests:
              cpu: {{ .Values.deployment.resources.requests.cpu }}
              memory: {{ .Values.deployment.resources.requests.memory }}
            limits:
              cpu: {{ .Values.deployment.resources.limits.cpu }}
              memory: {{ .Values.deployment.resources.limits.memory }}
          {{- if .Values.container.securityContext }}
          securityContext:
            {{- include "tplValue" ( dict "value" .Values.container.securityContext "context" . ) | nindent 12 }}
          {{- end }}
          ports:
            - name: {{ .Values.service.ports.httpMetrics.name }}
              containerPort: {{ .Values.service.ports.httpMetrics.targetPort }}
            - name: {{ .Values.service.ports.httpProfiling.name }}
              containerPort: {{ .Values.service.ports.httpProfiling.targetPort }}
            - name: {{ .Values.service.ports.httpsWebhook.name }}
              containerPort: {{ .Values.service.ports.httpsWebhook.targetPort }}
          envFrom:
            - configMapRef:
                name: {{ template "webhook.fullname" . }}-envs
    {{- if .Values.global.highPriorityClassName }}
      priorityClassName: {{ .Values.global.highPriorityClassName }}
    {{- end }}
