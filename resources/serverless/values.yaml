# Default values for serverless.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

fullnameOverride: "serverless"

injectCerts:
  image:
    pullPolicy: IfNotPresent

migration:
  image:
    pullPolicy: IfNotPresent

tests:
  enabled: true
  labels:
    integration: true
    after-upgrade: true
    e2e-skr: true

  long:
    waitTimeout: 180s
    resources:
      requests:
        memory: 128Mi
        cpu: 10m
      limits:
        memory: 256Mi
        cpu: 200m
    image:
      pullPolicy: IfNotPresent
    namespace: "long-running-function-test"
    name: longrun

  image:
    pullPolicy: IfNotPresent
  disableConcurrency: false
  restartPolicy: Never
  resources:
    requests:
      memory: 32Mi
      cpu: 10m
    limits:
      memory: 64Mi
      cpu: 200m
  envs:
    waitTimeout: 15m
    verifySSL: "false"
    verbose: "false"
    gitServer:
      repoName: "function"
    pkgRegistryConfig:
      secretName: "serverless-package-registry-config"
      URLNode: "https://pkgs.dev.azure.com/kyma-wookiee/public-packages/_packaging/public-packages%40Release/npm/registry/"
      URLPython: "https://pkgs.dev.azure.com/kyma-wookiee/public-packages/_packaging/public-packages%40Release/pypi/simple/"

global:
  domainName: "kyma.example.com"
  commonLabels:
    app: '{{ template "name" . }}'
    version: "{{ .Values.global.images.function_controller.version }}"
    app.kubernetes.io/name: '{{ template "name" . }}'
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/version: "{{ .Values.global.images.function_controller.version }}"
    helm.sh/chart: '{{ include "chart" . }}'
  registryServicePort: 5000
  registryNodePort: 32137
  configuration:
    configmapName: "serverless-configuration"
    targetDir: "/appdata"
    filename: "config.yaml"
  ingress:
    domainName:
  containerRegistry:
    path: europe-docker.pkg.dev/kyma-project
  images:
    k8s_tools:
      name: "tpi/k8s-tools"
      version: "v20230809-6a330b54"
      directory: "prod"
    function_controller:
      name: "function-controller"
      version: "v20230824-a02c92c2"
      directory: "prod"
    function_webhook:
      name: "function-webhook"
      version: "v20230824-a02c92c2"
      directory: "prod"
    function_build_init:
      name: "function-build-init"
      version: "v20230824-a02c92c2"
      directory: "prod"
    function_registry_gc:
      name: "function-registry-gc"
      version: "v20230628-61d97068"
      directory: "prod"
    function_runtime_nodejs16:
      name: "function-runtime-nodejs16"
      version: "PR-18083"
      directory: "dev"
    function_runtime_nodejs18:
      name: "function-runtime-nodejs18"
      version: "PR-18083"
      directory: "dev"
    function_runtime_python39:
      name: "function-runtime-python39"
      version: "PR-18083"
      directory: "dev"
    kaniko_executor:
      name: "tpi/kaniko-executor"
      version: "1.9.1-406380b9"
      directory: "prod"
    registry:
      name: "tpi/registry"
      version: "2.8.1-1b099a1d"
      directory: "prod"
    google_pause:
      name: "external/gcr.io/google-containers/pause"
      version: "3.2"
      directory: "prod"
  serverlessPriorityClassValue: 2000000
  serverlessPriorityClassName: "serverless-priority"
images:
  function_controller:
    pullPolicy: IfNotPresent

deployment:
  replicas: 1
  labels: { }
  annotations: { }
  extraProperties: { }
  livenessProbe:
    successThreshold: 1
    failureThreshold: 3
    initialDelaySeconds: 50
    timeoutSeconds: 60
    periodSeconds: 120
  readinessProbe:
    successThreshold: 1
    failureThreshold: 3
    initialDelaySeconds: 10
    timeoutSeconds: 10
    periodSeconds: 30

pod:
  labels: { }
  annotations:
    sidecar.istio.io/inject: "false"
    prometheus.io/scrape: "false"
  extraProperties:
    terminationGracePeriodSeconds: 10
    # the following guidelines should be followed for this https://github.com/kyma-project/community/tree/main/concepts/psp-replacement
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000 # Optional. Use this setting only when necessary, otherwise delete it. Never set to 0 because this is the ID of root.
      runAsGroup: 1000 # Optional. Use this setting only when necessary, otherwise delete it. Never set to 0 because this is the ID of root.
      seccompProfile: # Optional. This option can also be set on container level but it is recommended to set it on Pod level and leave it undefined on container level.
        type: RuntimeDefault
    hostNetwork: false # Optional. The default is false if the entry is not there.
    hostPID: false # Optional. The default is false if the entry is not there.
    hostIPC: false # Optional. The default is false if the entry is not there.
containers:
  daemonset:
    initContainerSecurityContext:
      privileged: false
      allowPrivilegeEscalation: false
      runAsUser: 0
    containerSecurityContext:
      privileged: false
      allowPrivilegeEscalation: false
  manager:
    resources:
      limits:
        cpu: 600m
        memory: 1Gi
      requests:
        cpu: 10m
        memory: 32Mi
    # the following guidelines should be followed for this https://github.com/kyma-project/community/tree/main/concepts/psp-replacement
    containerSecurityContext:
      privileged: false
      allowPrivilegeEscalation: false
      capabilities:
        drop: [ "ALL" ]
      procMount: default # Optional. The default is false if the entry is not there.
      readOnlyRootFilesystem: true # Mandatory
    healthz:
      port: "8090"
    extraProperties: { }
    configuration:
      data:
        logLevel: "info"
        logFormat: "json"
    envs:
      baseNamespace:
        value: "{{ .Release.Namespace }}"
      configPath:
        value: "{{ .Values.global.configuration.targetDir }}/{{ .Values.global.configuration.filename }}"
      configMapRequeueDuration:
        value: 5m
      secretRequeueDuration:
        value: 5m
      serviceAccountRequeueDuration:
        value: 5m
      namespaceExcludedNames:
        value: "istio-system,kube-node-lease,kube-public,kube-system,kyma-installer,kyma-system,natss"
      imageRegistryExternalDockerConfigSecretName:
        value: '{{ template "fullname" . }}-registry-config'
      imageRegistryDefaultDockerConfigSecretName:
        value: '{{ template "fullname" . }}-registry-config-default'
      packageRegistryConfigSecretName:
        value: '{{ template "fullname" . }}-package-registry-config'
      imagePullAccountName:
        value: '{{ template "fullname" . }}-function'
      targetCPUUtilizationPercentage:
        value: "50"
      functionTraceCollectorEndpoint:
        value: "http://telemetry-otlp-traces.kyma-system.svc.cluster.local:4318/v1/traces"
      functionPublisherProxyAddress:
        value: "http://eventing-publisher-proxy.kyma-system.svc.cluster.local/publish"
      functionRequeueDuration:
        value: 5m
      functionBuildExecutorArgs:
        value: "--insecure,--skip-tls-verify,--skip-unused-stages,--log-format=text,--cache=true"
      functionBuildMaxSimultaneousJobs:
        value: "5"
      healthzLivenessTimeout:
        value: "10s"

services:
  manager:
    type: ClusterIP
    labels: { }
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8080"
      prometheus.io/path: "/metrics"
    https:
      port: 443
      targetPort: 8443

metrics:
  enabled: true
  manager:
    port:
      name: http-metrics
      port: 8080
      targerPort: 8080
      protocol: TCP
  pod:
    labels: { }
    annotations: { }

backendModule:
  enabled: true

clusterMicroFrontend:
  enabled: true

grafanaDashboard:
  enabled: true
  functionMetrics:
    enabled: false

dockerRegistry:
  enableInternal: true
  gateway: "kyma-system/kyma-gateway"
  gatewayCert: "kyma-gateway-certs"
  username: "{{ randAlphaNum 20 | b64enc }}" # for gcr "_json_key"
  password: "{{ randAlphaNum 40 | b64enc }}" # for gcr data from json key
  #  This is the registry address, for dockerhub it's username, for other it's url.
  registryAddress: ""
  #  This is the server address of the registry which will be used to create docker configuration.
  serverAddress: ""

docker-registry:
  fullnameOverride: "serverless-docker-registry"
  destinationRule:
    enabled: true
  secrets:
    haSharedSecret: "secret"
    htpasswd: "generated-in-init-container"
  extraVolumeMounts:
    - name: htpasswd-data
      mountPath: /data
  extraVolumes:
    - name: registry-credentials
      secret:
        secretName: serverless-registry-config-default
        items:
          - key: username
            path: username.txt
          - key: password
            path: password.txt
    - name: htpasswd-data
      emptyDir: { }
  rollme: "{{ randAlphaNum 5}}"
  registryHTTPSecret: "{{ randAlphaNum 16 | b64enc }}"

webhook:
  enabled: true
  fullnameOverride: "serverless-webhook"
