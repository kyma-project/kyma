#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

readonly SERVING_API_VERSION="serving.knative.dev/v1"

readonly FUNCTIONS_RESOURCE_TYPE="functions.serverless.kyma-project.io"
readonly KSERVICE_RESOURCE_TYPE="services.serving.knative.dev"
readonly TRIGGERS_RESOURCE_TYPE="triggers.eventing.knative.dev"

readonly MANAGED_BY_LABEL_KEY="serverless.kyma-project.io/managed-by"
readonly MANAGED_BY_LABEL_VALUE="function-controller"

# patchResources patches Functions/Triggers
#
patchResources() {
  local -r functions=$(kubectl get ${FUNCTIONS_RESOURCE_TYPE} --all-namespaces -ojson | jq -c ".items[]")
  if [[ -z ${functions} ]]; then
    echo "There are not any Functions. Skipping... :("
    return 0
  fi

  IFS=$'\n'
  for function in ${functions}
  do
    patchSingleFunction "${function}"
  done

  local -r triggers=$(kubectl get ${TRIGGERS_RESOURCE_TYPE} --all-namespaces -ojson | jq -c ".items[] | select( .spec.subscriber.ref.apiVersion == \"${SERVING_API_VERSION}\" )")
  if [[ -z ${triggers} ]]; then
    echo "There are not any Triggers. Skipping... :("
    return 0
  fi

  IFS=$'\n'
  for trigger in ${triggers}
  do
    local subscriberName="$(echo ${trigger} | jq -r '.spec.subscriber.ref.name')"
    local subscriberNamespace="$(echo ${trigger} | jq -r '.spec.subscriber.ref.namespace')"

    if [ "${subscriberNamespace}" == "null" ]; then
      subscriberNamespace="default"
    fi

    IFS=$'\n'
    for function in ${functions}
    do
      local functionName="$(echo ${function} | jq -r '.metadata.name')"
      local functionNamespace="$(echo ${function} | jq -r '.metadata.namespace')"
      if [ "${subscriberName}" == "${functionName}" ] && [ "${subscriberNamespace}" == "${functionNamespace}" ]; then
        patchSingleTrigger "${trigger}"
      fi
    done
  done
}

# patchSingleTrigger patches single Trigger to new subscriber
#
# Arguments:
#   $1 - Trigger resource
patchSingleTrigger() {
  local -r trigger="${1}"

  local -r triggerName="$(echo ${trigger} | jq -r '.metadata.name')"
  local -r triggerNamespace="$(echo ${trigger} | jq -r '.metadata.namespace')"

  local -r subscriberName="$(echo ${trigger} | jq -r '.spec.subscriber.ref.name')"
  local -r subscriberNamespace="$(echo ${trigger} | jq -r '.spec.subscriber.ref.namespace')"

  kubectl patch triggers -n "${triggerNamespace}" "${triggerName}" \
    --patch "{\"spec\": {\"subscriber\": {\"ref\": {\"apiVersion\": \"v1\", \"kind\": \"Service\", \"name\": \"${subscriberName}\", \"namespace\": \"${subscriberNamespace}\"}}}}" \
    --type=merge
}

# patchSingleFunction patches single Function with default fields
#
# Arguments:
#   $1 - Function resource
patchSingleFunction() {
  local -r function="${1}"

  local -r functionName="$(echo ${function} | jq -r '.metadata.name')"
  local -r functionNamespace="$(echo ${function} | jq -r '.metadata.namespace')"

  local minReplicas="$(echo ${function} | jq -r '.spec.minReplicas')"
  if [[ -z ${minReplicas} || "${minReplicas}" == "null" || "${minReplicas}" == "0" ]]; then
    minReplicas=1
  fi
  local maxReplicas="$(echo ${function} | jq -r '.spec.maxReplicas')"
  if [[ -z ${maxReplicas} || "${maxReplicas}" == "null" || "${maxReplicas}" == "0" ]]; then
    maxReplicas=1
  fi

  local requestCpu="$(echo ${function} | jq -r '.spec.resources.requests.cpu')"
  if [[ -z ${requestCpu} || "${requestCpu}" == "null" ]]; then
    requestCpu="50m"
  fi
  local requestMemory="$(echo ${function} | jq -r '.spec.resources.requests.memory')"
  if [[ -z ${requestMemory} || "${requestMemory}" == "null" ]]; then
    requestMemory="64Mi"
  fi
  local limitsCpu="$(echo ${function} | jq -r '.spec.resources.limits.cpu')"
  if [[ -z ${limitsCpu} || "${limitsCpu}" == "null" ]]; then
    limitsCpu="100m"
  fi
  local limitsMemory="$(echo ${function} | jq -r '.spec.resources.limits.memory')"
  if [[ -z ${limitsMemory} || "${limitsMemory}" == "null" ]]; then
    limitsMemory="128Mi"
  fi

  kubectl patch functions -n "${functionNamespace}" "${functionName}" \
    --patch "{\"spec\": {\"minReplicas\": ${minReplicas}, \"maxReplicas\": ${maxReplicas}, \"resources\": {\"requests\": {\"cpu\": \"${requestCpu}\", \"memory\": \"${requestMemory}\"}, \"limits\": {\"cpu\": \"${limitsCpu}\", \"memory\": \"${limitsMemory}\"}}}}" \
    --type=merge
}

# deleteKServices deletes all KServices managed/created by function-controller
#
deleteKServices() {
  kubectl delete ${KSERVICE_RESOURCE_TYPE} \
    --all-namespaces \
    -l "${MANAGED_BY_LABEL_KEY}"="${MANAGED_BY_LABEL_VALUE}" \
    --ignore-not-found
}

main() {
  patchResources
  deleteKServices || 0
}
main
