#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

readonly SBU_RESOURCE_TYPE="servicebindingusages.servicecatalog.kyma-project.io"
readonly OLD_USAGE_KIND="knative-service"
readonly NEW_USAGE_KIND="serverless-function"

# patchBindingUsages patches all ServiceBindingUsage in all namespaces to "serverless-function" UsageKind
#
patchBindingUsages() {
  local -r bindingUsages=$(kubectl get ${SBU_RESOURCE_TYPE} --all-namespaces -ojson | jq -c ".items[] | select( .spec.usedBy.kind == \"${OLD_USAGE_KIND}\" )")
  if [[ -z ${bindingUsages} ]]; then
    echo "There are not any ServiceBindingUsages with ${OLD_USAGE_KIND} UsageKind :("
    return 0
  fi

  IFS=$'\n'
  for bindingUsage in ${bindingUsages}
  do
    patchSingleBindingUsage "${bindingUsage}"
  done
}

# patchSingleBindingUsage patches single ServiceBindingUsage to "serverless-function" UsageKind
#
# Arguments:
#   $1 - ServiceBindingUsage resource
patchSingleBindingUsage() {
  local -r bindingUsage="${1}"

  local -r bindingUsageName="$(echo ${bindingUsage} | jq -r '.metadata.name')"
  local -r bindingUsageNamespace="$(echo ${bindingUsage} | jq -r '.metadata.namespace')"
  local -r functionName="$(echo ${bindingUsage} | jq -r '.spec.usedBy.name')"

  kubectl patch servicebindingusage -n "${bindingUsageNamespace}" "${bindingUsageName}" \
    --patch "{\"spec\": {\"usedBy\": {\"kind\": \"${NEW_USAGE_KIND}\",\"name\": \"${functionName}\"}}}" \
    --type=merge
}

main() {
  patchBindingUsages
}
main
