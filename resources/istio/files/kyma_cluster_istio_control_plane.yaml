apiVersion: install.istio.io/v1alpha2
kind: IstioControlPlane
spec:
  autoInjection:
    components:
      injector:
        enabled: true
        k8s:
          replicaCount: 1
          strategy:
            rollingUpdate:
              maxSurge: 100%
              maxUnavailable: 25%
    enabled: true
  cni:
    enabled: false
  configManagement:
    components:
      galley:
        enabled: true
        k8s:
          replicaCount: 1
          resources:
            requests:
              cpu: 100m
          strategy:
            rollingUpdate:
              maxSurge: 100%
              maxUnavailable: 25%
    enabled: true
  defaultNamespace: istio-system
  gateways:
    components:
      egressGateway:
        enabled: false
        k8s:
          hpaSpec:
            maxReplicas: 5
            metrics:
            - resource:
                name: cpu
                targetAverageUtilization: 80
              type: Resource
            minReplicas: 1
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: istio-egressgateway
          resources:
            limits:
              cpu: 2000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 128Mi
          strategy:
            rollingUpdate:
              maxSurge: 100%
              maxUnavailable: 25%
      ingressGateway:
        enabled: true
        k8s:
          hpaSpec:
            maxReplicas: 5
            metrics:
            - resource:
                name: cpu
                targetAverageUtilization: 80
              type: Resource
            minReplicas: 1
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: istio-ingressgateway
          resources:
            limits:
              cpu: 2000m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 96Mi
          strategy:
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 0
    enabled: true
  hub: docker.io/istio
  policy:
    components:
      policy:
        enabled: true
        k8s:
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          hpaSpec:
            maxReplicas: 5
            metrics:
            - resource:
                name: cpu
                targetAverageUtilization: 80
              type: Resource
            minReplicas: 1
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: istio-policy
          resources:
            requests:
              cpu: 10m
              memory: 96Mi
            limits:
              # It is best to do horizontal scaling of mixer using moderate cpu allocation.
              # We have experimentally found that these values work well.
              cpu: 500m
              memory: 512Mi
          strategy:
            rollingUpdate:
              maxSurge: 100%
              maxUnavailable: 25%
    enabled: true
  security:
    components:
      certManager:
        enabled: false
      citadel:
        enabled: true
        k8s:
          strategy:
            rollingUpdate:
              maxSurge: 100%
              maxUnavailable: 25%
      nodeAgent:
        enabled: false
    enabled: true
  tag: 1.4.2
  telemetry:
    components:
      telemetry:
        enabled: true
        k8s:
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            value: "6"
          hpaSpec:
            maxReplicas: 5
            metrics:
            - resource:
                name: cpu
                targetAverageUtilization: 80
              type: Resource
            minReplicas: 1
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: istio-telemetry
          replicaCount: 1
          resources:
            limits:
              cpu: 2000m
              memory: 4G
            requests:
              cpu: 300m
              memory: 512Mi
          strategy:
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 0
    enabled: true
  trafficManagement:
    components:
      pilot:
        enabled: true
        k8s:
          env:
          - name: PILOT_HTTP10
            value: "1"
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          hpaSpec:
            maxReplicas: 5
            metrics:
            - resource:
                name: cpu
                targetAverageUtilization: 80
              type: Resource
            minReplicas: 1
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: istio-pilot
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 128Mi
          strategy:
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 0
    enabled: true
  values:
    certmanager:
      hub: quay.io/jetstack
      image: cert-manager-controller
      tag: v0.6.2
    clusterResources: true
    galley:
      enableAnalysis: false
      image: galley
    gateways:
      istio-egressgateway:
        autoscaleEnabled: true
        env:
          ISTIO_META_ROUTER_MODE: sni-dnat
        ports:
        - name: http2
          port: 80
        - name: https
          port: 443
        - name: tls
          port: 15443
          targetPort: 15443
        secretVolumes:
        - mountPath: /etc/istio/egressgateway-certs
          name: egressgateway-certs
          secretName: istio-egressgateway-certs
        - mountPath: /etc/istio/egressgateway-ca-certs
          name: egressgateway-ca-certs
          secretName: istio-egressgateway-ca-certs
        type: ClusterIP
        zvpn:
          enabled: true
          suffix: global
      istio-ingressgateway:
        applicationPorts: ""
        autoscaleEnabled: true
        debug: info
        domain: ""
        env:
          ISTIO_META_ROUTER_MODE: sni-dnat
        meshExpansionPorts:
        - name: tcp-pilot-grpc-tls
          port: 15011
          targetPort: 15011
        - name: tcp-citadel-grpc-tls
          port: 8060
          targetPort: 8060
        - name: tcp-dns-tls
          port: 853
          targetPort: 853
        ports:
        - name: status-port
          port: 15020
          targetPort: 15020
        - name: http2
          port: 80
          targetPort: 80
          nodePort: 31380
        - name: https
          port: 443
          nodePort: 31390
        - name: https-kiali # check - we have https-kiali, does it matter?
          port: 15029
          targetPort: 15029
        - name: https-prometheus # check - we have https-prometheus, does it matter?
          port: 15030
          targetPort: 15030
        - name: https-grafana # check - we have https-grafana, does it matter?
          port: 15031
          targetPort: 15031
        - name: https-tracing # check - we have https-tracing, does it matter?
          port: 15032
          targetPort: 15032
        - name: tls
          port: 15443
          targetPort: 15443
        sds:
          enabled: true
          image: node-agent-k8s
          resources:
            limits:
              cpu: 2000m
              memory: 256Mi
            requests:
              cpu: 10m
              memory: 16Mi
        secretVolumes:
        - mountPath: /etc/istio/ingressgateway-certs
          name: ingressgateway-certs
          secretName: istio-ingressgateway-certs
        - mountPath: /etc/istio/ingressgateway-ca-certs
          name: ingressgateway-ca-certs
          secretName: istio-ingressgateway-ca-certs
        type: LoadBalancer
        zvpn:
          enabled: true
          suffix: global
    global:
      arch:
        amd64: 2
        ppc64le: 2
        s390x: 2
      certificates: []
      configValidation: true
      controlPlaneSecurityEnabled: true
      defaultNodeSelector: {}
      defaultPodDisruptionBudget:
        enabled: true
      defaultResources:
        requests:
          cpu: 10m
      disablePolicyChecks: false
      enableHelmTest: false
      enableTracing: true
      imagePullPolicy: IfNotPresent
      imagePullSecrets: []
      k8sIngress:
        enableHttps: false
        enabled: false
        gatewayName: ingressgateway
      localityLbSetting:
        enabled: true
      logAsJson: false
      logging:
        level: default:info
      meshExpansion:
        enabled: false
        useILB: false
      meshNetworks: {}
      mtls:
        auto: false
        enabled: true
      multiCluster:
        clusterName: ""
        enabled: false
      network: ""
      omitSidecarInjectorConfigMap: false
      oneNamespace: false
      operatorManageWebhooks: false
      outboundTrafficPolicy:
        mode: ALLOW_ANY
      policyCheckFailOpen: true
      priorityClassName: ""
      proxy:
        accessLogEncoding: TEXT
        accessLogFile: ""
        accessLogFormat: ""
        autoInject: enabled
        clusterDomain: cluster.local
        componentLogLevel: misc:error
        concurrency: 2
        dnsRefreshRate: 300s
        enableCoreDump: false
        envoyAccessLogService:
          enabled: false
          host: null
          port: null
        envoyMetricsService:
          enabled: false
          host: null
          port: null
          tcpKeepalive:
            interval: 10s
            probes: 3
            time: 10s
          tlsSettings:
            caCertificates: null
            clientCertificate: null
            mode: DISABLE
            privateKey: null
            sni: null
            subjectAltNames: []
        envoyStatsd:
          enabled: false
          host: null
          port: null
        excludeIPRanges: ""
        excludeInboundPorts: ""
        excludeOutboundPorts: ""
        image: proxyv2
        includeIPRanges: '*'
        includeInboundPorts: '*'
        kubevirtInterfaces: ""
        logLevel: warning
        privileged: false
        protocolDetectionTimeout: 100ms
        readinessFailureThreshold: 30
        readinessInitialDelaySeconds: 1
        readinessPeriodSeconds: 2
        resources:
          limits:
            cpu: 200m
            memory: 64Mi
          requests:
            cpu: 20m
            memory: 32Mi
        statusPort: 15020
        tracer: zipkin
      proxy_init:
        image: proxyv2
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
      sds:
        enabled: false
        token:
          aud: istio-ca
        udsPath: ""
      tracer:
        datadog:
          address: $(HOST_IP):8126
        lightstep:
          accessToken: ""
          address: ""
          cacertPath: ""
          secure: true
        zipkin:
          address: "zipkin.kyma-system:9411"
      trustDomain: cluster.local
      useMCP: true
    grafana:
      accessMode: ReadWriteMany
      contextPath: /grafana
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
          - disableDeletion: false
            folder: istio
            name: istio
            options:
              path: /var/lib/grafana/dashboards/istio
            orgId: 1
            type: file
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources: null
      enabled: false
      env: {}
      envSecrets: {}
      image:
        repository: grafana/grafana
        tag: 6.4.3
      ingress:
        annotations: null
        enabled: false
        hosts:
        - grafana.local
        tls: null
      nodeSelector: {}
      persist: false
      podAntiAffinityLabelSelector: []
      podAntiAffinityTermLabelSelector: []
      replicaCount: 1
      security:
        enabled: false
        passphraseKey: passphrase
        secretName: grafana
        usernameKey: username
      service:
        annotations: {}
        externalPort: 3000
        loadBalancerIP: null
        loadBalancerSourceRanges: null
        name: http
        type: ClusterIP
      storageClassName: ""
      tolerations: []
    istiocoredns:
      coreDNSImage: coredns/coredns
      coreDNSPluginImage: istio/coredns-plugin:0.2-istio-1.1
      coreDNSTag: 1.6.2
      enabled: false
    kiali:
      contextPath: /kiali
      createDemoSecret: false
      dashboard:
        grafanaURL: null
        jaegerURL: null
        passphraseKey: passphrase
        secretName: kiali
        usernameKey: username
        viewOnlyMode: false
      enabled: false
      hub: quay.io/kiali
      ingress:
        annotations: null
        enabled: false
        hosts:
        - kiali.local
        tls: null
      nodeSelector: {}
      podAntiAffinityLabelSelector: []
      podAntiAffinityTermLabelSelector: []
      prometheusNamespace: null
      replicaCount: 1
      security:
        cert_file: /kiali-cert/cert-chain.pem
        enabled: false
        private_key_file: /kiali-cert/key.pem
      tag: v1.9
    mixer:
      adapters:
        kubernetesenv:
          enabled: true
        prometheus:
          enabled: true
          metricsExpiryDuration: 10m
        stackdriver:
          auth:
            apiKey: ""
            appCredentials: false
            serviceAccountPath: ""
          enabled: false
          tracer:
            enabled: false
            sampleProbability: 1
        stdio:
          enabled: false
          outputAsJson: false
        useAdapterCRDs: false
      policy:
        adapters:
          kubernetesenv:
            enabled: true
          useAdapterCRDs: false
        autoscaleEnabled: true
        image: mixer
        sessionAffinityEnabled: false
      telemetry:
        autoscaleEnabled: true
        env:
          GOMAXPROCS: "6"
        image: mixer
        loadshedding:
          latencyThreshold: 100ms
          mode: enforce
        nodeSelector: {}
        podAntiAffinityLabelSelector: []
        podAntiAffinityTermLabelSelector: []
        replicaCount: 1
        reportBatchMaxEntries: 100
        reportBatchMaxTime: 1s
        sessionAffinityEnabled: false
        tolerations: []
        useMCP: true
    nodeagent:
      image: node-agent-k8s
    pilot:
      appNamespaces: []
      autoscaleEnabled: true
      autoscaleMax: 5
      autoscaleMin: 1
      configMap: true
      configNamespace: istio-config
      cpu:
        targetAverageUtilization: 80
      deploymentLabels: null
      enableProtocolSniffingForInbound: false
      enableProtocolSniffingForOutbound: true
      env: {}
      image: pilot
      ingress:
        ingressClass: istio
        ingressControllerMode: "OFF"
        ingressService: istio-ingressgateway
      keepaliveMaxServerConnectionAge: 30m
      meshNetworks:
        networks: {}
      nodeSelector: {}
      podAntiAffinityLabelSelector: []
      podAntiAffinityTermLabelSelector: []
      policy:
        enabled: true
      replicaCount: 1
      tolerations: []
      traceSampling: 1
      useMCP: true
    prometheus:
      contextPath: /prometheus
      enabled: false
      hub: docker.io/prom
      ingress:
        annotations: null
        enabled: false
        hosts:
        - prometheus.local
        tls: null
      nodeSelector: {}
      podAntiAffinityLabelSelector: []
      podAntiAffinityTermLabelSelector: []
      replicaCount: 1
      retention: 6h
      scrapeInterval: 15s
      security:
        enabled: true
      tag: v2.12.0
      tolerations: []
    security:
      dnsCerts:
        istio-pilot-service-account.istio-control: istio-pilot.istio-control
      enableNamespacesByDefault: true
      image: citadel
      selfSigned: true
      trustDomain: cluster.local
    sidecarInjectorWebhook:
      enableNamespacesByDefault: true
      image: sidecar_injector
      injectLabel: istio-injection
      objectSelector:
        autoInject: true
        enabled: false
      rewriteAppHTTPProbe: true
      selfSigned: false
    telemetry:
      enabled: true
      v2:
        enabled: false
    tracing:
      enabled: false
      ingress:
        annotations: null
        enabled: false
        hosts: null
        tls: null
      jaeger:
        accessMode: ReadWriteMany
        hub: docker.io/jaegertracing
        memory:
          max_traces: 50000
        persist: false
        spanStorageType: badger
        storageClassName: ""
        tag: "1.14"
      nodeSelector: {}
      opencensus:
        exporters:
          stackdriver:
            enable_tracing: true
        hub: docker.io/omnition
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 400Mi
        tag: 0.1.9
      podAntiAffinityLabelSelector: []
      podAntiAffinityTermLabelSelector: []
      provider: jaeger
      service:
        annotations: {}
        externalPort: 9411
        name: http-query
        type: ClusterIP
      zipkin:
        hub: docker.io/openzipkin
        javaOptsHeap: 700
        maxSpans: 500000
        node:
          cpus: 2
        probeStartupDelay: 200
        queryPort: 9411
        resources:
          limits:
            cpu: 300m
            memory: 900Mi
          requests:
            cpu: 150m
            memory: 900Mi
        tag: 2.14.2
    version: ""

