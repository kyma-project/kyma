#
# addon servicegraph configuration
#
enabled: false
replicaCount: 1
image: servicegraph
nodeSelector: {}

# Specify the pod anti-affinity that allows you to constrain which nodes
# your pod is eligible to be scheduled based on labels on pods that are
# already running on the node rather than based on labels on nodes.
# There are currently two types of anti-affinity:
#    "requiredDuringSchedulingIgnoredDuringExecution"
#    "preferredDuringSchedulingIgnoredDuringExecution"
# which denote “hard” vs. “soft” requirements, you can define your values
# in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
# correspondingly.
# For example:
# podAntiAffinityLabelSelector:
# - key: security
#   operator: In
#   values: S1,S2
#   topologyKey: "kubernetes.io/hostname"
# This pod anti-affinity rule says that the pod requires not to be scheduled
# onto a node if that node is already running a pod with label having key
# “security” and value “S1”.
podAntiAffinityLabelSelector: {}
podAntiAffinityTermLabelSelector: {}

service:
  annotations: {}
  name: http
  type: ClusterIP
  externalPort: 8088
  loadBalancerIP:
  loadBalancerSourceRanges:
ingress:
  enabled: false
  # Used to create an Ingress record.
  hosts:
    - servicegraph.local
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: servicegraph-tls
    #   hosts:
    #     - servicegraph.local
# prometheus address
prometheusAddr: http://prometheus:9090
