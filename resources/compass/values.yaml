global:
  disableLegacyConnectivity: true
  defaultTenant: 3e64ebae-38b5-46a0-b1ed-9ccee153a0ae
  tenants:
    - name: default
      id: 3e64ebae-38b5-46a0-b1ed-9ccee153a0ae
    - name: foo
      id: 1eba80dd-8ff6-54ee-be4d-77944d17b10b
    - name: bar
      id: af9f84a9-1d3a-4d9f-ae0c-94f883b33b6e

  images:
    containerRegistry:
      path: eu.gcr.io/kyma-project/incubator
    connector:
      dir:
      version: "d068b250"
    connectivity_adapter:
      dir:
      version: "76738d5c"
    pairing_adapter:
      dir:
      version: "d068b250"
    director:
      dir:
      version: "ba81ea7d"
    gateway:
      dir:
      version: "53b12181"
    healthchecker:
      dir:
      version: "109f4dc2"
    schema_migrator:
      dir:
      version: "778b2bb3"
    provisioner:
      dir:
      version: "4ef9ec63"
    certs_setup_job:
      containerRegistry:
        path: eu.gcr.io/kyma-project
      dir:
      version: "0a651695"
    kyma_environment_broker:
      dir:
      version: "a9b7becf"
    external_services_mock:
      dir:
      version: "e2837b23"
    metris:
      dir:
      version: "d1b75eac"
    tests:
      director:
        dir:
        version: "e2837b23"
      connector:
        dir:
        version: "d068b250"
      provisioner:
        dir:
        version: "8fb2e53b"
      e2e_provisioning:
        dir:
        version: "a8287494"
      connectivity_adapter:
        dir:
        version: "d068b250"
  isLocalEnv: false
  oauth2:
    host: oauth2
  livenessProbe:
    initialDelaySeconds: 30
    timeoutSeconds: 1
    periodSeconds: 10
  readinessProbe:
    initialDelaySeconds: 5
    timeoutSeconds: 1
    periodSeconds: 2

  agentPreconfiguration: true

  director:
    port: 3000

    tests:
      scopes: "runtime:write application:write label_definition:write integration_system:write application:read runtime:read label_definition:read integration_system:read health_checks:read application_template:read application_template:write eventing:manage tenant:read automatic_scenario_assignment:read automatic_scenario_assignment:write"

  auditlog:
    configMapName: "compass-gateway-auditlog-config"
    secretName: "compass-gateway-auditlog-secret"
    script:
      configMapName: "auditlog-script"

  tenantConfig:
    useDefaultTenants: true
    dbPool:
      maxOpenConnections: 1
      maxIdleConnections: 1

  connector:
    graphql:
      external:
        port: 3000
      internal:
        port: 3001
    validator:
      port: 8080
    # If secrets do not exist they will be created
    secrets:
      ca:
        name: connector-service-app-ca
        namespace: kyma-integration
        certificateKey: ca.crt
        keyKey: ca.key
      rootCA:
        name: kyma-gateway-certs
        namespace: istio-system # For Ingress Gateway to work properly the namespace needs to be istio-system
        cacert: kyma-gateway-certs-cacert # For cert-rotation the cacert should be in different secret
        certificateKey: cacert
    certificateDataHeader: "Certificate-Data"
    revocation:
      configmap:
        name: revocations-config
    # If key and certificate are not provided they will be generated
    caKey: ""
    caCertificate: ""

  provisioning:
    enabled: false

  kyma_environment_broker:
    enabled: false
    secrets:
      integrationSystemCredentials:
        name: compass-kyma-environment-broker-credentials

  provisioner:
    graphql:
      port: 3000
    secrets:
      integrationSystemCredentials:
        name: compass-provisioner-credentials

  gateway:
    port: 3000
    tls:
      host: compass-gateway
      secure:
        oauth:
          host: compass-gateway-auth-oauth
    mtls:
      host: compass-gateway-mtls
    headers:
      request:
        remove:
          - "Client-Id-From-Token"
          - "Client-Id-From-Certificate"
          - "Client-Certificate-Hash"
          - "Certificate-Data"

  connectivity_adapter:
    port: 8080
    tls:
      host: adapter-gateway
    mtls:
      host: adapter-gateway-mtls

  rewriteFilters:
    workloadLabel: oathkeeper
    tokenDataHeader: "Connector-Token"
    certificateDataHeader: "Certificate-Data"

  istio:
    gateway:
      name: "kyma-gateway"
      namespace: "kyma-system"
    proxy:
      port: 15020

  database:
    manageSecrets: true
    embedded:
      enabled: true
      director:
        name: "postgres"
      provisioner:
        name: "provisioner"
      broker:
        name: "broker"

      #TODO remove below after migration to separate user will be done
      directorDBName: "postgres"
      provisionerDBName: "provisioner"
      brokerDBName: "broker"
    # Values for GCP managed PostgreSQL database
    managedGCP:
      serviceAccountKey: ""
      instanceConnectionName: ""
      director:
        name: ""
        user: ""
        password: ""
      provisioner:
        name: ""
        user: ""
        password: ""
      broker:
        name: ""
        user: ""
        password: ""
      host: "localhost"
      hostPort: "5432"
      sslMode: ""

      #TODO remove below after migration to separate user will be done
      dbUser: ""
      dbPassword: ""
      directorDBName: ""
      provisionerDBName: ""
      brokerDBName: ""

  oathkeeper:
    host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
    port: 4455
    idTokenConfig:
      claims: '{"scopes": "{{ print .Extra.scope }}", "tenant": "{{ print .Extra.tenant }}", "consumerID": "{{ print .Extra.consumerID}}", "consumerType": "{{ print .Extra.consumerType }}"}'
    mutators:
      runtimeMappingService:
        config:
          api:
            url: http://compass-director.compass-system.svc.cluster.local:3000/runtime-mapping
            retry:
              give_up_after: 3s
              max_delay: 2000ms
      tenantMappingService:
        config:
          api:
            url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
            retry:
              give_up_after: 3s
              max_delay: 2000ms
      certificateResolverService:
        config:
          api:
            url: http://compass-connector.compass-system.svc.cluster.local:8080/v1/certificate/data/resolve
            retry:
              give_up_after: 3s
              max_delay: 2000ms
      tokenResolverService:
        config:
          api:
            url: http://compass-connector.compass-system.svc.cluster.local:8080/v1/tokens/resolve
            retry:
              give_up_after: 3s
              max_delay: 2000ms

  tenantFetcher:
    enabled: false
    manageSecrets: true
    providerName: "compass"
    schedule: "*/5 * * * *"
    oauth:
      client: ""
      secret: ""
      tokenURL: ""
    endpoints:
      tenantCreated: "127.0.0.1/events?type=created"
      tenantDeleted: "127.0.0.1/events?type=deleted"
      tenantUpdated: "127.0.0.1/events?type=updated"
    fieldMapping:
      idField: "id"
      nameField: "name"
      discriminatorField: ""
      discriminatorValue: ""
    dbPool:
      maxOpenConnections: 1
      maxIdleConnections: 1

  enableCompassDefaultScenarioAssignment: true

  metrics:
    enabled: true

  externalServicesMock:
    enabled: false

  metris:
    enabled: false

pairing-adapter:
  enabled: false
