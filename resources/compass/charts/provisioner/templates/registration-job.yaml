apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "fullname" . }}-registration
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ template "fullname" . }}-registration
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ template "fullname" . }}-registration
subjects:
  - kind: ServiceAccount
    name: {{ template "fullname" . }}-registration
    namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ template "fullname" . }}-registration
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: ["*"]
    resources: ["secrets"]
    verbs: ["create"]
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "fullname" . }}-registration
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ template "fullname" . }}-registration
    spec:
      serviceAccountName: {{ template "fullname" . }}-registration
      restartPolicy: Never
      containers:
        - name: {{ template "fullname" . }}-registration
          image: "linkyard/kubectl:1.14.2"
          command:
            - bash
            - -c
            - |
              MAX_RETRIES=60
              DIRECTOR_URL=http://compass-director.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.global.director.port }}/graphql
              DIRECTOR_HEALTHZ_URL=http://compass-director.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.global.director.port }}/healthz

              SCOPES="runtime:write runtime:read integration_system:write"
              TOKEN_PAYLOAD='{"scopes": "'${SCOPES}'","tenant":"{{ .Values.global.defaultTenant }}"}'
              ENCODED_TOKEN_PAYLOAD=$(echo -e ${TOKEN_PAYLOAD} | base64 | tr -d \\n)
              INTERNAL_TOKEN="eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.${ENCODED_TOKEN_PAYLOAD//=}."
              SECRET_NAME={{ .Values.secrets.integrationSystemCredentials.name }}

              function wait_for_access_to_api_server() {
                local cnt=0
                set +o errexit
                while :
                do
                  kubectl version > /dev/null 2>&1
                  if [[ $? -eq 0 ]]; then
                    echo "Successfully accessed API Server"
                    break
                  else
                    ((cnt++))
                    if (( cnt > $MAX_RETRIES )); then
                      echo "Max retries has been reached (retries $MAX_RETRIES). Exit."
                      exit 1
                    fi

                    echo "Cannot access API Server waiting 5s..."
                    sleep 5
                  fi
                done
                set -o errexit
              }

              function director_readiness() {
                local cnt=0
                set +o errexit
                while :
                do
                RESPONSE_CODE=$(curl -k -s "${DIRECTOR_HEALTHZ_URL}" \
                --write-out "%{http_code}\n" --output /dev/null)
                if [[ "$RESPONSE_CODE" == "200" ]]
                then
                  echo "Director ready."
                  break
                else
                  ((cnt++))
                  if (( cnt > $MAX_RETRIES )); then
                    echo "Max retries has been reached (retries $MAX_RETRIES). Exit."
                    exit 1
                  fi

                  echo "Director not ready! StatusCode: '${RESPONSE_CODE}' - waiting 5s..."
                  sleep 5
                fi
                done
                set -o errexit
              }

              function register_provisioner() {
                set +o pipefail
                echo "Compass Provisioner registration as integration system - in progress."

                RESPONSE_BODY=$(curl -k "${DIRECTOR_URL}" \
                  -H 'Content-Type: application/json' \
                  -H "authorization: Bearer ${INTERNAL_TOKEN}" \
                  --data-binary '{
                    "query":"mutation registerIntegrationSystem {\n  result: registerIntegrationSystem(\n    in: { name: \"compass-provisioner\", description: \"Compass Provisioner\" }\n  ) {\n    id\n  }\n}\n"
                  }')
                echo $RESPONSE_BODY

                INTEGRATION_SYSTEM_ID=$(echo $RESPONSE_BODY | jq -e '.data .result .id')
                INTEGRATION_SYSTEM_ID="${INTEGRATION_SYSTEM_ID:1:${#INTEGRATION_SYSTEM_ID}-2}"

                CREDENTIAL_RESPONSE_BODY=$(curl -k "${DIRECTOR_URL}" \
                  -H 'Content-Type: application/json' \
                  -H 'Accept: application/json' \
                  -H 'Connection: keep-alive' \
                  -H "authorization: Bearer ${INTERNAL_TOKEN}" \
                  --data-binary '{"query":"mutation requestCredentials {\n\trequestClientCredentialsForIntegrationSystem (id : \"'"$INTEGRATION_SYSTEM_ID"'\") {\n    id\n    auth {\n      credential {\n        ... on BasicCredentialData {\n            username\n            password\n        }\n        ...  on OAuthCredentialData {\n            clientId\n            clientSecret\n            url\n        }\n      }\n    }\n  }\n}\n"
                 }')

                CLIENT_ID=$(echo $CREDENTIAL_RESPONSE_BODY | jq -e '.data .requestClientCredentialsForIntegrationSystem .auth .credential .clientId')
                CLIENT_SECRET=$(echo $CREDENTIAL_RESPONSE_BODY | jq -e '.data .requestClientCredentialsForIntegrationSystem .auth .credential .clientSecret')
                TOKENS_ENDPOINT=$(echo $CREDENTIAL_RESPONSE_BODY | jq -e '.data .requestClientCredentialsForIntegrationSystem .auth .credential .url')

                CLIENT_ID="${CLIENT_ID:1:${#CLIENT_ID}-2}"
                CLIENT_SECRET="${CLIENT_SECRET:1:${#CLIENT_SECRET}-2}"
                TOKENS_ENDPOINT="${TOKENS_ENDPOINT:1:${#TOKENS_ENDPOINT}-2}"

                kubectl create secret generic ${SECRET_NAME} --from-literal=client_id=$CLIENT_ID --from-literal=client_secret=$CLIENT_SECRET --from-literal=tokens_endpoint=$TOKENS_ENDPOINT -n {{ .Release.Namespace }}

                echo "Compass Provisioner registration as integration system and requesting credentials - finished."
                set -o pipefail
              }

              function kill_proxy_and_exit() {
                echo 'killing pilot-agent...'
                curl -XPOST http://127.0.0.1:15020/quitquitquit
                sleep 4
                exit 0
              }

              echo "Waiting for access to API Server..."
              wait_for_access_to_api_server

              echo "Checking if secret with credentials exists..."

              set +o errexit
              kubectl get secret ${SECRET_NAME} -n {{ .Release.Namespace }} > /dev/null 2>&1
              if [[ $? -eq 0 ]]; then
                echo "Secret ${SECRET_NAME} already exists."
                kill_proxy_and_exit
              fi
              set -o errexit

              director_readiness
              register_provisioner
              kill_proxy_and_exit
