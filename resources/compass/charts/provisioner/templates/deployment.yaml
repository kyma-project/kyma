apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Chart.Name }}
    release: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/name: {{ template "name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      release: {{ .Release.Name }}
  strategy:
    {{- toYaml .Values.deployment.strategy | nindent 4 }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        release: {{ .Release.Name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/name: {{ template "name" . }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{ if .Values.global.isLocalEnv }}
      hostAliases:
        - ip: {{ .Values.global.minikubeIP }}
          hostnames:
            - "{{ .Values.global.gateway.tls.host }}.{{ .Values.global.ingress.domainName }}"
            - "{{ .Values.global.gateway.mtls.host }}.{{ .Values.global.ingress.domainName }}"
            - "{{ .Values.global.gateway.tls.secure.oauth.host }}.{{ .Values.global.ingress.domainName }}"
            - "{{ .Values.global.oauth2.host }}.{{ .Values.global.ingress.domainName }}"
      {{ end }}
      serviceAccountName: {{ template "fullname" . }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ .Values.global.images.containerRegistry.path }}/{{ .Values.global.images.provisioner.dir }}compass-provisioner:{{ .Values.global.images.provisioner.version }}
          imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.global.provisioner.graphql.port }}
              protocol: TCP
            - name: http-metrics
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
          resources:
            {{- toYaml .Values.deployment.resources | nindent 12 }}
          env:
            - name: APP_ADDRESS
              value: "0.0.0.0:{{ .Values.global.provisioner.graphql.port }}"
            - name: APP_API_ENDPOINT
              value: "/graphql"
            - name: APP_CREDENTIALS_NAMESPACE
              value: {{ .Release.Namespace }}
            - name: APP_DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-provisioner-username
            - name: APP_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-provisioner-password
            - name: APP_DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: APP_DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: APP_DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-provisioner-db-name
            - name: APP_DATABASE_SSL
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-sslMode
            - name: APP_DIRECTOR_URL
              value: "https://{{ .Values.global.gateway.tls.secure.oauth.host }}.{{ .Values.global.ingress.domainName }}/director/graphql"
            - name: APP_OAUTH_CREDENTIALS_SECRET_NAME
              value: {{ .Values.global.provisioner.secrets.integrationSystemCredentials.name | quote }}
            - name: APP_SKIP_DIRECTOR_CERT_VERIFICATION
              value: {{ or .Values.global.isLocalEnv .Values.security.skipTLSCertificateVeryfication | quote }}
            - name: APP_PROVISIONING_TIMEOUT_INSTALLATION
              value: {{ .Values.installation.timeout | quote }}
            - name: APP_PROVISIONING_TIMEOUT_UPGRADE
              value: {{ .Values.installation.timeout | quote }}
            - name: APP_PROVISIONING_TIMEOUT_AGENT_CONFIGURATION
              value: {{ .Values.runtimeAgent.configurationTimeout | quote }}
            - name: APP_PROVISIONING_TIMEOUT_AGENT_CONNECTION
              value: {{ .Values.runtimeAgent.connectionTimeout | quote }}
            - name: APP_PROVISIONING_TIMEOUT_CLUSTER_CREATION
              value: {{ .Values.gardener.clusterCreationTimeout | quote }}
            - name: APP_DEPROVISIONING_TIMEOUT_CLUSTER_DELETION
              value: {{ .Values.gardener.clusterDeletionTimeout | quote }}
            - name: APP_DEPROVISIONING_TIMEOUT_WAITING_FOR_CLUSTER_DELETION
              value: {{ .Values.gardener.waitingForClusterDeletionTimeout | quote }}
            - name: APP_DEPROVISIONING_TIMEOUT_CLUSTER_CLEANUP
              value: {{ .Values.gardener.clusterCleanupTimeout | quote }}
            - name: APP_GARDENER_PROJECT
              value: {{ .Values.gardener.project }}
            - name: APP_GARDENER_KUBECONFIG_PATH
              value: {{ .Values.gardener.kubeconfigPath }}
            - name: APP_GARDENER_AUDIT_LOGS_POLICY_CONFIG_MAP
              value: {{ .Values.gardener.auditLogsPolicyConfigMap }}
            - name: APP_GARDENER_AUDIT_LOGS_TENANT_CONFIG_PATH
              value: {{ .Values.gardener.auditLogTenantConfigPath }}
            - name: APP_GARDENER_MAINTENANCE_WINDOW_CONFIG_PATH
              value: {{ .Values.gardener.maintenanceWindowConfigPath }}
            - name: APP_GARDENER_CLUSTER_CLEANUP_RESOURCE_SELECTOR
              value: {{ .Values.gardener.clusterCleanupResourceSelector }}
            - name: APP_PROVISIONER
              value: {{ .Values.provisioner }}
            - name: APP_LATEST_DOWNLOADED_RELEASES
              value: "5"
            - name: APP_SUPPORT_ON_DEMAND_RELEASES
              value: {{ .Values.kymaRelease.onDemand.enabled | quote }}
            - name: APP_DOWNLOAD_PRE_RELEASES
              value: {{ .Values.kymaRelease.preReleases.enabled | quote }}
            - name: APP_LOG_LEVEL
              value: {{ .Values.logs.level | quote }}
            - name: APP_ENQUEUE_IN_PROGRESS_OPERATIONS
              value: "true"
          volumeMounts:
        {{if .Values.gardener.auditLogTenantConfigMapName }}
            - mountPath: /gardener/tenant
              name: gardener-audit-log-tenant-config
              readOnly: true
        {{- end }}
        {{if .Values.gardener.maintenanceWindowConfigMapName }}
            - mountPath: /gardener/maintenance
              name: gardener-maintenance-config
              readOnly: true
        {{- end }}
            - mountPath: /gardener/kubeconfig
              name: gardener-kubeconfig
              readOnly: true
        {{- with .Values.deployment.securityContext }}
          securityContext:
{{ toYaml . | indent 12 }}
        {{- end }}
          livenessProbe:
            httpGet:
              port: {{ .Values.global.provisioner.graphql.port }}
              path: "/healthz"
            initialDelaySeconds: {{ .Values.global.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.global.livenessProbe.timeoutSeconds }}
            periodSeconds: {{.Values.global.livenessProbe.periodSeconds }}
          readinessProbe:
            httpGet:
              port: {{ .Values.global.provisioner.graphql.port }}
              path: "/healthz"
            initialDelaySeconds: {{ .Values.global.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.global.readinessProbe.timeoutSeconds }}
            periodSeconds: {{.Values.global.readinessProbe.periodSeconds }}

        {{if eq .Values.global.database.embedded.enabled false}}
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.16
          command: ["/cloud_sql_proxy",
                    "-instances={{ .Values.global.database.managedGCP.instanceConnectionName }}=tcp:5432",
                    "-credential_file=/secrets/cloudsql-instance-credentials/credentials.json"]
                {{- with .Values.deployment.securityContext }}
          securityContext:
{{ toYaml . | indent 12 }}
                {{- end }}
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql-instance-credentials
              readOnly: true
        {{end}}
      volumes:
      {{if eq .Values.global.database.embedded.enabled false}}
      - name: cloudsql-instance-credentials
        secret:
          secretName: cloudsql-instance-credentials
      {{end}}
      - name: gardener-kubeconfig
        secret:
          secretName: {{ .Values.gardener.secretName }}
      {{if .Values.gardener.auditLogTenantConfigMapName }}
      - name: gardener-audit-log-tenant-config
        configMap:
          name: {{ .Values.gardener.auditLogTenantConfigMapName }}
      {{end}}
      {{if .Values.gardener.maintenanceWindowConfigMapName }}
      - name: gardener-maintenance-config
        configMap:
          name: {{ .Values.gardener.maintenanceWindowConfigMapName }}
          optional: true
      {{end}}
