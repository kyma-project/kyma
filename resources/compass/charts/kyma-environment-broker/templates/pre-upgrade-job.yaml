apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "fullname" . }}-pre-upgrade
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ template "fullname" . }}-pre-upgrade
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ template "fullname" . }}-pre-upgrade
subjects:
  - kind: ServiceAccount
    name: {{ template "fullname" . }}-pre-upgrade
    namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ template "fullname" . }}-pre-upgrade
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
  - apiGroups: ["*"]
    resources: ["secrets"]
    verbs: ["get", "update", "patch"]
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "fullname" . }}-pre-upgrade
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ template "fullname" . }}-pre-upgrade
    spec:
      serviceAccount: {{ template "fullname" . }}-pre-upgrade
      restartPolicy: Never
      containers:
        - name: job
          image: "linkyard/kubectl:1.14.2"
          env:
            - name: APP_SECRET_NAME
              value: "compass-postgresql"
          command:
            - bash
            - -c
            - |
              MAX_RETRIES=60

              # copied from registration-job
              function wait_for_access_to_api_server() {
                local cnt=0
                set +o errexit
                while :
                do
                  kubectl version > /dev/null 2>&1
                  if [[ $? -eq 0 ]]; then
                    echo "Successfully accessed API Server"
                    break
                  else
                    ((cnt++))
                    if (( cnt > $MAX_RETRIES )); then
                      echo "Max retries has been reached (retries $MAX_RETRIES). Exit."
                      exit 1
                    fi

                    echo "Cannot access API Server waiting 5s..."
                    sleep 5
                  fi
                done
                set -o errexit
              }

              function is_secret_exist() {
                set +o errexit
                kubectl get secret -n compass-system $APP_SECRET_NAME
                if [[ $? -eq 0 ]]
                then
                  echo "Secret Exist"
                fi
                set -o errexit
              }
              function update_secret() {
                set +o errexit
                local result=$(kubectl get secret -n compass-system $APP_SECRET_NAME -o json |
                jq '.data["postgresql-brokerDatabaseName"]={{ .Values.global.database.embedded.brokerDBName | b64enc | quote }}' |
                kubectl apply -f - )
                if [[ $? -eq 0 ]]; then
                  echo "Successfully updated secret"
                else
                  echo "Error while updating secret: $result"
                  exit 1
                fi
                set -o errexit
              }

              function kill_proxy_and_exit() {
                echo 'killing pilot-agent...'
                curl -XPOST http://127.0.0.1:15020/quitquitquit
                sleep 4
                exit 0
              }

              trap kill_proxy_and_exit ERR EXIT

              echo "Waiting for access to API Server..."
              wait_for_access_to_api_server

              echo "Checking if secret exist..."
              is_secret_exist
              if [[ -z $? ]]; then
                echo "Secret not exist"
                exit 0
              fi

              echo "Updating secret..."
              update_secret
