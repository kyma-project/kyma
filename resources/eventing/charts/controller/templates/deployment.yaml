apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "controller.fullname" . }}
  labels: {{- include "controller.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: {{- include "controller.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels: {{- include "controller.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "controller.fullname" . }}
      terminationGracePeriodSeconds: 10
      securityContext: {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - image: "{{include "imageurl" (dict "reg" .Values.global.containerRegistry "img" .Values.global.images.eventing_controller) }}"
          imagePullPolicy: "{{ .Values.global.images.eventing_controller.pullPolicy }}"
          name: controller
          env:
          - name: NATS_URL
            value: {{ include "controller.natsServer.url" . }}
          - name: EVENT_TYPE_PREFIX
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.global.configMap.name }}
                key: {{ .Values.global.configMap.keys.eventTypePrefix }}
          - name: DOMAIN
            value: {{ .Values.global.domainName }}
          - name: WEBHOOK_TOKEN_ENDPOINT
            value: https://oauth2.{{ .Values.global.domainName }}/oauth2/token
          - name: PUBLISHER_REQUESTS_CPU
            value: {{ .Values.publisherProxy.resources.requests.cpu }}
          - name: PUBLISHER_REQUESTS_MEMORY
            value: {{ .Values.publisherProxy.resources.requests.memory }}
          - name: PUBLISHER_LIMITS_CPU
            value: {{ .Values.publisherProxy.resources.limits.cpu }}
          - name: PUBLISHER_LIMITS_MEMORY
            value: {{ .Values.publisherProxy.resources.limits.memory }}
          - name: PUBLISHER_IMAGE
            value: "{{include "imageurl" (dict "reg" .Values.global.containerRegistry "img" .Values.global.images.publisher_proxy) }}"
          - name: PUBLISHER_IMAGE_PULL_POLICY
            value: "{{ .Values.publisherProxy.image.pullPolicy }}"
          - name: PUBLISHER_REPLICAS
            value: "{{ .Values.publisherProxy.replicas }}"
          - name: PUBLISHER_REQUEST_TIMEOUT
            value: "{{ .Values.publisherProxy.requestTimeout }}"
          {{- if .Values.global.priorityClassName }}
          - name: PUBLISHER_PRIORITY_CLASS_NAME
            value: "{{ .Values.global.priorityClassName }}"
          {{- end }}
          - name: DEFAULT_MAX_IN_FLIGHT_MESSAGES
            value: "{{ .Values.eventingBackend.defaultMaxInflightMessages }}"
          - name: DEFAULT_DISPATCHER_RETRY_PERIOD
            value: "{{ .Values.eventingBackend.defaultDispatcherRetryPeriod }}"
          - name: DEFAULT_DISPATCHER_MAX_RETRIES
            value: "{{ .Values.eventingBackend.defaultDispatcherMaxRetries }}"
          - name: APP_LOG_FORMAT
            value: {{ .Values.global.log.format | quote }}
          - name: APP_LOG_LEVEL
            value: {{ .Values.global.log.level | quote }}
          - name: ENABLE_JETSTREAM_BACKEND
            value: {{ .Values.global.jetstream.enabled | quote }}
          - name: JS_STREAM_NAME
            value: {{ .Values.jetstream.streamName | quote }}
          - name: JS_STREAM_STORAGE_TYPE
            value: {{ .Values.global.jetstream.storage | quote }}
          - name: JS_STREAM_RETENTION_POLICY
            value: {{ .Values.jetstream.retentionPolicy | quote }}
          - name: JS_CONSUMER_DELIVER_POLICY
            value: {{ .Values.jetstream.consumerDeliverPolicy | quote }}
          - name: JS_STREAM_MAX_MSGS
            value: {{ .Values.jetstream.maxMessages | quote }}
          - name: JS_STREAM_MAX_BYTES
            value: {{ .Values.jetstream.maxBytes | quote }}
          - name: JS_STREAM_SUBJECT_PREFIX
            value: {{ .Values.jetstream.subjectPrefix | quote }}
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
          livenessProbe:
            failureThreshold: {{ .Values.healthProbe.liveness.failureThreshold }}
            httpGet:
              path: {{ .Values.healthProbe.liveness.service.path }}
              port: {{ .Values.healthProbe.port }}
              scheme: {{ .Values.healthProbe.scheme }}
            initialDelaySeconds: {{ .Values.healthProbe.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthProbe.liveness.periodSeconds }}
            successThreshold: {{ .Values.healthProbe.liveness.successThreshold }}
            timeoutSeconds: {{ .Values.healthProbe.liveness.timeoutSeconds }}
          readinessProbe:
            failureThreshold: {{ .Values.healthProbe.readiness.failureThreshold }}
            httpGet:
              path: {{ .Values.healthProbe.readiness.service.path }}
              port: {{ .Values.healthProbe.port }}
              scheme:  {{ .Values.healthProbe.scheme }}
            initialDelaySeconds: {{ .Values.healthProbe.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthProbe.readiness.periodSeconds }}
            successThreshold: {{ .Values.healthProbe.readiness.successThreshold }}
            timeoutSeconds: {{ .Values.healthProbe.readiness.timeoutSeconds }}
          {{- if .Values.global.securityContext }}
          securityContext: {{- toYaml .Values.global.securityContext | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.metrics.config.port }}
              name: {{ .Values.metrics.config.portName }}
              protocol: TCP
    {{- if .Values.global.priorityClassName }}
      priorityClassName: {{ .Values.global.priorityClassName }}
    {{- end }}
