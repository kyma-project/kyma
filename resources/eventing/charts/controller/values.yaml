# override name to avoid collision with knative eventing resources
nameOverride:
replicaCount: 1
serviceAccount:
  # name defines optionally another name than the default name for the service account
  name: ""
  annotations: ""


clusterRole:
  # name defines optionally another name than the default name for the cluster role
  name: ""

bebSecret:
  nameSuffix: "-beb-oauth2"

resources:
  limits:
    cpu: 300m
    memory: 100Mi
  requests:
    cpu: 10m
    memory: 20Mi

publisherProxy:
  image:
    pullPolicy: IfNotPresent
  requestTimeout: 10s
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi

metrics:
  config:
    port: 8080
    portName: metrics
    nameSuffix: "-metrics"
    interval: 30s

webhook:
  port: 443
  targetPort: 9443
  crdName: subscriptions.eventing.kyma-project.io
  secretName: eventing-webhook-server-cert
  certHandler:
    name: api-gateway-webhook-certificates
    version: v20221027-987e5471
  mutating:
    name: subscription-mutating-webhook-configuration
  validating:
    name: subscription-validating-webhook-configuration

clusterRoleBindingSuffix: ""

eventingBackend:
  name: eventing-backend
  defaultMaxInflightMessages: 10
  defaultDispatcherRetryPeriod: 5m
  defaultDispatcherMaxRetries: 10

healthProbe:
  port: 8081
  scheme: HTTP
  liveness:
    service:
      path: "/healthz"
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2
  readiness:
    service:
      path: "/readyz"
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 3
    successThreshold: 1
    timeoutSeconds: 2

jetstream:
  # Configs for the stream used for storing events
  # Name of the JetStream stream where all events are stored.
  streamName: sap
  # Prefix for the subjects in the stream
  streamSubjectPrefix: kyma
  # Number of replicas for JetStream stream (max: 5)
  streamReplicas: 1
  # Retention policy determines when messages are deleted from the stream:
  # (more info https://docs.nats.io/using-nats/developer/develop_jetstream/model_deep_dive#stream-limits-retention-and-policy):
  # - interest: When all known observables have acknowledged a message, it can be removed.
  # - limits: Retain messages until any given limit is reached. Configure limits with maxMessages and maxBytes.
  retentionPolicy: interest
  # Consumer Deliver Policy determines from where in the stream a consumer starts receiving messages
  # (more info https://docs.nats.io/nats-concepts/jetstream/consumers#deliverpolicy-optstartseq-optstarttime):
  # - all: The consumer starts receiving from the earliest available message.
  # - last: When first consuming messages, the consumer starts receiving messages with the latest message.
  # - last_per_subject: When first consuming messages, start with the latest one for each filtered subject
  #   currently in the stream.
  # - new: When first consuming messages, the consumer starts receiving messages that were created
  consumerDeliverPolicy: new
  maxMessages: -1 # no limit
  maxBytes: -1

enableNewCRDVersion: false
