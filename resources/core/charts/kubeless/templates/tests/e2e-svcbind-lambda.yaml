{{ define "e2e-svcbind-lambda.yaml.tpl" }}

apiVersion: gateway.kyma-project.io/v1alpha2
kind: Api
metadata:
  namespace: kubeless-test
  name: test-svcbind
  labels:
    function: test-svcbind
spec:
  authentication: []
  hostname: test-svcbind.{{ .Values.global.ingress.domainName }}
  service:
    name: test-svcbind
    port: 8080
---
apiVersion: kubeless.io/v1beta1
kind: Function
metadata:
  namespace: kubeless-test
  name: test-svcbind
spec:
  handler: svcbind.handler
  runtime: nodejs8
  type: HTTP
  deps: |
    {
      "name": "svcbind",
      "version": "1.0.0",
      "dependencies": {
        "async-redis":  "1.1.4"
      }
    }
  function: |
      const asyncRedis = require("async-redis");
      module.exports = {
        handler: async (event, context) => {
        try {
           const client = asyncRedis.createClient({
             host: process.env.HOST,
             port: process.env.PORT,
             password: process.env.REDIS_PASSWORD,
             retry_strategy: function (options) {
               if (options.error && options.error.code === 'ECONNREFUSED') {
                 return new Error('The server refused the connection');
               }
               if (options.total_retry_time > 1000*60*60) {
                 return new Error('Retry time exhausted');
               }
               if (options.attempt > 10) {
                 return undefined;
               }
               // reconnect after
               return Math.min(options.attempt * 100, 3000);
             }
           });

           const value = await client.info();
           console.log(`OK ${event.data}`);
           return "OK";
        } catch (err) {
          console.log(`Got error ${err}`);
          return "FAIL";
          }
        }
      };
---
apiVersion: servicecatalog.kyma-project.io/v1alpha1
kind: ServiceBindingUsage
metadata:
  namespace: kubeless-test
  name: test-svcbind
spec:
  serviceBindingRef:
    name: redis-binding
  usedBy:
    kind: function
    name: test-svcbind
{{ end }}