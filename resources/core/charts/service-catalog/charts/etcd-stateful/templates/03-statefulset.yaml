apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "etcd-fullname" . }}
  labels:
    app: {{ template "etcd-fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  serviceName: {{ template "etcd-fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "etcd-fullname" . }}
  template:
    metadata:
      name: {{ template "etcd-fullname" . }}
      labels:
        app: {{ template "etcd-fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      terminationGracePeriodSeconds: 60
      restartPolicy: Always     
      containers:
      - name: "{{ template "etcd-fullname" . }}"
        image: "{{.Values.etcd.image}}:{{.Values.etcd.imageTag}}"
        ports:
        - containerPort: 2379
          name: client
        - containerPort: 2380
          name: peer
        - containerPort: 2381
          name: metrics
        env:
        - name: CLUSTER_SIZE
          value: "{{ .Values.replicaCount }}"
        - name: SET_NAME
          value: "{{ template "etcd-fullname" . }}"
        - name: ETCDCTL_API
          value: "3"
        - name: ETCD_TLS
          value: "{{.Values.etcd.secure}}"
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: data
          mountPath: /var/run/etcd
        - mountPath: /etc/etcdtls/member/peer-tls
          name: member-peer-tls
        - mountPath: /etc/etcdtls/member/server-tls
          name: member-server-tls
        - mountPath: /etc/etcdtls/operator/etcd-tls
          name: etcd-client-tls
        resources:
          limits:
            cpu: "{{ .Values.etcd.resources.limits.cpu }}"
            memory: "{{ .Values.etcd.resources.limits.memory }}"
          requests:
            cpu: "{{ .Values.etcd.resources.requests.cpu }}"
            memory: "{{ .Values.etcd.resources.requests.memory }}"
        command:
          - "/bin/sh"
          - "-ecx"
          - |
            IP=$(hostname -i)
            for i in $(seq 0 $((${CLUSTER_SIZE} - 1))); do
              while true; do
                echo "Waiting for ${SET_NAME}-${i}.${SET_NAME} to come up"
                ping -W 1 -c 1 ${SET_NAME}-${i}.${SET_NAME} > /dev/null && break
                sleep 1s
              done
            done

            STATE="new"
            PEERS=""
            CLIENT_URLS=""
            # Restore from backup if exists
            if [ -d /var/run/etcd/backup.etcd ]; then
              rm -rf /var/run/etcd/default.etcd
              mv /var/run/etcd/backup.etcd /var/run/etcd/default.etcd
            fi
            #
            # only needed on etcdctl if enabling authorization
            # --cert=/etc/etcdctl/server/server.crt \
            # --key=/etc/etcdctl/server/server.key \
            for i in $(seq 0 $((${CLUSTER_SIZE} - 1))); do
                if [ $(ETCD_TLS) = "true" ]; then
                  PEERS="${PEERS}${PEERS:+,}${SET_NAME}-${i}=https://${SET_NAME}-${i}.${SET_NAME}.${MY_POD_NAMESPACE}.svc.cluster.local:2380"
                  CLIENT_URLS="${CLIENT_URLS}${CLIENT_URLS:+,}https://${SET_NAME}-${i}.${SET_NAME}.${MY_POD_NAMESPACE}.svc.cluster.local:2379"
                  set +e
                  etcdctl \
                    --endpoints=https://etcd-${i}.${SET_NAME}.${MY_POD_NAMESPACE}.svc.cluster.local:2379 \
                    --cacert=/etc/etcdtls/member/server-tls/server-ca.crt \
                    endpoint status
                  ret=$?
                  set -e
                else
                  PEERS="${PEERS}${PEERS:+,}${SET_NAME}-${i}=http://${SET_NAME}-${i}.${SET_NAME}.${MY_POD_NAMESPACE}.svc.cluster.local:2380"
                  CLIENT_URLS="${CLIENT_URLS}${CLIENT_URLS:+,}http://${SET_NAME}-${i}.${SET_NAME}.${MY_POD_NAMESPACE}.svc.cluster.local:2379"
                  set +e
                  etcdctl \
                    --endpoints=https://etcd-${i}.${SET_NAME}:2379 \
                    endpoint status
                  ret=$?
                  set -e
                fi
                if [[ $ret -eq 0 ]]; then
                    STATE="existing"
                fi
            done

            # start etcd. If cluster is already initialized the `--initial-*` options will be ignored.
            #
            # This would only be needed if enabling authorization and using CN in cacert client.
            # --client-cert-auth=true \
            # --trusted-ca-file=/etc/etcdtls/server/server-ca.crt \

            if [ $(ETCD_TLS) = "true" ]; then
              exec etcd --name ${HOSTNAME} \
                --listen-peer-urls https://${IP}:2380 \
                --peer-client-cert-auth=true \
                --peer-trusted-ca-file=/etc/etcdtls/member/peer-tls/peer-ca.crt \
                --peer-cert-file=/etc/etcdtls/member/peer-tls/peer.crt \
                --peer-key-file=/etc/etcdtls/member/peer-tls/peer.key \
                --client-cert-auth=true \
                --trusted-ca-file=/etc/etcdtls/member/server-tls/server-ca.crt \
                --cert-file=/etc/etcdtls/member/server-tls/server.crt \
                --key-file=/etc/etcdtls/member/server-tls/server.key \
                --listen-client-urls https://${IP}:2379,https://127.0.0.1:2379 \
                --advertise-client-urls ${CLIENT_URLS} \
                --initial-advertise-peer-urls https://${HOSTNAME}.${SET_NAME}.${MY_POD_NAMESPACE}.svc.cluster.local:2380 \
                --initial-cluster-token etcd-cluster-1 \
                --initial-cluster ${PEERS} \
                --initial-cluster-state ${STATE} \
                --listen-metrics-urls http://${IP}:2381 \
                --data-dir /var/run/etcd/default.etcd
            else
              exec etcd --name ${HOSTNAME} \
                --listen-peer-urls http://${IP}:2380 \
                --peer-client-cert-auth=false \
                --listen-client-urls http://${IP}:2379,http://127.0.0.1:2379 \
                --advertise-client-urls ${CLIENT_URLS} \
                --initial-advertise-peer-urls http://${HOSTNAME}.${SET_NAME}.${MY_POD_NAMESPACE}.svc.cluster.local:2380 \
                --initial-cluster-token etcd-cluster-1 \
                --initial-cluster ${PEERS} \
                --initial-cluster-state ${STATE} \
                --data-dir /var/run/etcd/default.etcd
            fi

        livenessProbe:
          exec:
            command:
            - /usr/local/bin/etcdctl
            {{ if .Values.etcd.secure }}
            - --endpoints=https://localhost:2379
            - --cert=/etc/etcdtls/operator/etcd-tls/etcd-client.crt 
            - --key=/etc/etcdtls/operator/etcd-tls/etcd-client.key 
            - --cacert=/etc/etcdtls/operator/etcd-tls/etcd-client-ca.crt
            {{ else }}
            - --endpoints=http://localhost:2379
            {{ end }}
            - get
            - foo
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values: 
                    - {{ template "etcd-fullname" . }}
              topologyKey: "kubernetes.io/hostname"
  
      volumes:
      - name: member-peer-tls
        secret:
          defaultMode: 420
          secretName: "{{ template "etcd-fullname" . }}-etcd-peer-tls"
      - name: member-server-tls
        secret:
          defaultMode: 420
          secretName: "{{ template "etcd-fullname" . }}-etcd-server-tls"
      - name: etcd-client-tls
        secret:
          defaultMode: 420
          secretName: "{{ template "etcd-fullname" . }}-etcd-client-tls"

  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: 4Gi
