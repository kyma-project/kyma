apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "name" . }}-certs-job
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 1
  template:
    metadata:
      name: {{ template "name" . }}-certs-job
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: {{ template "name" . }}-certs-job
      restartPolicy: OnFailure
      volumes:
        - name: {{ template "name" . }}-tls-cert
          secret:
            secretName: {{ template "name" . }}-tls-cert
            optional: true
      containers:
      - name: generate-certs
        image: {{ .Values.global.containerRegistry.path }}/{{ .Values.global.xip_patch.dir }}xip-patch:{{ .Values.global.xip_patch.version }}
        envFrom:
        - configMapRef:
            name: {{ template "name" . }}
            optional: true
        command:
        - bash
        - -c
        - |
          set -e
          if [ "$DOMAIN" = "" ]; then
          {{ if .Values.global.domainName }}
            DOMAIN={{ .Values.global.domainName }}
          {{ else }}
            source /app/utils.sh
            INGRESS_IP=$(getLoadBalancerIP {{ template "name" . }}-ssl {{ .Release.Namespace }})
            DOMAIN="$INGRESS_IP.xip.io"
          {{ end }}
            kubectl create configmap {{ template "name" . }} --from-literal DOMAIN="$DOMAIN"
          fi
          if [ "$(cat /etc/apiserver-proxy-tls-cert/tls.key)" = "" ]; then
          {{ if .Values.global.tlsKey }}
            echo "{{ .Values.global.tlsKey }}" | base64 -d > ./key.pem
            echo "{{ .Values.global.tlsCrt }}" | base64 -d > ./cert.pem
          {{ else }}
            source /app/utils.sh
            generateCertificatesForDomain "$DOMAIN" ./key.pem ./cert.pem
          {{ end }}
            kubectl create secret tls {{ template "name" . }}-tls-cert  --key ./key.pem --cert ./cert.pem
          fi
        volumeMounts:
        - name: {{ template "name" . }}-tls-cert
          mountPath: /etc/apiserver-proxy-tls-cert/
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "name" . }}-certs-job
  namespace: {{ .Release.Namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ template "name" . }}-certs-job
  namespace: {{ .Release.Namespace}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ template "name" . }}-certs-job
  namespace: {{ .Release.Namespace}}
subjects:
- kind: ServiceAccount
  name: {{ template "name" . }}-certs-job
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ template "name" . }}-certs-job
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups: [""]
  resources: [configmaps, secrets, services]
  verbs: [create, list, get, watch]
---