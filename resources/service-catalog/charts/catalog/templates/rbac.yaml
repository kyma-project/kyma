{{- if .Values.rbacEnable }}
### Controller-Manager ###

# controller-manager role defines what access the service-catalog
# controller-manager needs to manage the resources of the
# service-catalog

apiVersion: {{ .Values.rbacApiVersion }}
kind: ClusterRole
metadata:
    name: "servicecatalog.k8s.io:controller-manager"
rules:
    - apiGroups: [""]
      resources: ["events"]
      verbs:     ["create","patch","update"]
    # TODO: do not grant global access, limit to particular secrets referenced from servicebindings
    - apiGroups: [""]
      resources: ["secrets"]
      verbs:     ["get","create","update","delete", "list", "watch"]
    - apiGroups: [""]
      resources: ["pods"]
      verbs:     ["get","list","update", "patch", "watch", "delete", "initialize"]
    - apiGroups: [""]
      resources: ["namespaces"]
      verbs:     ["get","list","watch"]
    - apiGroups: ["apiextensions.k8s.io"]
      resources: ["customresourcedefinitions"]
      verbs:     ["list"]
    # access to our service-catalog types
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["clusterserviceclasses"]
      verbs:     ["get","list","watch","create","patch","update","delete"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["clusterserviceplans"]
      verbs:     ["get","list","watch","create","patch","update","delete"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["clusterservicebrokers"]
      verbs:     ["get","list","watch", "update"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["serviceinstances"]
      verbs:     ["get","list","watch", "update"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["servicebindings"]
      verbs:     ["get","list","watch", "update", "delete"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["clusterservicebrokers/status","clusterserviceclasses/status","clusterserviceplans/status","serviceinstances/status","servicebindings/status"]
      verbs:     ["update"]
        {{- if not .Values.namespacedServiceBrokerDisabled }}
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["serviceclasses"]
      verbs:     ["get","list","watch","create","patch","update","delete"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["serviceplans"]
      verbs:     ["get","list","watch","create","patch","update","delete"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["servicebrokers"]
      verbs:     ["get","list","watch", "update"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["servicebrokers/status","serviceclasses/status","serviceplans/status"]
      verbs:     ["update"]
        {{- end }}

---

# give the controller-manager service account access to whats defined in its role.
apiVersion: {{ .Values.rbacApiVersion }}
kind: ClusterRoleBinding
metadata:
    name: "servicecatalog.k8s.io:controller-manager"
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: "servicecatalog.k8s.io:controller-manager"
subjects:
    - apiGroup: ""
      kind: ServiceAccount
      name: "{{ .Values.controllerManager.serviceAccount }}"
      namespace: "{{ .Release.Namespace }}"

---

# This gives create/update access to configmaps
apiVersion: {{ .Values.rbacApiVersion }}
kind: Role
metadata:
    name: "servicecatalog.k8s.io:cluster-info-configmap"
    namespace: "{{ .Release.Namespace }}"
rules:
    - apiGroups:     [""]
      resources:     ["configmaps"]
      resourceNames: ["cluster-info"]
      verbs:         ["get","create","list","watch","update"]

---

apiVersion: {{ .Values.rbacApiVersion }}
kind: RoleBinding
metadata:
    name: service-catalog-controller-manager-cluster-info
    namespace: "{{ .Release.Namespace }}"
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: "servicecatalog.k8s.io:cluster-info-configmap"
subjects:
    - apiGroup: ""
      kind: ServiceAccount
      name: "{{ .Values.controllerManager.serviceAccount }}"
      namespace: "{{ .Release.Namespace }}"

---

# This gives create/update access to configmaps in deployment namespace for leader election
apiVersion: {{ .Values.rbacApiVersion }}
kind: Role
metadata:
    name: "servicecatalog.k8s.io:leader-locking-controller-manager"
    namespace: "{{ .Release.Namespace }}"
rules:
    - apiGroups: [""]
      resources: ["configmaps"]
      verbs:     ["create"]
    - apiGroups:     [""]
      resources:     ["configmaps"]
      resourceNames: ["service-catalog-controller-manager"]
      verbs:         ["get","update"]

---

apiVersion: {{ .Values.rbacApiVersion }}
kind: RoleBinding
metadata:
    name: service-catalog-controller-manager-leader-election
    namespace: "{{ .Release.Namespace }}"
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: "servicecatalog.k8s.io:leader-locking-controller-manager"
subjects:
    - apiGroup: ""
      kind: ServiceAccount
      name: "{{ .Values.controllerManager.serviceAccount }}"
      namespace: "{{ .Release.Namespace }}"

---

# This allows anyone to get the Service Catalog readiness probe
apiVersion: {{ .Values.rbacApiVersion }}
kind: ClusterRole
metadata:
    name: "servicecatalog.k8s.io:service-catalog-readiness"
rules:
    - nonResourceURLs:
          - /healthz/ready
      verbs:
          - get

---

apiVersion: {{ .Values.rbacApiVersion }}
kind: ClusterRoleBinding
metadata:
    name: "servicecatalog.k8s.io:service-catalog-readiness"
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: "servicecatalog.k8s.io:service-catalog-readiness"
subjects:
    - apiGroup: rbac.authorization.k8s.io
      kind: Group
      name: system:unauthenticated
    - apiGroup: rbac.authorization.k8s.io
      kind: Group
      name: system:authenticated

---

### Webhook ###
apiVersion: {{ .Values.rbacApiVersion }}
kind: ClusterRole
metadata:
    name: "servicecatalog.k8s.io:webhook"
rules:
    # access to our service-catalog types
    - apiGroups: ["apiextensions.k8s.io"]
      resources: ["customresourcedefinitions"]
      verbs:     ["list"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["clusterserviceclasses"]
      verbs:     ["get","list","watch"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["clusterserviceplans"]
      verbs:     ["get","list","watch"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["clusterservicebrokers"]
      verbs:     ["get","list","watch"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["serviceinstances","servicebindings"]
      verbs:     ["get","list","watch"]
    - apiGroups: ["authorization.k8s.io"]
      resources: ["subjectaccessreviews"]
      verbs:     ["get","list","create"]
        {{- if not .Values.namespacedServiceBrokerDisabled }}
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["serviceclasses"]
      verbs:     ["get","list","watch"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["serviceplans"]
      verbs:     ["get","list","watch"]
    - apiGroups: ["servicecatalog.k8s.io"]
      resources: ["servicebrokers"]
      verbs:     ["get","list","watch"]
        {{- end }}

---

# give the webhook service account access to whats defined in its role.
apiVersion: {{ .Values.rbacApiVersion }}
kind: ClusterRoleBinding
metadata:
    name: "servicecatalog.k8s.io:webhook"
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: "servicecatalog.k8s.io:webhook"
subjects:
    - apiGroup: ""
      kind: ServiceAccount
      name: "{{ .Values.webhook.serviceAccount }}"
      namespace: "{{ .Release.Namespace }}"
        {{end}}
