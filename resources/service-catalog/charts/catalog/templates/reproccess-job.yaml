# This job adds annotations to all resources (account, role, rolebinding) in order to reprocess them; can be removed for Kyma version > 1.9
kind: ServiceAccount
apiVersion: v1
metadata:
  name: reproccess-job
  namespace: {{ .Release.Namespace }}
  labels:
    migration-job: "true"
    app: {{ template "fullname" . }}-reproccess-job
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: reproccess-job
  labels:
    migration-job: "true"
    app: {{ template "fullname" . }}-reproccess-job
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
rules:
  - apiGroups: ["servicecatalog.k8s.io"]
    resources:
      - "clusterserviceclasses"
      - "clusterserviceplans"
      - "serviceinstances"
      - "serviceclasses"
      - "serviceplans"
    verbs: ["get", "list", "patch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: reproccess-job
  labels:
    migration-job: "true"
    app: {{ template "fullname" . }}-reproccess-job
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
subjects:
  - kind: ServiceAccount
    name: reproccess-job
    namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: reproccess-job

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "fullname" . }}-reproccess-job
  annotations:
    sidecar.istio.io/inject: "false"
    helm.sh/hook: post-upgrade
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
  labels:
    upgrade-job: "true"
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 100
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        upgrade-job: "true"
        app: {{ template "fullname" . }}-reproccess-job
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      restartPolicy: Never
      serviceAccountName: reproccess-job
      containers:
        - name: reproccess
          image: {{ .Values.migration.alpineKcImage }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          command: ["/bin/bash","-c"]
          args:
            - |
              echo "Add annotation to ServiceClasses"
              for class in $(kubectl get serviceclass --all-namespaces -o=jsonpath="{range .items[*]} {.metadata.name}@{.metadata.namespace} {end}")
              do
                IFS='@' read -ra item <<< "$class"
                kubectl annotate serviceclass "${item[0]}" --namespace "${item[1]}" reproccess=true --overwrite=true
              done

              echo "Add annotation to ClusterServiceClasses"
              for clusterclass in $(kubectl get clusterserviceclass -o=jsonpath="{.items[*]['.metadata.name']}")
              do
                kubectl annotate clusterserviceclass $clusterclass reproccess=true --overwrite=true
              done

              echo "Add annotation to ServicePlans"
              for plan in $(kubectl get serviceplan --all-namespaces -o=jsonpath="{range .items[*]} {.metadata.name}@{.metadata.namespace} {end}")
              do
                IFS='@' read -ra item <<< "$plan"
                kubectl annotate serviceplan "${item[0]}" --namespace "${item[1]}" reproccess=true --overwrite=true
              done

              echo "Add annotation to ClusterServicePlans"
              for clusterplan in $(kubectl get clusterserviceplan -o=jsonpath="{.items[*]['.metadata.name']}")
              do
                kubectl annotate clusterserviceplan $clusterplan reproccess=true --overwrite=true
              done

              echo "Add annotation to ServiceInstance"
              for instance in $(kubectl get serviceinstance --all-namespaces -o=jsonpath="{range .items[*]} {.metadata.name}@{.metadata.namespace} {end}")
              do
                IFS='@' read -ra item <<< "$instance"
                kubectl annotate serviceinstance "${item[0]}" --namespace "${item[1]}" reproccess=true --overwrite=true
              done
